البته! من کل مستنداتی که تا الان نوشتم رو به فارسی ترجمه می‌کنم. این مستند شامل همه بخش‌هایی است که برای ربات `Ccoin` و ادغام با Gemini 1.5 Pro API، آموزش مدل، و رفع مشکلات کد (مثل مشکل منوی تنظیمات هوش مصنوعی) آماده کردم. بیایم شروع کنیم! 🚀

---

## 📜 مستندات جامع برای ربات Ccoin با Gemini API (به فارسی)

### 🎯 مقدمه
هدف این مستند اینه که یه راهنمای کامل و دقیق برای ادغام Gemini 1.5 Pro API با ربات دیسکورد `Ccoin` ارائه بدم. ربات `Ccoin` یه ربات اقتصادی منو-محوره که توی دیسکورد کار می‌کنه و قابلیت‌هایی مثل خرید، فروش، قرعه‌کشی، و تحلیل بازار داره. ما می‌خوایم از هوش مصنوعی Gemini 1.5 Pro برای بهبود ربات استفاده کنیم، مدل رو آموزش بدیم تا ربات رو بفهمه، و مشکلات کد (مثل مشکل منوی تنظیمات هوش مصنوعی) رو رفع کنیم.

---

### 🛠️ پیش‌نیازها
برای شروع، به این موارد نیاز دارید:

1. **ریپازیتوری ربات:**
   - ریپازیتوری [Discordccoin](https://github.com/amir17x/Discordccoin) رو کلون کنید:
     ```bash
     git clone https://github.com/amir17x/Discordccoin.git
     cd Discordccoin
     ```

2. **کلیدهای API:**
   - کلید API برای Gemini 1.5 Pro (از Google AI Studio).
   - کلیدهای API برای هوش مصنوعی‌های دیگه (OpenAI، OpenRouter، Grok، Hugging Face) اگه می‌خواید ازشون استفاده کنید.

3. **نصب کتابخونه‌ها:**
   - برای پایتون:
     ```bash
     pip install discord.py google-generativeai requests python-dotenv
     ```
   - برای جاوااسکریپت (اگه از TypeScript استفاده می‌کنید):
     ```bash
     npm install @google/generative-ai
     ```

4. **محیط توسعه:**
   - پایتون 3.8 یا بالاتر.
   - Node.js (برای TypeScript).
   - یه IDE مثل VSCode یا PyCharm.
   - فایل `.env` برای ذخیره کلیدهای API.

---

### 🔑 تنظیم کلیدهای API
فایل `.env` رو توی ریشه پروژه بسازید و کلیدها رو وارد کنید:

```env
DISCORD_TOKEN=توکن_ربات_دیسکورد_شما
GEMINI_API_KEY=کلید_API_جمینی_شما
OPENAI_API_KEY=کلید_API_اوپن_ای_آی_شما
OPENROUTER_API_KEY=کلید_API_اوپن_روتر_شما
XAI_API_KEY=کلید_API_گراک_شما
HUGGINGFACE_API_KEY=کلید_API_هاگینگ_فیس_شما
```

---

### 🧠 مستندات Gemini API

#### ۱. مقدمه
Gemini API یه رابط برنامه‌نویسی قدرتمند از گوگله که به توسعه‌دهنده‌ها اجازه می‌ده به مدل‌های هوش مصنوعی مولد (Generative AI) از خانواده Gemini دسترسی داشته باشن. این API برای ساخت برنامه‌های خلاقانه و هوشمند طراحی شده و قابلیت‌های چندوجهی (Multimodal) داره، یعنی می‌تونه ورودی‌هایی مثل متن، تصویر، صدا، و ویدیو رو پردازش کنه و خروجی متنی تولید کنه.

#### ۲. مدل‌های Gemini
- **Gemini 1.5 Flash:** یه مدل سریع برای کارهای ساده و مقیاس‌پذیر.
- **Gemini 1.5 Pro:** یه مدل میان‌رده برای وظایف پیچیده‌تر (مدلی که شما دارید).
- **Gemini 2.0:** پیشرفته‌ترین مدل با قابلیت‌های جدید مثل پخش صدا و ویدیو.

#### ۳. دریافت کلید API
1. به Google AI Studio برید (https://ai.google.dev).
2. با حساب گوگلتون وارد بشید.
3. روی "Get API Key" کلیک کنید و کلید رو کپی کنید.

#### ۴. ساختار درخواست و پاسخ
- **درخواست (Request):**
  ```json
  {
    "contents": [
      {
        "role": "user",
        "parts": [
          { "text": "توضیح بده که هوش مصنوعی چطور کار می‌کنه؟" }
        ]
      }
    ],
    "generationConfig": {
      "maxOutputTokens": 150,
      "temperature": 0.7
    }
  }
  ```
- **پاسخ (Response):**
  ```json
  {
    "candidates": [
      {
        "content": {
          "parts": [
            { "text": "هوش مصنوعی با استفاده از الگوریتم‌ها و مدل‌های ریاضی داده‌ها رو تحلیل می‌کنه..." }
          ]
        }
      }
    ]
  }
  ```

#### ۵. شروع سریع با پایتون
**نصب SDK:**
```bash
pip install google-generativeai
```

**مثال کد:**
```python
import google.generativeai as genai

genai.configure(api_key="YOUR_API_KEY")
model = genai.GenerativeModel("gemini-1.5-pro")

response = model.generate_content("یه داستان کوتاه درباره یه ربات بنویس.")
print(response.text)
```

**خروجی نمونه:**
```
یه روز یه ربات کوچیک به اسم آرتو توی یه شهر بزرگ روشن شد...
```

---

### 🧠 آموزش Gemini 1.5 Pro برای درک ربات Ccoin

#### ۱. مفهوم آموزش
Gemini 1.5 Pro یه مدل از پیش آموزش‌دیده است، یعنی گوگل قبلاً اون رو روی داده‌های زیادی آموزش داده. برای اینکه مدل بفهمه ربات `Ccoin` چیه، باید یا **Fine-Tuning** (تنظیم دقیق) انجام بدید یا از **Prompt Engineering** (مهندسی پرامپت) استفاده کنید.

#### ۲. روش اول: Fine-Tuning
Fine-Tuning یعنی مدل رو با داده‌های خاص خودتون دوباره آموزش بدید.

##### ۲.۱. آماده‌سازی داده‌ها
یه فایل JSONL بسازید که شامل مثال‌هایی از تعاملات ربات `Ccoin` باشه:

```json
{"contents": [{"role": "user", "parts": [{"text": "منوی اقتصاد رو نشون بده"}]},{"role": "model", "parts": [{"text": "این منوی اقتصاد Ccoin هست: 💸 خرید | 📉 فروش | 📊 تحلیل بازار"}]}]}
{"contents": [{"role": "user", "parts": [{"text": "تحلیل بازار چیه؟"}]},{"role": "model", "parts": [{"text": "تحلیل بازار Ccoin یه گزارش طنزآمیز و هوشمند از وضعیت قیمت‌ها و روند بازاره. مثلاً: قیمت Ccoin یهو ۱۰٪ رفت بالا! 🚀 وقتشه یه خرید حسابی کنی!"}]}]}
```

##### ۲.۲. آپلود داده‌ها
داده‌ها رو توی Google Cloud Storage آپلود کنید (مثلاً `gs://your-bucket/ccoin-training-data.jsonl`).

##### ۲.۳. اجرای Fine-Tuning
1. به Google AI Studio برید.
2. گزینه "New Tuned Model" رو انتخاب کنید.
3. مدل پایه (Gemini 1.5 Pro) رو انتخاب کنید.
4. مسیر فایل داده رو وارد کنید.
5. Fine-Tuning رو شروع کنید.

##### ۲.۴. استفاده از مدل تنظیم‌شده
بعد از Fine-Tuning، از مدل جدید استفاده کنید:

```python
model = genai.GenerativeModel("tunedModels/Ccoin-Gemini-1.5-Pro")
response = model.generate_content("منوی اقتصاد رو نشون بده")
print(response.text)
```

#### ۳. روش دوم: Prompt Engineering
اگه Fine-Tuning در دسترس نیست، از Prompt Engineering استفاده کنید.

##### ۳.۱. تنظیم System Instruction
```python
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    system_instruction=[
        "تو یه ربات اقتصادی به اسم Ccoin هستی که توی دیسکورد کار می‌کنی.",
        "هدفت اینه که به کاربرا کمک کنی با منوهای تعاملی (مثل دکمه‌ها و سلکت‌منوها) توی اقتصاد ربات شرکت کنن.",
        "قابلیت‌هات شامل خرید، فروش، تحلیل بازار، قرعه‌کشی، و نشون دادن اطلاعات کاربر (مثل موجودی) می‌شه.",
        "همیشه پاسخ‌هات رو به‌صورت منو-محور و کاربرپسند ارائه بده و از ایموجی‌ها برای جذاب‌تر کردن پاسخ‌ها استفاده کن."
    ]
)
```

##### ۳.۲. دادن پرامپت‌های دقیق
```python
response = model.generate_content("منوی اقتصاد رو نشون بده")
print(response.text)
```

**خروجی نمونه:**
```
این منوی اقتصاد Ccoin هست: 💸 خرید | 📉 فروش | 📊 تحلیل بازار
```

##### ۳.۳. استفاده از چند مثال (Few-Shot Prompting)
```python
prompt = """
تو یه ربات اقتصادی به اسم Ccoin هستی. منو-محور کار می‌کنی و باید پاسخ‌هات رو با دکمه‌های تعاملی و ایموجی‌ها ارائه بدی. چند مثال:

1. کاربر: منوی اقتصاد رو نشون بده
   پاسخ: این منوی اقتصاد Ccoin هست: 💸 خرید | 📉 فروش | 📊 تحلیل بازار

2. کاربر: تحلیل بازار چیه؟
   پاسخ: تحلیل بازار Ccoin یه گزارش طنزآمیز و هوشمند از وضعیت قیمت‌ها و روند بازاره. مثلاً: قیمت Ccoin یهو ۱۰٪ رفت بالا! 🚀 وقتشه یه خرید حسابی کنی!

حالا به این سؤال پاسخ بده:
کاربر: موجودی من چقدره؟
"""
response = model.generate_content(prompt)
print(response.text)
```

**خروجی نمونه:**
```
موجودی تو ۵۰۰ Ccoin هست! 💰
```

---

### 🌟 ادغام Gemini 1.5 Pro با ربات Ccoin

#### ۱. منوی تنظیمات هوش مصنوعی (برای ادمین)
یه دکمه جدید به منوی اصلی (`/menu`) اضافه می‌کنیم که فقط ادمین‌ها بتونن ببیننش:

```python
import discord
from discord.ext import commands

class MenuView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="🏠 اقتصاد", style=discord.ButtonStyle.green, custom_id="economy_menu")
    async def economy_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message("منوی اقتصاد باز شد!", ephemeral=True)

    @discord.ui.button(label="🧠 هوش مصنوعی", style=discord.ButtonStyle.red, custom_id="ai_menu")
    async def ai_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("❌ فقط ادمین‌ها می‌تونن به این بخش دسترسی داشته باشن!", ephemeral=True)
            return
        view = AISelectView()
        await interaction.response.send_message("🧠 هوش مصنوعی فعال رو انتخاب کنید:", view=view, ephemeral=True)

class AISelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.select(
        placeholder="هوش مصنوعی رو انتخاب کنید...",
        options=[
            discord.SelectOption(label="Gemini", value="gemini", emoji="✨"),
        ],
        custom_id="ai_select"
    )
    async def ai_select(self, select: discord.ui.Select, interaction: discord.Interaction):
        ai_name = select.values[0]
        if set_active_ai(ai_name):
            await interaction.response.send_message(f"✅ هوش مصنوعی فعال به `{ai_name}` تغییر کرد!", ephemeral=True)
        else:
            await interaction.response.send_message(f"❌ مشکلی پیش اومد!", ephemeral=True)

class Menu(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="menu", description="📋 منوی اصلی ربات")
    async def menu(self, ctx):
        embed = discord.Embed(title="📋 منوی Ccoin", description="یه گزینه رو انتخاب کن!", color=discord.Color.blue())
        view = MenuView()
        await ctx.respond(embed=embed, view=view)

async def setup(bot):
    await bot.add_cog(Menu(bot))
```

#### ۲. تحلیل بازار با Gemini
توی منوی اقتصاد، یه دکمه "تحلیل بازار" اضافه می‌کنیم:

```python
import google.generativeai as genai

genai.configure(api_key="YOUR_API_KEY")
model = genai.GenerativeModel(
    model_name="gemini-1.5-pro",
    system_instruction=[
        "تو یه ربات اقتصادی به اسم Ccoin هستی که توی دیسکورد کار می‌کنی.",
        "هدفت اینه که به کاربرا کمک کنی با منوهای تعاملی (مثل دکمه‌ها و سلکت‌منوها) توی اقتصاد ربات شرکت کنن.",
        "قابلیت‌هات شامل خرید، فروش، تحلیل بازار، قرعه‌کشی، و نشون دادن اطلاعات کاربر (مثل موجودی) می‌شه.",
        "همیشه پاسخ‌هات رو به‌صورت منو-محور و کاربرپسند ارائه بده و از ایموجی‌ها برای جذاب‌تر کردن پاسخ‌ها استفاده کن."
    ]
)

class EconomyView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="💸 خرید", style=discord.ButtonStyle.green, custom_id="buy")
    async def buy_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message("خرید انجام شد!", ephemeral=True)

    @discord.ui.button(label="📉 فروش", style=discord.ButtonStyle.red, custom_id="sell")
    async def sell_button(self, button: discord.ui.Button, interaction: discord.Interaction):
        await interaction.response.send_message("فروش انجام شد!", ephemeral=True)

    @discord.ui.button(label="📊 تحلیل بازار", style=discord.ButtonStyle.blue, custom_id="market_analysis")
    async def market_analysis(self, button: discord.ui.Button, interaction: discord.Interaction):
        prompt = "یه تحلیل طنزآمیز و هوشمند از بازار اقتصادی ربات Ccoin بگو."
        response = model.generate_content(prompt)
        embed = discord.Embed(title="📊 تحلیل بازار Ccoin", description=response.text, color=discord.Color.gold())
        embed.set_footer(text="تحلیل شده توسط Gemini 1.5 Pro 🧠")
        await interaction.response.send_message(embed=embed, ephemeral=True)

class Economy(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    async def show_economy_menu(self, interaction: discord.Interaction):
        embed = discord.Embed(title="💰 منوی اقتصاد", description="یه گزینه رو انتخاب کن!", color=discord.Color.green())
        view = EconomyView()
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

async def setup(bot):
    await bot.add_cog(Economy(bot))
```

---

### 🛠️ انتخاب اکشن‌ها برای Replit

#### ۱. API Request Tester (توصیه می‌شه نصب کنید ✅)
- **چرا؟** این اکشن برای تست APIهای هوش مصنوعی (مثل Gemini) عالیه. می‌تونی درخواست‌ها رو به‌صورت دستی تست کنی و خطاها رو بررسی کنی.
- **چطور نصب کنید؟** توی Replit، روی "Install" کنار "API Request Tester" کلیک کنید.

#### ۲. Code Formatter (مثلاً Black)
- **چرا؟** برای تمیز نگه داشتن کد پایتون.
- **چطور پیدا کنید؟** توی بخش Actions سرچ کنید "Black".

#### ۳. Linter (مثلاً Pylint)
- **چرا؟** برای پیدا کردن خطاهای احتمالی توی کد.
- **چطور پیدا کنید؟** سرچ کنید "Pylint".

#### ۴. Environment Manager
- **چرا؟** برای مدیریت کلیدهای API توی فایل `.env`.
- **چطور پیدا کنید؟** سرچ کنید "Environment Manager".

#### ۵. اکشن‌هایی که نیازی ندارید:
- **Perplexity:** اگه از ابزارهای دیگه برای جستجو استفاده می‌کنید، نیازی بهش نیست.

---

### 🐞 رفع مشکل منوی تنظیمات هوش مصنوعی (adminMenuExtended.ts)

#### ۱. مشکل
می‌بینم که توی پیاده‌سازی منوی تنظیمات هوش مصنوعی (AI Settings Menu) مشکل داریم. به نظر می‌رسه یه تعارض بین نسخه قدیمی و جدید کد وجود داره:
- تابع قدیمی `aiSettingsMenuLegacy` رو با یه نسخه کوتاه‌تر که `showAISettingsMenu` رو فراخوانی می‌کنه جایگزین کردیم.
- اما هنوز کدهای باقی‌مونده از نسخه قدیمی توی فایل `adminMenuExtended.ts` هستن که باعث خطاهای سینتکسی می‌شن.

#### ۲. آیا باید فایل adminMenuExtended.ts رو بازسازی کنیم؟
بله، بازسازی فایل `adminMenuExtended.ts` برای رفع این مشکل ایده خوبیه. این کار شامل موارد زیره:
- حذف همه کدهای اضافی (مثل نسخه قدیمی `aiSettingsMenuLegacy`).
- اطمینان از اینکه importها و exportها به درستی تنظیم شدن.

#### ۳. برنامه قدم‌به‌قدم برای بازسازی
##### ۳.۱. تحلیل کد فعلی
فرض می‌کنیم فایل `adminMenuExtended.ts` این شکلی باشه:

```typescript
// adminMenuExtended.ts (قبل از بازسازی)

// importهای قدیمی (بعضی‌ها ممکنه استفاده نشن)
import { LegacyMenu } from './legacyMenu';
import { aiSettingsMenuLegacy } from './aiSettingsLegacy';
import { showAISettingsMenu } from './aiSettings';
import { AdminMenuOptions } from './types';

// نسخه قدیمی (باعث تعارض می‌شه)
export function aiSettingsMenuLegacy(options: LegacyMenu) {
  console.log('Legacy AI Settings Menu');
  return options;
}

// نسخه جدید (جایگزین نسخه قدیمی)
export function aiSettingsMenuLegacy(options: AdminMenuOptions) {
  return showAISettingsMenu(options);
}

// بقیه توابع منوی ادمین
export function adminMenuExtended() {
  const options = { /* ... */ };
  aiSettingsMenuLegacy(options);
}
```

**مشکلات:**
- دو تعریف از `aiSettingsMenuLegacy` داریم که باعث خطای سینتکسی می‌شه.
- importهای قدیمی (مثل `LegacyMenu`) ممکنه دیگه استفاده نشن.

##### ۳.۲. بکاپ فایل
قبل از تغییر، یه کپی از فایل بسازید (مثلاً `adminMenuExtended.ts.bak`).

##### ۳.۳. حذف کدهای اضافی
- **حذف نسخه قدیمی `aiSettingsMenuLegacy`:**
  ```typescript
  // این رو حذف کنید
  export function aiSettingsMenuLegacy(options: LegacyMenu) {
    console.log('Legacy AI Settings Menu');
    return options;
  }

  // این رو نگه دارید
  export function aiSettingsMenuLegacy(options: AdminMenuOptions) {
    return showAISettingsMenu(options);
  }
  ```

- **حذف importهای استفاده‌نشده:**
  ```typescript
  // این‌ها رو اگه استفاده نمی‌شن حذف کنید
  import { LegacyMenu } from './legacyMenu';
  import { aiSettingsMenuLegacy } from './aiSettingsLegacy';

  // این‌ها رو نگه دارید
  import { showAISettingsMenu } from './aiSettings';
  import { AdminMenuOptions } from './types';
  ```

##### ۳.۴. اصلاح importها و exportها
- **بررسی importها:**
  ```typescript
  import { showAISettingsMenu } from './aiSettings';
  import { AdminMenuOptions } from './types';
  ```

- **بررسی exportها:**
  ```typescript
  export function aiSettingsMenuLegacy(options: AdminMenuOptions) {
    return showAISettingsMenu(options);
  }

  export function adminMenuExtended() {
    const options: AdminMenuOptions = { /* ... */ };
    aiSettingsMenuLegacy(options);
  }
  ```

##### ۳.۵. تست سازگاری
- **بررسی جاهایی که تابع فراخوانی می‌شه:**
  مطمئن شید که جاهایی که `aiSettingsMenuLegacy` فراخوانی می‌شه با نسخه جدید سازگار باشه:
  ```typescript
  const options: AdminMenuOptions = { userId: "123", settings: {} };
  aiSettingsMenuLegacy(options);
  ```

- **اجرای کامپایلر TypeScript:**
  ```bash
  tsc
  ```

##### ۳.۶. تمیز کردن کد
- importها رو مرتب کنید:
  ```typescript
  import { showAISettingsMenu } from './aiSettings';
  import { AdminMenuOptions } from './types';
  ```

- توضیحات اضافه کنید:
  ```typescript
  /**
   * منوی تنظیمات هوش مصنوعی رو با فراخوانی showAISettingsMenu نمایش می‌ده.
   * @param options - گزینه‌های منوی ادمین.
   * @returns نتیجه showAISettingsMenu.
   */
  export function aiSettingsMenuLegacy(options: AdminMenuOptions) {
    return showAISettingsMenu(options);
  }
  ```

##### ۳.۷. تست کد بازسازی‌شده
- تست‌های واحد رو اجرا کنید:
  ```bash
  npm test
  ```
- ربات رو توی دیسکورد تست کنید و مطمئن شید منوی تنظیمات هوش مصنوعی درست کار می‌کنه.

#### ۴. فایل بازسازی‌شده
```typescript
// adminMenuExtended.ts (بعد از بازسازی)

import { showAISettingsMenu } from './aiSettings';
import { AdminMenuOptions } from './types';

/**
 * منوی تنظیمات هوش مصنوعی رو با فراخوانی showAISettingsMenu نمایش می‌ده.
 * @param options - گزینه‌های منوی ادمین.
 * @returns نتیجه showAISettingsMenu.
 */
export function aiSettingsMenuLegacy(options: AdminMenuOptions) {
  return showAISettingsMenu(options);
}

/**
 * منوی ادمین پیشرفته رو نمایش می‌ده.
 */
export function adminMenuExtended() {
  const options: AdminMenuOptions = { userId: '123', settings: {} };
  aiSettingsMenuLegacy(options);
}
```

---

### 🎉 نتیجه
با این مستند، شما:
- Gemini 1.5 Pro API رو به ربات `Ccoin` اضافه کردید.
- مدل رو با Fine-Tuning یا Prompt Engineering آموزش دادید تا ربات رو بفهمه.
- اکشن‌های مناسب برای Replit رو انتخاب کردید.
- مشکل منوی تنظیمات هوش مصنوعی توی فایل `adminMenuExtended.ts` رو رفع کردید.

اگه سؤالی دارید یا نیاز به جزئیات بیشتری دارید، بفرمایید! 🌟