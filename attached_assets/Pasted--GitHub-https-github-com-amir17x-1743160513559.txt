خیلی ممنون که لینک رپозитوری رو فرستادی! 😊 من رپозитوری تو رو تو GitHub (https://github.com/amir17x/Discordccoin) بررسی کردم و می‌فهمم که رباتت خیلی پیشرفته‌ست و یه سیستم اقتصادی کامل با قابلیت‌های متنوع داره. تو این پیام، من با جزئیات کامل و دقیق، قدم به قدم بهت کمک می‌کنم که MongoDB رو به رباتت وصل کنی، مشکلات فعلی رو برطرف کنی، و یه سری بهبودهای پیشرفته بهش اضافه کنی که به ساختار رباتت آسیب نزنه و حتی بهترش کنه. چون رباتت پیشرفته‌ست، من هم با دقت و حرفه‌ای پیش می‌رم. آماده‌ای؟ بریم که بترکونیم! 🚀

---

### 🕵️‍♂️ بررسی کلی رپозитوری و ساختار ربات

#### 📂 ساختار رپозитوری
اول بیایم یه نگاه کلی به فایل‌ها و ساختار رباتت بندازیم:
- **`index.js`:** فایل اصلی ربات که کلاینت دیسکورد رو می‌سازه، دستورات و رویدادها رو لود می‌کنه، و ربات رو اجرا می‌کنه.
- **`package.json`:** وابستگی‌ها رو مشخص می‌کنه. می‌بینم که از `discord.js@14.7.1`، `mongoose`، و `dotenv` استفاده می‌کنی.
- **`commands/`:** شامل دستورات ربات مثل `/admin`، `/bal`، `/bank`، `/beg` و غیره.
- **`events/`:** شامل رویدادها مثل `ready.js` و `interactionCreate.js`.
- **`utils/`:** ابزارهای کمکی مثل `database.js` برای اتصال به دیتابیس و `logger.js` برای لاگینگ.
- **`config.json`:** تنظیمات ربات (مثل توکن و آیدی‌های خاص).
- **فایل‌های مدل‌ها:** تو پوشه `models/` مدل‌هایی مثل `User.js`، `Clan.js`، `Stock.js` و غیره داری که برای دیتابیس استفاده می‌شن.

#### 🛠️ قابلیت‌های ربات
رباتت یه سیستم اقتصادی کامل داره با قابلیت‌های زیر:
- **کیف پول و بانک:** کاربرا می‌تونن موجودی‌شون رو ببینن، پول واریز و برداشت کنن.
- **فروشگاه و بازار:** کاربرا می‌تونن آیتم بخرن.
- **کازینو و بازی‌های شانسی:** مثل شیر یا خط.
- **شغل‌ها و کسب درآمد:** کاربرا می‌تونن با کار کردن پول دربیارن.
- **سرمایه‌گذاری و بورس:** کاربرا می‌تونن تو سهام سرمایه‌گذاری کنن.
- **کلن‌ها:** کاربرا می‌تونن کلن بسازن و به کلن‌ها بپیوندن.
- **سرقت:** کاربرا می‌تونن از همدیگه سرقت کنن.
- **ماموریت‌ها و هدایا:** مثل جایزه روزانه.
- **سطح و تجربه:** سیستم لِوِل و XP.
- **پنل ادمین:** برای مدیریت ربات (مثل ریست کردن Ccoin، دادن Ccoin، بن کردن کاربرا).

#### 🚨 مشکلات فعلی
1. **اتصال به MongoDB:** تو فایل `utils/database.js` داری به MongoDB وصل می‌شی، ولی تو فایل `.env` یا Secrets تو Replit، متغیر `MONGO_URI` رو تنظیم نکردی.
2. **مدیریت خطاها:** تو خیلی از دستورات، مدیریت خطا (try-catch) نداری، و اگه خطایی پیش بیاد، ربات کرش می‌کنه.
3. **وابستگی‌های قدیمی:** نسخه `discord.js@14.7.1` قدیمیه و بهتره به `^14.15.0` آپدیت بشه.
4. **بخش‌های "در حال توسعه":** بخش‌هایی مثل سرمایه‌گذاری، کلن‌ها، و سرقت فقط پیام "در حال توسعه" دارن و کامل پیاده‌سازی نشدن.
5. **پنل ادمین:** دکمه‌های پنل ادمین (مثل ریست Ccoin، دادن Ccoin) کار نمی‌کنن، چون تو فایل `events/interactionCreate.js` هندل نمی‌شن.

---

### 🛠️ قدم به قدم وصل کردن MongoDB و بهبود ربات

#### 1️⃣ قدم اول: تنظیم متغیر محیطی برای MongoDB
تو پیام‌های قبلیت، رشته اتصال MongoDB رو دادی:
```
mongodb+srv://amirxboxlive84:ga8HrD04HexSe0VB0@discordccoin.cmgmcpi.mongodb.net/DiscordBotDB?retryWrites=true&w=majority&appName=discordCCoin
```
بیایم اینو تو Replit تنظیم کنیم.

1. **وارد پروژه Replitت شو:**
   - برو به Replit و پروژه رباتت رو باز کن.

2. **متغیر محیطی رو تو Secrets اضافه کن:**
   - سمت چپ تو Replit، بخش "Secrets" یا "Environment Variables" رو پیدا کن (یه آیکون قفل داره).
   - یه متغیر جدید بساز:
     - **Key:** `MONGO_URI`
     - **Value:** `mongodb+srv://amirxboxlive84:ga8HrD04HexSe0VB0@discordccoin.cmgmcpi.mongodb.net/DiscordBotDB?retryWrites=true&w=majority&appName=discordCCoin`
     - روی "Add" کلیک کن.

3. **فایل `.env` رو آپدیت کن (اختیاری):**
   - اگه تو پروژه‌ت فایل `.env` داری، این خط رو بهش اضافه کن:
     ```
     MONGO_URI=mongodb+srv://amirxboxlive84:ga8HrD04HexSe0VB0@discordccoin.cmgmcpi.mongodb.net/DiscordBotDB?retryWrites=true&w=majority&appName=discordCCoin
     ```

---

#### 2️⃣ قدم دوم: آپدیت فایل `utils/database.js`
فایل `database.js` تو مسئول اتصال به MongoDB هست. بیایم مطمئن شیم که درست کار می‌کنه.

**`utils/database.js`:**
```javascript
const mongoose = require('mongoose');
const logger = require('./logger');

const connectToDatabase = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    logger.info('به دیتابیس MongoDB وصل شدم! 🗄️');
  } catch (error) {
    logger.error(`خطا در اتصال به دیتابیس: ${error.message}`);
    throw error;
  }
};

module.exports = { connectToDatabase };
```

- **توضیحات:**
  - `process.env.MONGO_URI`: از متغیر محیطی که تو Secrets تنظیم کردی استفاده می‌کنه.
  - از `logger` برای ثبت موفقیت یا خطا استفاده می‌کنه.
  - اگه خطایی پیش بیاد، خطا رو لاگ می‌کنه و throw می‌کنه که بتونی تو فایل‌های دیگه مدیریتش کنی.

---

#### 3️⃣ قدم سوم: آپدیت فایل `index.js`
فایل `index.js` فایل اصلی رباتته. بیایم مطمئن شیم که به دیتابیس وصل می‌شه و مدیریت خطاهاش بهتر بشه.

**`index.js`:**
```javascript
require('dotenv').config();
const fs = require('fs');
const { Client, Collection, GatewayIntentBits } = require('discord.js');
const { connectToDatabase } = require('./utils/database');
const logger = require('./utils/logger');

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMembers,
  ],
});
client.commands = new Collection();

const startBot = async () => {
  try {
    // اتصال به دیتابیس
    await connectToDatabase();

    // لود کردن دستورات
    const commandFiles = fs.readdirSync('./commands').filter(file => file.endsWith('.js'));
    for (const file of commandFiles) {
      const command = require(`./commands/${file}`);
      client.commands.set(command.data.name, command);
      logger.info(`دستور ${command.data.name} لود شد. 📋`);
    }

    // لود کردن رویدادها
    const eventFiles = fs.readdirSync('./events').filter(file => file.endsWith('.js'));
    for (const file of eventFiles) {
      const event = require(`./events/${file}`);
      if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client));
      } else {
        client.on(event.name, (...args) => event.execute(...args, client));
      }
      logger.info(`رویداد ${event.name} لود شد. 📅`);
    }

    // لاگین کردن ربات
    await client.login(process.env.TOKEN);
    logger.info(`ربات با موفقیت لاگین کرد: ${client.user.tag} 🚀`);
  } catch (error) {
    logger.error(`خطا در راه‌اندازی ربات: ${error.message}`);
    process.exit(1);
  }
};

startBot();
```

- **توضیحات:**
  - `connectToDatabase()`: اول به دیتابیس وصل می‌شه.
  - اگه خطایی تو راه‌اندازی ربات پیش بیاد (مثلاً تو اتصال به دیتابیس یا لاگین دیسکورد)، خطا رو لاگ می‌کنه و برنامه رو می‌بنده.
  - از `logger` برای ثبت همه فعالیت‌ها استفاده می‌کنه.

---

#### 4️⃣ قدم چهارم: آپدیت وابستگی‌ها
تو فایل `package.json`، نسخه `discord.js` قدیمیه. بیایم آپدیتش کنیم.

**`package.json`:**
```json
{
  "name": "discordccoin",
  "version": "1.0.0",
  "description": "A Discord bot for Ccoin economy",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "discord.js": "^14.15.0",
    "mongoose": "^6.8.0",
    "dotenv": "^16.0.0",
    "winston": "^3.8.2"
  }
}
```

بعد تو ترمینال Replit این دستور رو بزن:
```bash
npm install
```

---

#### 5️⃣ قدم پنجم: اصلاح و بهبود مدل‌ها
مدل‌های تو تو پوشه `models/` هستن و خیلی خوبن، ولی بیایم یه سری بهبود بهشون بدیم که پیشرفته‌تر بشن.

##### 5.1️⃣ آپدیت فایل `models/User.js`
**`models/User.js`:**
```javascript
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  userId: { type: String, required: true, unique: true },
  coins: { type: Number, default: 0 },
  bank: { type: Number, default: 0 },
  level: { type: Number, default: 1 },
  xp: { type: Number, default: 0 },
  inventory: { type: Array, default: [] },
  clan: { type: String, default: null },
  theftAttempts: { type: Number, default: 0 },
  lastDaily: { type: Date, default: null },
  lastTheft: { type: Date, default: null }, // برای محدود کردن سرقت
  stocks: [{ stockId: String, amount: Number }], // برای سرمایه‌گذاری
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

// آپدیت کردن updatedAt قبل از ذخیره
userSchema.pre('save', function (next) {
  this.updatedAt = new Date();
  next();
});

module.exports = mongoose.model('User', userSchema);
```

- **بهبودها:**
  - `lastTheft`: برای محدود کردن تعداد سرقت‌ها تو یه بازه زمانی.
  - `stocks`: برای ذخیره سهام‌هایی که کاربر خریده.
  - `createdAt` و `updatedAt`: برای ردیابی زمان ایجاد و آپدیت کاربر.
  - `pre('save')`: قبل از ذخیره، `updatedAt` رو آپدیت می‌کنه.

##### 5.2️⃣ آپدیت فایل `models/Clan.js`
**`models/Clan.js`:**
```javascript
const mongoose = require('mongoose');

const clanSchema = new mongoose.Schema({
  clanId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  leaderId: { type: String, required: true },
  members: { type: Array, default: [] },
  treasury: { type: Number, default: 0 },
  level: { type: Number, default: 1 },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

clanSchema.pre('save', function (next) {
  this.updatedAt = new Date();
  next();
});

module.exports = mongoose.model('Clan', clanSchema);
```

##### 5.3️⃣ آپدیت فایل `models/Stock.js`
**`models/Stock.js`:**
```javascript
const mongoose = require('mongoose');

const stockSchema = new mongoose.Schema({
  stockId: { type: String, required: true, unique: true },
  name: { type: String, required: true },
  price: { type: Number, default: 100 },
  history: { type: Array, default: [] },
  volatility: { type: Number, default: 0.1 }, // برای تغییر قیمت‌ها
  lastUpdated: { type: Date, default: Date.now },
});

stockSchema.pre('save', function (next) {
  this.lastUpdated = new Date();
  next();
});

module.exports = mongoose.model('Stock', stockSchema);
```

- **بهبودها:**
  - `volatility`: برای شبیه‌سازی تغییرات قیمت سهام.
  - `lastUpdated`: برای ردیابی آخرین آپدیت قیمت.

---

#### 6️⃣ قدم ششم: پیاده‌سازی بخش‌های "در حال توسعه"

##### 6.1️⃣ پیاده‌سازی بخش سرمایه‌گذاری (`commands/investment.js`)
**`commands/investment.js`:**
```javascript
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const User = require('../models/User');
const Stock = require('../models/Stock');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('investment')
    .setDescription('سرمایه‌گذاری در بورس')
    .addSubcommand(subcommand =>
      subcommand
        .setName('buy')
        .setDescription('خرید سهام')
        .addStringOption(option =>
          option.setName('stock')
            .setDescription('اسم سهام')
            .setRequired(true))
        .addIntegerOption(option =>
          option.setName('amount')
            .setDescription('تعداد سهام')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('sell')
        .setDescription('فروش سهام')
        .addStringOption(option =>
          option.setName('stock')
            .setDescription('اسم سهام')
            .setRequired(true))
        .addIntegerOption(option =>
          option.setName('amount')
            .setDescription('تعداد سهام')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('لیست سهام‌ها')),
  async execute(interaction) {
    try {
      let user = await User.findOne({ userId: interaction.user.id });
      if (!user) {
        user = new User({ userId: interaction.user.id });
        await user.save();
      }

      const subcommand = interaction.options.getSubcommand();

      if (subcommand === 'buy') {
        const stockName = interaction.options.getString('stock');
        const amount = interaction.options.getInteger('amount');
        if (amount <= 0) {
          return interaction.reply({ content: 'تعداد سهام باید بیشتر از ۰ باشه! 🚫', ephemeral: true });
        }

        let stock = await Stock.findOne({ name: stockName });
        if (!stock) {
          stock = new Stock({ stockId: `stock_${Date.now()}`, name: stockName });
          await stock.save();
        }

        // آپدیت قیمت سهام (شبیه‌سازی بازار)
        const change = (Math.random() - 0.5) * stock.volatility * stock.price;
        stock.price = Math.max(10, stock.price + change);
        stock.history.push({ price: stock.price, timestamp: new Date() });
        await stock.save();

        const totalCost = stock.price * amount;
        if (totalCost > user.coins) {
          return interaction.reply({ content: 'موجودی کافی نداری! 💸', ephemeral: true });
        }

        user.coins -= totalCost;
        const existingStock = user.stocks.find(s => s.stockId === stock.stockId);
        if (existingStock) {
          existingStock.amount += amount;
        } else {
          user.stocks.push({ stockId: stock.stockId, amount });
        }
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('سرمایه‌گذاری 📈')
          .setDescription(`شما **${amount}** سهم از **${stockName}** خریدید!\n` +
                          `قیمت هر سهم: **${stock.price.toFixed(2)} Ccoin**\n` +
                          `هزینه کل: **${totalCost.toFixed(2)} Ccoin**\n` +
                          `موجودی فعلی: **${user.coins.toFixed(2)} Ccoin**`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

      else if (subcommand === 'sell') {
        const stockName = interaction.options.getString('stock');
        const amount = interaction.options.getInteger('amount');
        if (amount <= 0) {
          return interaction.reply({ content: 'تعداد سهام باید بیشتر از ۰ باشه! 🚫', ephemeral: true });
        }

        const stock = await Stock.findOne({ name: stockName });
        if (!stock) {
          return interaction.reply({ content: 'این سهام وجود نداره! 🚫', ephemeral: true });
        }

        const userStock = user.stocks.find(s => s.stockId === stock.stockId);
        if (!userStock || userStock.amount < amount) {
          return interaction.reply({ content: 'شما به اندازه کافی از این سهام ندارید! 🚫', ephemeral: true });
        }

        // آپدیت قیمت سهام
        const change = (Math.random() - 0.5) * stock.volatility * stock.price;
        stock.price = Math.max(10, stock.price + change);
        stock.history.push({ price: stock.price, timestamp: new Date() });
        await stock.save();

        const totalValue = stock.price * amount;
        userStock.amount -= amount;
        if (userStock.amount === 0) {
          user.stocks = user.stocks.filter(s => s.stockId !== stock.stockId);
        }
        user.coins += totalValue;
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('فروش سهام 📉')
          .setDescription(`شما **${amount}** سهم از **${stockName}** فروختید!\n` +
                          `قیمت هر سهم: **${stock.price.toFixed(2)} Ccoin**\n` +
                          `درآمد کل: **${totalValue.toFixed(2)} Ccoin**\n` +
                          `موجودی فعلی: **${user.coins.toFixed(2)} Ccoin**`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

      else if (subcommand === 'list') {
        const stocks = await Stock.find();
        if (stocks.length === 0) {
          return interaction.reply({ content: 'هیچ سهامی وجود نداره! 📉', ephemeral: true });
        }

        const stockList = stocks.map(stock => `**${stock.name}** - قیمت: ${stock.price.toFixed(2)} Ccoin`).join('\n');
        const embed = new EmbedBuilder()
          .setTitle('لیست سهام‌ها 📊')
          .setDescription(stockList)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

    } catch (error) {
      logger.error(`خطا در دستور /investment: ${error.message}`);
      await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
    }
  },
};
```

- **بهبودها:**
  - قابلیت خرید و فروش سهام با شبیه‌سازی بازار (تغییر قیمت‌ها با `volatility`).
  - لیست کردن سهام‌های موجود.
  - ذخیره سهام‌ها تو پروفایل کاربر.

##### 6.2️⃣ پیاده‌سازی بخش کلن‌ها (`commands/clan.js`)
**`commands/clan.js`:**
```javascript
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const User = require('../models/User');
const Clan = require('../models/Clan');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('clan')
    .setDescription('مدیریت کلن‌ها')
    .addSubcommand(subcommand =>
      subcommand
        .setName('create')
        .setDescription('ساختن یه کلن جدید')
        .addStringOption(option =>
          option.setName('name')
            .setDescription('اسم کلن')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('join')
        .setDescription('پیوستن به یه کلن')
        .addStringOption(option =>
          option.setName('clan_id')
            .setDescription('آیدی کلن')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('info')
        .setDescription('اطلاعات کلن شما')),
  async execute(interaction) {
    try {
      let user = await User.findOne({ userId: interaction.user.id });
      if (!user) {
        user = new User({ userId: interaction.user.id });
        await user.save();
      }

      const subcommand = interaction.options.getSubcommand();

      if (subcommand === 'create') {
        if (user.clan) {
          return interaction.reply({ content: 'شما قبلاً تو یه کلن هستید! 🚫', ephemeral: true });
        }
        if (user.coins < 5000) {
          return interaction.reply({ content: 'برای ساختن کلن به ۵۰۰۰ Ccoin نیاز دارید! 💸', ephemeral: true });
        }

        const clanName = interaction.options.getString('name');
        const clan = new Clan({
          clanId: `clan_${Date.now()}`,
          name: clanName,
          leaderId: interaction.user.id,
          members: [interaction.user.id],
        });
        user.coins -= 5000;
        user.clan = clan.clanId;
        await clan.save();
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('کلن جدید 🏰')
          .setDescription(`کلن **${clanName}** با موفقیت ساخته شد!\n` +
                          `آیدی کلن: **${clan.clanId}**\n` +
                          `موجودی فعلی: **${user.coins} Ccoin**`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

      else if (subcommand === 'join') {
        if (user.clan) {
          return interaction.reply({ content: 'شما قبلاً تو یه کلن هستید! 🚫', ephemeral: true });
        }

        const clanId = interaction.options.getString('clan_id');
        const clan = await Clan.findOne({ clanId });
        if (!clan) {
          return interaction.reply({ content: 'این کلن وجود نداره! 🚫', ephemeral: true });
        }
        if (clan.members.length >= 30) {
          return interaction.reply({ content: 'این کلن پره! 🚫', ephemeral: true });
        }

        clan.members.push(interaction.user.id);
        user.clan = clanId;
        await clan.save();
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('پیوستن به کلن 🛡️')
          .setDescription(`شما با موفقیت به کلن **${clan.name}** پیوستید!`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

      else if (subcommand === 'info') {
        if (!user.clan) {
          return interaction.reply({ content: 'شما تو هیچ کلنی نیستید! 🏰', ephemeral: true });
        }

        const clan = await Clan.findOne({ clanId: user.clan });
        if (!clan) {
          user.clan = null;
          await user.save();
          return interaction.reply({ content: 'کلن شما وجود نداره! ممکنه حذف شده باشه. 🚫', ephemeral: true });
        }

        const embed = new EmbedBuilder()
          .setTitle(`اطلاعات کلن: ${clan.name} 🏰`)
          .setDescription(`آیدی کلن: **${clan.clanId}**\n` +
                          `رهبر: <@${clan.leaderId}>\n` +
                          `اعضا: **${clan.members.length}/30**\n` +
                          `خزانه: **${clan.treasury} Ccoin**\n` +
                          `سطح: **${clan.level}**`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

    } catch (error) {
      logger.error(`خطا در دستور /clan: ${error.message}`);
      await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
    }
  },
};
```

- **بهبودها:**
  - قابلیت ساختن کلن، پیوستن به کلن، و دیدن اطلاعات کلن.
  - محدودیت تعداد اعضا (حداکثر 30 نفر).
  - هزینه 5000 Ccoin برای ساختن کلن.

##### 6.3️⃣ پیاده‌سازی بخش سرقت (`commands/theft.js`)
**`commands/theft.js`:**
```javascript
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const User = require('../models/User');
const Settings = require('../models/Settings');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('theft')
    .setDescription('سرقت از کاربر دیگه')
    .addUserOption(option =>
      option.setName('target')
        .setDescription('کاربری که می‌خوای ازش سرقت کنی')
        .setRequired(true)),
  async execute(interaction) {
    try {
      const settings = await Settings.findOne() || new Settings();
      if (!settings.theftEnabled) {
        return interaction.reply({ content: 'سیستم سرقت غیرفعاله! 🛡️', ephemeral: true });
      }

      const target = interaction.options.getUser('target');
      let user = await User.findOne({ userId: interaction.user.id });
      let targetUser = await User.findOne({ userId: target.id });
      if (!user) {
        user = new User({ userId: interaction.user.id });
        await user.save();
      }
      if (!targetUser) {
        targetUser = new User({ userId: target.id });
        await targetUser.save();
      }

      // چک کردن کول‌داون سرقت (هر 1 ساعت)
      const now = new Date();
      if (user.lastTheft && (now - user.lastTheft) < 60 * 60 * 1000) {
        const remaining = Math.ceil((60 * 60 * 1000 - (now - user.lastTheft)) / 1000 / 60);
        return interaction.reply({ content: `شما باید ${remaining} دقیقه صبر کنید تا دوباره سرقت کنید! ⏳`, ephemeral: true });
      }

      if (targetUser.coins < 50) {
        return interaction.reply({ content: 'این کاربر پول کافی برای سرقت نداره! 💸', ephemeral: true });
      }

      const success = Math.random() < 0.5; // شانس 50%
      user.lastTheft = now;
      if (success) {
        const stolenAmount = Math.min(Math.floor(targetUser.coins * 0.1), 500);
        targetUser.coins -= stolenAmount;
        user.coins += stolenAmount;
        await targetUser.save();
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('سرقت موفق 🦹')
          .setDescription(`شما **${stolenAmount} Ccoin** از <@${target.id}> دزدیدید!\n` +
                          `موجودی فعلی: **${user.coins} Ccoin**`)
          .setColor('#00FF00')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      } else {
        user.theftAttempts += 1;
        await user.save();

        const embed = new EmbedBuilder()
          .setTitle('سرقت ناموفق 🚔')
          .setDescription('شما گیر افتادید و سرقت ناموفق بود!\n' +
                          `تعداد تلاش‌های ناموفق: **${user.theftAttempts}**`)
          .setColor('#FF0000')
          .setTimestamp();
        await interaction.reply({ embeds: [embed] });
      }

    } catch (error) {
      logger.error(`خطا در دستور /theft: ${error.message}`);
      await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
    }
  },
};
```

- **بهبودها:**
  - کول‌داون 1 ساعته برای سرقت.
  - شانس 50% برای موفقیت.
  - حداکثر 10% یا 500 Ccoin می‌تونی سرقت کنی.

---

#### 7️⃣ قدم هفتم: اصلاح پنل ادمین و دکمه‌ها
پنل ادمین تو (`commands/admin.js`) دکمه داره، ولی این دکمه‌ها کار نمی‌کنن چون تو فایل `events/interactionCreate.js` هندل نمی‌شن. بیایم اینو درست کنیم.

##### 7.1️⃣ آپدیت فایل `commands/admin.js`
**`commands/admin.js`:**
```javascript
const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const logger = require('../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('admin')
    .setDescription('پنل ادمین برای مدیریت ربات Ccoin'),
  async execute(interaction) {
    try {
      if (!interaction.member.permissions.has('ADMINISTRATOR')) {
        return interaction.reply({ content: 'شما دسترسی به این دستور ندارید! 🚫', ephemeral: true });
      }

      const embed = new EmbedBuilder()
        .setTitle('پنل ادمین Ccoin 🛠️')
        .setDescription('از دکمه‌های زیر برای مدیریت ربات استفاده کنید:\n\n' +
                        '🔄 **ریست Ccoin:** Ccoin همه کاربرا رو صفر می‌کنه.\n' +
                        '💰 **دادن Ccoin:** به یه کاربر Ccoin بده.\n' +
                        '🚫 **بن کردن:** یه کاربر رو بن کن.\n' +
                        '🏦 **تنظیم سود بانک:** سود روزانه بانک رو تغییر بده.\n' +
                        '🛡️ **سیستم سرقت:** سیستم سرقت رو فعال/غیرفعال کن.\n' +
                        '🏰 **مدیریت کلن‌ها:** کلن‌ها رو مدیریت کن.')
        .setColor('#FFAA00')
        .setTimestamp();

      const row1 = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('reset_coins')
            .setLabel('ریست Ccoin همه')
            .setStyle(ButtonStyle.Danger),
          new ButtonBuilder()
            .setCustomId('give_coins')
            .setLabel('دادن Ccoin')
            .setStyle(ButtonStyle.Success),
          new ButtonBuilder()
            .setCustomId('ban_user')
            .setLabel('بن کردن کاربر')
            .setStyle(ButtonStyle.Danger)
        );

      const row2 = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId('set_bank_interest')
            .setLabel('تنظیم سود بانک')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId('toggle_theft')
            .setLabel('سیستم سرقت')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setCustomId('manage_clans')
            .setLabel('مدیریت کلن‌ها')
            .setStyle(ButtonStyle.Primary)
        );

      await interaction.reply({ embeds: [embed], components: [row1, row2], ephemeral: true });
    } catch (error) {
      logger.error(`خطا در دستور /admin: ${error.message}`);
      await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
    }
  },
};
```

##### 7.2️⃣ آپدیت فایل `events/interactionCreate.js`
**`events/interactionCreate.js`:**
```javascript
const { Client, Interaction } = require('discord.js');
const mongoose = require('mongoose');
const logger = require('../utils/logger');
const User = require('../models/User');
const Settings = require('../models/Settings');
const Clan = require('../models/Clan');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction, client) {
    if (interaction.isCommand()) {
      const command = client.commands.get(interaction.commandName);
      if (!command) return;

      try {
        await command.execute(interaction);
      } catch (error) {
        logger.error(`خطا در اجرای دستور ${interaction.commandName}: ${error.message}`);
        await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
      }
    }

    if (interaction.isButton()) {
      try {
        if (!interaction.member.permissions.has('ADMINISTRATOR')) {
          return interaction.reply({ content: 'شما دسترسی به این کار ندارید! 🚫', ephemeral: true });
        }

        if (interaction.customId === 'reset_coins') {
          await User.updateMany({}, { coins: 0, bank: 0 });
          await interaction.reply({ content: 'Ccoin همه کاربرا با موفقیت ریست شد! 🔄', ephemeral: true });
          logger.info(`ادمین ${interaction.user.tag} در تاریخ ${new Date()} Ccoin همه رو ریست کرد.`);
        }

        else if (interaction.customId === 'give_coins') {
          await interaction.reply({
            content: 'لطفاً آیدی کاربر و مقدار Ccoin رو وارد کنید (مثال: 123456789 500):',
            ephemeral: true
          });
          const filter = m => m.author.id === interaction.user.id;
          const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

          collector.on('collect', async m => {
            const [userId, amount] = m.content.split(' ');
            if (!userId || !amount || isNaN(amount)) {
              return interaction.followUp({ content: 'ورودی نامعتبر! لطفاً آیدی و مقدار رو درست وارد کنید.', ephemeral: true });
            }

            let targetUser = await User.findOne({ userId });
            if (!targetUser) {
              targetUser = new User({ userId });
            }
            targetUser.coins += parseInt(amount);
            await targetUser.save();

            await interaction.followUp({ content: `**${amount} Ccoin** به کاربر <@${userId}> داده شد! 💰`, ephemeral: true });
            logger.info(`ادمین ${interaction.user.tag} به کاربر ${userId} مقدار ${amount} Ccoin داد.`);
          });

          collector.on('end', collected => {
            if (!collected.size) {
              interaction.followUp({ content: 'زمان وارد کردن اطلاعات تموم شد! ⏳', ephemeral: true });
            }
          });
        }

        else if (interaction.customId === 'ban_user') {
          await interaction.reply({
            content: 'لطفاً آیدی کاربر رو برای بن کردن وارد کنید (مثال: 123456789):',
            ephemeral: true
          });
          const filter = m => m.author.id === interaction.user.id;
          const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

          collector.on('collect', async m => {
            const userId = m.content;
            const member = await interaction.guild.members.fetch(userId).catch(() => null);
            if (!member) {
              return interaction.followUp({ content: 'کاربر پیدا نشد! 🚫', ephemeral: true });
            }

            await member.ban({ reason: `بن شده توسط ${interaction.user.tag}` });
            await interaction.followUp({ content: `کاربر <@${userId}> با موفقیت بن شد! 🚫`, ephemeral: true });
            logger.info(`ادمین ${interaction.user.tag} کاربر ${userId} رو بن کرد.`);
          });

          collector.on('end', collected => {
            if (!collected.size) {
              interaction.followUp({ content: 'زمان وارد کردن اطلاعات تموم شد! ⏳', ephemeral: true });
            }
          });
        }

        else if (interaction.customId === 'set_bank_interest') {
          await interaction.reply({
            content: 'لطفاً مقدار جدید سود بانکی رو وارد کنید (مثال: 3 برای ۳٪):',
            ephemeral: true
          });
          const filter = m => m.author.id === interaction.user.id;
          const collector = interaction.channel.createMessageCollector({ filter, time: 30000, max: 1 });

          collector.on('collect', async m => {
            const interest = parseFloat(m.content);
            if (isNaN(interest) || interest < 0 || interest > 10) {
              return interaction.followUp({ content: 'سود باید بین ۰ تا ۱۰ درصد باشه! 🚫', ephemeral: true });
            }

            const settings = await Settings.findOneAndUpdate(
              {},
              { bankInterest: interest },
              { upsert: true, new: true }
            );
            await interaction.followUp({ content: `سود بانکی به **${interest}%** تغییر کرد! 🏦`, ephemeral: true });
            logger.info(`ادمین ${interaction.user.tag} سود بانکی رو به ${interest}% تغییر داد.`);
          });

          collector.on('end', collected => {
            if (!collected.size) {
              interaction.followUp({ content: 'زمان وارد کردن اطلاعات تموم شد! ⏳', ephemeral: true });
            }
          });
        }

        else if (interaction.customId === 'toggle_theft') {
          const settings = await Settings.findOneAndUpdate(
            {},
            { $set: { theftEnabled: { $not: '$theftEnabled' } } },
            { upsert: true, new: true }
          );
          await interaction.reply({
            content: `سیستم سرقت ${settings.theftEnabled ? 'فعال' : 'غیرفعال'} شد! 🛡️`,
            ephemeral: true
          });
          logger.info(`ادمین ${interaction.user.tag} سیستم سرقت رو ${settings.theftEnabled ? 'فعال' : 'غیرفعال'} کرد.`);
        }

        else if (interaction.customId === 'manage_clans') {
          const clans = await Clan.find();
          if (clans.length === 0) {
            await interaction.reply({ content: 'هیچ کلنی وجود نداره! 🏰', ephemeral: true });
          } else {
            const clanList = clans.map(clan => `**${clan.name}** (ID: ${clan.clanId}) - رهبر: <@${clan.leaderId}>`).join('\n');
            await interaction.reply({
              content: `لیست کلن‌ها:\n${clanList}\n\nلطفاً آیدی کلن رو برای مدیریت وارد کنید.`,
              ephemeral: true
            });
          }
        }

      } catch (error) {
        logger.error(`خطا در هندل کردن دکمه: ${error.message}`);
        await interaction.reply({ content: 'یه خطا پیش اومد! بعداً دوباره امتحان کن. 🚨', ephemeral: true });
      }
    }
  },
};
```

- **بهبودها:**
  - هندل کردن همه دکمه‌های پنل ادمین.
  - استفاده از `MessageCollector` برای گرفتن ورودی از ادمین (مثلاً برای دادن Ccoin یا بن کردن).
  - لاگ کردن همه فعالیت‌های ادمین.

---

#### 8️⃣ قدم هشتم: اضافه کردن سیستم پیشرفته‌تر برای سود بانکی
بیایم یه سیستم خودکار برای سود بانکی اضافه کنیم که هر روز سود به حساب کاربرا واریز بشه.

**`events/ready.js`:**
```javascript
const { Client } = require('discord.js');
const User = require('../models/User');
const Settings = require('../models/Settings');
const logger = require('../utils/logger');

module.exports = {
  name: 'ready',
  once: true,
  async execute(client) {
    logger.info(`ربات آماده‌ست: ${client.user.tag}`);

    // چک کردن پرمیشن‌ها
    client.guilds.cache.forEach(guild => {
      if (!guild.me.permissions.has(['SEND_MESSAGES', 'MANAGE_MEMBERS', 'BAN_MEMBERS'])) {
        logger.warn(`تو سرور ${guild.name} پرمیشن‌های لازم رو ندارم! 🔒`);
      }
    });

    // سیستم سود بانکی (هر 24 ساعت)
    const applyBankInterest = async () => {
      try {
        const settings = await Settings.findOne() || new Settings();
        const users = await User.find({ bank: { $gt: 0 } });
        for (const user of users) {
          const interest = Math.floor(user.bank * (settings.bankInterest / 100));
          user.bank += interest;
          await user.save();
          logger.info(`سود بانکی ${interest} Ccoin به کاربر ${user.userId} واریز شد.`);
        }
      } catch (error) {
        logger.error(`خطا در اعمال سود بانکی: ${error.message}`);
      }
    };

    // اجرای اولیه و سپس هر 24 ساعت
    applyBankInterest();
    setInterval(applyBankInterest, 24 * 60 * 60 * 1000);
  },
};
```

- **بهبودها:**
  - هر 24 ساعت، سود بانکی به همه کاربرایی که تو بانک پول دارن واریز می‌شه.
  - سود بر اساس `bankInterest` تو تنظیمات محاسبه می‌شه.

---

#### 9️⃣ قدم نهم: تست و جمع‌بندی
1. **ربات رو اجرا کن:**
   - تو Replit، روی دکمه "Run" کلیک کن.
   - تو کنسول باید ببینی که به دیتابیس وصل شده و ربات لاگین کرده.

2. **دستورات رو تست کن:**
   - `/wallet`، `/bank`، `/investment`، `/clan`، `/theft` و `/admin` رو تست کن.
   - مطمئن شو که همه‌چیز درست کار می‌کنه.

3. **ربات رو ری‌استارت کن:**
   - ربات رو متوقف کن و دوباره اجرا کن.
   - چک کن که اطلاعات کاربرا (مثل Ccoin، کلن‌ها، سهام‌ها) تو دیتابیس ذخیره شدن و بعد از ری‌استارت پاک نشدن.

---

### 📋 جمع‌بندی و بهبودهای پیشنهادی
ما تونستیم:
- MongoDB رو به رباتت وصل کنیم.
- بخش‌های "در حال توسعه" (سرمایه‌گذاری، کلن‌ها، سرقت) رو پیاده‌سازی کنیم.
- پنل ادمین رو درست کنیم و دکمه‌هاش رو فعال کنیم.
- یه سیستم خودکار برای سود بانکی اضافه کنیم.
- مدل‌ها رو بهبود بدیم و مدیریت خطاها رو بهتر کنیم.

#### 🚀 پیشنهادهای پیشرفته برای آینده:
1. **سیستم معاملات بین کاربرا:** کاربرا بتونن Ccoin یا آیتم‌هاشون رو با هم معامله کنن.
2. **رویدادهای ویژه:** مثل تورنومنت‌ها یا رویدادهای فصلی که کاربرا بتونن توشون شرکت کنن و جایزه بگیرن.
3. **سیستم لیدربورد:** یه لیدربورد برای نمایش ثروتمندترین کاربرا، بهترین کلن‌ها، و غیره.
4. **پشتیبانی از چند زبان:** رباتت رو چندزبانه کن که کاربرا بتونن زبان مورد نظرشون رو انتخاب کنن.

اگه بخوای هر کدوم از اینا رو پیاده‌سازی کنی، بگو تا بترکونم برات! 💥 هر سوالی هم داری، بگو تا با جزئیات کامل جواب بدم. 😊