### مستند جامع برای بهبود و ارتقاء داشبورد ادمین ربات دیسکورد Ccoin با الهام از Vision UI Dashboard

#### مقدمه
هدف این مستند، بهبود و ارتقاء داشبورد ادمین فعلی ربات دیسکورد Ccoin است که در حال حاضر با مشکلاتی مانند عدم کارکرد برخی دکمه‌ها، ناهماهنگی در تم و طراحی، و نمایش خطاهایی مانند `[object Object]` مواجه است. با الهام از طراحی مدرن و زیبای **Vision UI Dashboard**، این داشبورد را بازطراحی و پیشرفته‌تر می‌کنیم تا هم از نظر ظاهری جذاب‌تر شود و هم از نظر عملکردی بهبود یابد. این مستند شامل تحلیل مشکلات فعلی، پیشنهادات بهبود، و پیاده‌سازی کدهای لازم برای رفع مشکلات و ارتقاء داشبورد است.

---

### 1. تحلیل مشکلات داشبورد فعلی
بر اساس تصاویر ارائه‌شده، داشبورد فعلی با مشکلات زیر مواجه است:

#### 1.1. ناهماهنگی در تم و طراحی
- **تم فعلی:** تم فعلی داشبورد از رنگ‌های تیره با پس‌زمینه آبی تیره استفاده می‌کند، اما کارت‌ها و جداول با رنگ‌های متضاد (مانند زرد، فیروزه‌ای، سبز، و آبی) طراحی شده‌اند که باعث ناهماهنگی بصری می‌شود.
- **مقایسه با Vision UI:** Vision UI از یک تم تیره یکپارچه با افکت شیشه‌ای (Glassmorphism) استفاده می‌کند که رنگ‌های ملایم‌تر و هماهنگ‌تری دارد (مانند آبی تیره، بنفش، و سبز ملایم). این تم باعث می‌شود داشبورد حرفه‌ای‌تر و چشم‌نوازتر به نظر برسد.

#### 1.2. خطاها و عدم کارکرد دکمه‌ها
- **خطای `[object Object]`:** در صفحه "خلاصه ربات دیسکورد"، به جای نمایش داده‌ها، خطای `[object Object]` نمایش داده می‌شود که نشان‌دهنده مشکل در رندر داده‌ها یا عدم مدیریت صحیح داده‌های دریافتی از API است.
- **دکمه‌های غیرفعال:** برخی دکمه‌ها (مانند دکمه‌های "تأیید خرید" و "لغو خرید") کار نمی‌کنند، که احتمالاً به دلیل عدم اتصال صحیح به API یا عدم تعریف تابع مناسب برای آن‌ها است.

#### 1.3. کمبود قابلیت‌های پیشرفته
- **عدم وجود نمودارها:** برخلاف Vision UI که از نمودارهای پویا (مانند نمودار خطی، میله‌ای، و دوناتی) برای نمایش داده‌ها استفاده می‌کند، داشبورد فعلی فاقد این قابلیت است.
- **مدیریت ناکافی:** صفحات مدیریت (مانند مدیریت کلن‌ها، کاربرها، و اقتصاد) اطلاعات محدودی نمایش می‌دهند و قابلیت‌های تعاملی مانند جستجو، فیلتر، و ویرایش مستقیم وجود ندارد.
- **عدم وجود لاگ‌ها:** هیچ بخشی برای نمایش لاگ فعالیت‌ها وجود ندارد، در حالی که Vision UI این قابلیت را ارائه می‌دهد.

#### 1.4. ناهماهنگی در زبان و محتوا
- **زبان:** برخی عناوین و متن‌ها (مانند "خلاصه ربات دیسکورد" و "محصولات") به زبان فارسی هستند، اما برخی دیگر (مانند "Ccoin" و "Crystals") به انگلیسی، که باعث ناهماهنگی می‌شود.
- **محتوا:** اطلاعات نمایش‌داده‌شده در کارت‌ها و جداول (مانند تعداد کلن‌ها، کاربرها، و Ccoin) به‌روز یا دقیق به نظر نمی‌رسند و نیاز به اتصال به API واقعی دارند.

---

### 2. پیشنهادات بهبود
برای رفع مشکلات و ارتقاء داشبورد، پیشنهادات زیر ارائه می‌شود:

#### 2.1. بهبود تم و طراحی
- **تم یکپارچه:** استفاده از تم تیره با افکت شیشه‌ای مشابه Vision UI. رنگ‌های اصلی شامل آبی تیره (#1A1F37)، بنفش ملایم (#7289DA)، و سفید (#FFFFFF) برای متن‌ها.
- **کارت‌های شیشه‌ای:** کارت‌ها با افکت شیشه‌ای (شفافیت و سایه) طراحی شوند تا جلوه‌ای مدرن‌تر داشته باشند.
- **آیکون‌ها:** استفاده از آیکون‌های هماهنگ (مانند آیکون‌های Material UI یا React Icons) برای هر بخش.

#### 2.2. رفع خطاها و بهبود عملکرد دکمه‌ها
- **رفع خطای `[object Object]`:** بررسی و اصلاح نحوه رندر داده‌ها در کامپوننت‌ها. اطمینان از اینکه داده‌های دریافتی از API به درستی parse و نمایش داده می‌شوند.
- **فعال‌سازی دکمه‌ها:** اتصال دکمه‌ها به API مناسب و تعریف توابع برای مدیریت درخواست‌ها (مانند تأیید یا لغو خرید).

#### 2.3. اضافه کردن قابلیت‌های پیشرفته
- **نمودارها:** اضافه کردن نمودارهای پویا با استفاده از **Chart.js** برای نمایش داده‌هایی مانند تعداد کاربرهای جدید، پیام‌ها، و توزیع Ccoin.
- **مدیریت پیشرفته:** اضافه کردن قابلیت جستجو، فیلتر، و ویرایش مستقیم در جداول (مانند جدول محصولات و کاربرها).
- **لاگ‌ها:** ایجاد بخش لاگ‌ها برای نمایش فعالیت‌های ادمین و کاربرها.
- **تنظیمات:** اضافه کردن بخش تنظیمات برای تغییر تم (Dark/Light) و تنظیمات ربات (مانند نرخ تبدیل کریستال به Ccoin).

#### 2.4. یکپارچه‌سازی زبان و محتوا
- **زبان:** تمام عناوین و متن‌ها به زبان فارسی یکپارچه شوند (مثلاً "Ccoin" به "سی‌کوین" و "Crystals" به "کریستال").
- **محتوا:** اتصال داشبورد به API واقعی برای نمایش داده‌های به‌روز و دقیق.

#### 2.5. بهبود رابط کاربری
- **نوار کناری:** اضافه کردن یک نوار کناری مشابه Vision UI برای ناوبری آسان‌تر بین بخش‌ها (مانند داشبورد، کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، لاگ‌ها، و تنظیمات).
- **هدر:** طراحی هدر با نمایش نام ادمین، آواتار، و دکمه‌های تنظیمات و خروج.
- **صفحات تعاملی:** طراحی صفحات با فرم‌های تعاملی برای ویرایش و اضافه کردن داده‌ها.

---

### 3. طراحی جدید داشبورد
#### 3.1. ساختار UI جدید
- **نوار کناری (Sidebar):**  
  - لوگوی ربات (Ccoin Bot).
  - نام ادمین (whysiks).
  - منو: داشبورد، کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، لاگ‌ها، تنظیمات.
  - آیکون کنار هر گزینه (مثلاً 📊 برای داشبورد).
- **هدر (Header):**  
  - نام ادمین و آواتار.
  - دکمه تغییر تم (Dark/Light).
  - دکمه خروج (Logout).
- **بخش اصلی (Main Content):**  
  - کارت‌های آماری با افکت شیشه‌ای.
  - نمودارها با انیمیشن.
  - جداول با قابلیت جستجو و فیلتر.
  - فرم‌ها با طراحی مدرن.

#### 3.2. نمونه طراحی داشبورد
یه نمونه متنی از داشبورد جدید:

```
[Sidebar]
- Logo: Ccoin Bot
- Admin: whysiks
- 📊 داشبورد (active)
- 👥 کاربرها
- 💰 اقتصاد
- 🏰 کلن‌ها
- 🎯 کوئست‌ها
- 📜 لاگ‌ها
- ⚙️ تنظیمات

[Header]
- whysiks (Avatar) | 🌙 تم تیره | خروج

[Main Content]
📊 داشبورد
------------------------------------------------
[Glass Card] کل کاربرها: 150
[Glass Card] کاربرهای جدید (24 ساعت): 5
[Glass Card] مجموع سی‌کوین: 10,000
[Glass Card] مجموع کریستال: 500
[Glass Card] تعداد کلن‌ها: 10
[Glass Card] تعداد کوئست‌ها: 20

[Glass Card] وضعیت سرور
- ربات: آنلاین ✅
- آپتایم: 3 روز و 12 ساعت
- مصرف حافظه: 128 MB

[Chart Card] کاربرهای جدید (7 روز گذشته)
[Line Chart: 2, 3, 1, 5, 4, 3, 5]

[Chart Card] پیام‌ها (7 روز گذشته)
[Bar Chart: 500, 600, 450, 700, 800, 650, 900]

[Chart Card] توزیع سی‌کوین
[Doughnut Chart: کاربر 1: 30%, کاربر 2: 20%, ...]
------------------------------------------------
```

#### 3.3. صفحات دیگر
- **مدیریت کاربرها:** جدول با ستون‌های (نام کاربری، آیدی، سی‌کوین، کریستال، سطح، تعداد پیام‌ها) و قابلیت جستجو و ویرایش.
- **مدیریت اقتصاد:** نمایش آمار اقتصادی، جدول تراکنش‌ها، و فرم برای تغییر موجودی.
- **مدیریت کلن‌ها:** جدول کلن‌ها با قابلیت ایجاد و ویرایش.
- **مدیریت کوئست‌ها:** جدول کوئست‌ها با فرم برای اضافه کردن کوئست جدید.
- **محصولات:** جدول محصولات با قابلیت خرید و مدیریت (رفع مشکل دکمه‌های غیرفعال).
- **لاگ‌ها:** جدول لاگ‌ها با فیلتر بر اساس تاریخ و نوع فعالیت.
- **تنظیمات:** فرم برای تغییر تنظیمات ربات و تم.

---

### 4. پیاده‌سازی کد

#### 4.1. نصب پکیج‌های مورد نیاز
برای بهبود داشبورد، پکیج‌های زیر را نصب می‌کنیم:

```bash
# برای بک‌اند
npm install express express-session discord-oauth2 sqlite3 discord.js

# برای فرانت‌اند (توی پوشه client)
cd client
npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons
```

#### 4.2. ساختار پروژه
ساختار پروژه مشابه Vision UI تنظیم می‌شود:

```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های API
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   └── bot.ts          # ربات دیسکورد
├── client/
│   ├── src/
│   │   ├── assets/
│   │   │   ├── theme/
│   │   │   │   ├── colors.js
│   │   │   │   └── typography.js
│   │   ├── components/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── StatCard.tsx
│   │   │   └── GlassCard.tsx
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Users.tsx
│   │   │   ├── Economy.tsx
│   │   │   ├── Clans.tsx
│   │   │   ├── Quests.tsx
│   │   │   ├── Products.tsx
│   │   │   ├── Logs.tsx
│   │   │   └── Settings.tsx
│   │   ├── App.tsx
│   │   ├── index.tsx
│   │   └── styles.css
│   ├── package.json
│   └── vite.config.ts
├── package.json
└── .replit
```

#### 4.3. تنظیمات تم (client/src/assets/theme/colors.js)
فایل رنگ‌ها برای تم جدید:

```javascript
const colors = {
  background: "#1A1F37",
  card: "rgba(255, 255, 255, 0.1)",
  text: "#FFFFFF",
  primary: "#7289DA",
  secondary: "#3B82F6",
  accent: "#10B981",
  warning: "#F59E0B",
  error: "#EF4444",
};

export default colors;
```

#### 4.4. استایل‌های شیشه‌ای (client/src/styles.css)
استایل‌های شیشه‌ای برای کارت‌ها:

```css
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
```

#### 4.5. کامپوننت Sidebar (client/src/components/Sidebar.tsx)
نوار کناری با طراحی جدید:

```tsx
import { Link, useLocation } from "react-router-dom";
import { FaChartBar, FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaFileAlt, FaCog } from "react-icons/fa";

const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: "/dashboard", label: "داشبورد", icon: <FaChartBar /> },
    { path: "/users", label: "کاربرها", icon: <FaUsers /> },
    { path: "/economy", label: "اقتصاد", icon: <FaMoneyBillWave /> },
    { path: "/clans", label: "کلن‌ها", icon: <FaShieldAlt /> },
    { path: "/quests", label: "کوئست‌ها", icon: <FaTasks /> },
    { path: "/products", label: "محصولات", icon: <FaTasks /> },
    { path: "/logs", label: "لاگ‌ها", icon: <FaFileAlt /> },
    { path: "/settings", label: "تنظیمات", icon: <FaCog /> },
  ];

  return (
    <aside className="fixed top-0 left-0 w-64 h-full glass p-4">
      <div className="text-center mb-6">
        <img src="/logo.png" alt="Ccoin Bot" className="w-16 mx-auto" />
        <h2 className="text-xl font-bold mt-2">ربات سی‌کوین</h2>
        <p className="text-gray-400">ادمین: whysiks</p>
      </div>
      <nav>
        {menuItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`flex items-center space-x-2 py-2 px-4 rounded ${
              location.pathname === item.path ? "bg-primary" : "hover:bg-gray-700"
            }`}
          >
            {item.icon}
            <span>{item.label}</span>
          </Link>
        ))}
      </nav>
    </aside>
  );
};

export default Sidebar;
```

#### 4.6. کامپوننت Header (client/src/components/Header.tsx)
هدر با طراحی جدید:

```tsx
import { FaMoon, FaSignOutAlt } from "react-icons/fa";

const Header = () => {
  const handleLogout = async () => {
    await fetch("http://localhost:5000/api/admin/logout");
    window.location.href = "/";
  };

  return (
    <header className="glass p-4 flex justify-between items-center">
      <div className="flex items-center space-x-4">
        <img src="https://via.placeholder.com/40" alt="Avatar" className="w-10 h-10 rounded-full" />
        <span className="font-semibold">whysiks (ادمین)</span>
      </div>
      <div className="flex space-x-4">
        <button className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2">
          <FaMoon />
          <span>تم تیره</span>
        </button>
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaSignOutAlt />
          <span>خروج</span>
        </button>
      </div>
    </header>
  );
};

export default Header;
```

#### 4.7. کامپوننت GlassCard (client/src/components/GlassCard.tsx)
کارت شیشه‌ای برای نمایش آمار:

```tsx
interface GlassCardProps {
  title: string;
  value: string | number;
  icon?: JSX.Element;
}

const GlassCard = ({ title, value, icon }: GlassCardProps) => {
  return (
    <div className="glass p-4">
      <div className="flex items-center space-x-4">
        {icon && <span className="text-2xl">{icon}</span>}
        <div>
          <h2 className="text-lg font-semibold">{title}</h2>
          <p className="text-2xl mt-2">{value}</p>
        </div>
      </div>
    </div>
  );
};

export default GlassCard;
```

#### 4.8. صفحه داشبورد (client/src/pages/Dashboard.tsx)
صفحه داشبورد با طراحی جدید:

```tsx
import { useEffect, useState } from "react";
import { Line, Bar, Doughnut } from "react-chartjs-2";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  ArcElement,
  Tooltip,
  Legend,
} from "chart.js";
import GlassCard from "../components/GlassCard";
import axios from "axios";
import { FaUsers, FaUserPlus, FaMoneyBillWave, FaGem, FaShieldAlt, FaTasks } from "react-icons/fa";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, BarElement, ArcElement, Tooltip, Legend);

const Dashboard = () => {
  const [stats, setStats] = useState<any>(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/stats");
        setStats(response.data);
      } catch (error) {
        console.error("Error fetching stats:", error);
      }
    };
    fetchStats();
  }, []);

  if (!stats) return <div className="ml-64 p-6 text-center">در حال بارگذاری...</div>;

  const newUsersData = {
    labels: ["6 روز پیش", "5 روز پیش", "4 روز پیش", "3 روز پیش", "2 روز پیش", "دیروز", "امروز"],
    datasets: [
      {
        label: "کاربرهای جدید",
        data: [2, 3, 1, 5, 4, 3, 5],
        borderColor: "#3B82F6",
        fill: false,
      },
    ],
  };

  const messagesData = {
    labels: ["6 روز پیش", "5 روز پیش", "4 روز پیش", "3 روز پیش", "2 روز پیش", "دیروز", "امروز"],
    datasets: [
      {
        label: "پیام‌ها",
        data: [500, 600, 450, 700, 800, 650, 900],
        backgroundColor: "#3B82F6",
      },
    ],
  };

  const ccoinData = {
    labels: ["کاربر 1", "کاربر 2", "کاربر 3", "کاربر 4", "بقیه"],
    datasets: [
      {
        label: "توزیع سی‌کوین",
        data: [30, 20, 15, 10, 25],
        backgroundColor: ["#3B82F6", "#10B981", "#F59E0B", "#EF4444", "#8B5CF6"],
      },
    ],
  };

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📊 داشبورد</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <GlassCard title="کل کاربرها" value={stats.totalUsers || 0} icon={<FaUsers />} />
        <GlassCard title="کاربرهای جدید (24 ساعت)" value={stats.newUsers24h || 0} icon={<FaUserPlus />} />
        <GlassCard title="مجموع سی‌کوین" value={stats.totalCcoin || 0} icon={<FaMoneyBillWave />} />
        <GlassCard title="مجموع کریستال" value={stats.totalCrystals || 0} icon={<FaGem />} />
        <GlassCard title="تعداد کلن‌ها" value={stats.totalClans || 0} icon={<FaShieldAlt />} />
        <GlassCard title="تعداد کوئست‌ها" value={stats.totalQuests || 0} icon={<FaTasks />} />
      </div>
      <div className="mt-6 glass p-4">
        <h2 className="text-xl font-semibold mb-4">وضعیت سرور</h2>
        <p>
          ربات: <span className="text-green-500">آنلاین ✅</span>
        </p>
        <p>آپتایم: {stats.uptime || "نامشخص"}</p>
        <p>مصرف حافظه: {stats.memoryUsage || "نامشخص"} MB</p>
      </div>
      <div className="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="glass p-4">
          <h2 className="text-xl font-semibold mb-4">کاربرهای جدید (7 روز گذشته)</h2>
          <Line data={newUsersData} />
        </div>
        <div className="glass p-4">
          <h2 className="text-xl font-semibold mb-4">پیام‌ها (7 روز گذشته)</h2>
          <Bar data={messagesData} />
        </div>
        <div className="glass p-4">
          <h2 className="text-xl font-semibold mb-4">توزیع سی‌کوین</h2>
          <Doughnut data={ccoinData} />
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
```

#### 4.9. صفحه محصولات (client/src/pages/Products.tsx)
صفحه محصولات با رفع مشکل دکمه‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import { FaLock, FaVolumeUp, FaUserShield, FaGift, FaKey } from "react-icons/fa";

const Products = () => {
  const [products, setProducts] = useState<any[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const handlePurchase = async (productId: string) => {
    try {
      await axios.post(`http://localhost:5000/api/admin/products/${productId}/purchase`);
      alert("خرید با موفقیت انجام شد!");
      // به‌روزرسانی لیست محصولات
      const response = await axios.get("http://localhost:5000/api/admin/products");
      setProducts(response.data);
    } catch (error) {
      console.error("Error purchasing product:", error);
      alert("خطا در خرید محصول!");
    }
  };

  const icons = {
    "Wallet Lock": <FaLock />,
    "Voice Booster": <FaVolumeUp />,
    "Legendary Role": <FaUserShield />,
    "Special Role": <FaGift />,
    "Mystery Box": <FaKey />,
  };

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🛒 محصولات</h1>
      <div className="glass p-4">
        <table className="w-full text-left">
          <thead>
            <tr>
              <th>آیکون</th>
              <th>نام</th>
              <th>وضعیت</th>
              <th>شانس سرقت</th>
              <th>شانس لجندری</th>
              <th>قیمت (سی‌کوین)</th>
              <th>دوره</th>
              <th>توضیحات</th>
              <th>اقدام</th>
            </tr>
          </thead>
          <tbody>
            {products.map((product) => (
              <tr key={product.id}>
                <td>{icons[product.name]}</td>
                <td>{product.name}</td>
                <td>{product.status}</td>
                <td>{product.robberyChance}</td>
                <td>{product.legendaryChance}</td>
                <td>{product.price}</td>
                <td>{product.period}</td>
                <td>{product.description}</td>
                <td>
                  <button
                    onClick={() => handlePurchase(product.id)}
                    className="bg-green-500 hover:bg-green-600 text-white py-1 px-3 rounded"
                  >
                    خرید
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Products;
```

#### 4.10. بک‌اند (server/admin.ts)
روت‌های API برای محصولات:

```typescript
import express from "express";
import { getProducts, purchaseProduct } from "./storage";

const router = express.Router();

// میدلوِر برای چک کردن ورود
const ensureAuthenticated = (req, res, next) => {
  if (!req.session.user) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const guild = req.session.guilds.find((g) => g.id === "YOUR_GUILD_ID");
  if (!guild || !guild.roles.includes("ADMIN_ROLE_ID")) {
    return res.status(403).json({ error: "Access Denied" });
  }
  next();
};

// دریافت محصولات
router.get("/products", ensureAuthenticated, async (req, res) => {
  const products = await getProducts();
  res.json(products);
});

// خرید محصول
router.post("/products/:id/purchase", ensureAuthenticated, async (req, res) => {
  const productId = req.params.id;
  await purchaseProduct(productId, req.session.user.id);
  res.json({ message: "Purchase successful" });
});

export default router;
```

#### 4.11. توابع دیتابیس (server/storage.ts)
توابع دیتابیس برای محصولات:

```typescript
import { db } from "./database";

export async function getProducts() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM products", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function purchaseProduct(productId, userId) {
  return new Promise((resolve, reject) => {
    db.run(
      "INSERT INTO purchases (user_id, product_id, purchase_date) VALUES (?, ?, ?)",
      [userId, productId, new Date().toISOString()],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}
```

---

### 5. مستند برای هوش مصنوعی
#### مقدمه
این مستند برای بهبود و ارتقاء داشبورد ادمین ربات دیسکورد Ccoin طراحی شده است. داشبورد فعلی با مشکلاتی مانند ناهماهنگی در تم، خطاهای رندر داده‌ها، و عدم کارکرد دکمه‌ها مواجه است. با الهام از Vision UI Dashboard، این داشبورد بازطراحی و پیشرفته‌تر شده است.

#### قابلیت‌ها
- **داشبورد:** کارت‌های آماری (کاربرها، سی‌کوین، کریستال، کلن‌ها، کوئست‌ها)، نمودارها (کاربرهای جدید، پیام‌ها، توزیع سی‌کوین)، وضعیت سرور.
- **مدیریت کاربرها:** لیست کاربرها، ویرایش/حذف، اضافه کردن کاربر.
- **مدیریت اقتصاد:** آمار اقتصادی، مدیریت تراکنش‌ها، تغییر موجودی.
- **مدیریت کلن‌ها:** لیست کلن‌ها، ایجاد/ویرایش/حذف.
- **مدیریت کوئست‌ها:** لیست کوئست‌ها، ایجاد/ویرایش/حذف.
- **محصولات:** جدول محصولات با قابلیت خرید و مدیریت.
- **لاگ‌ها:** نمایش لاگ فعالیت‌ها.
- **تنظیمات:** تنظیمات ربات و تم.

#### طراحی UI
- **تم:** تیره با افکت شیشه‌ای (Glassmorphism).
- **نوار کناری:** منوی ناوبری با آیکون‌ها.
- **هدر:** نام ادمین، آواتار، دکمه تغییر تم، دکمه خروج.
- **محتوا:** کارت‌های آماری، نمودارها، جداول، فرم‌ها.

#### تغییرات توی کد
1. **نصب پکیج‌ها:**  
   ```bash
   npm install express express-session discord-oauth2 sqlite3 discord.js
   cd client
   npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons
   ```
2. **ساختار پروژه:**  
   فایل‌ها و پوشه‌ها طبق ساختار بالا.
3. **بک‌اند:**  
   - `server/admin.ts`: روت‌های API برای محصولات.
   - `server/storage.ts`: توابع دیتابیس برای محصولات.
4. **فرانت‌اند:**  
   - `client/src/components/`: کامپوننت‌ها (Sidebar, Header, GlassCard).
   - `client/src/pages/`: صفحات (Dashboard, Products, ...).
   - `client/src/styles.css`: استایل‌های شیشه‌ای.

#### نتیجه‌گیری
این داشبورد ادمین با طراحی مدرن و قابلیت‌های پیشرفته، تجربه کاربری بهتری ارائه می‌دهد و مشکلات فعلی را رفع می‌کند. برای اطلاعات بیشتر، به مستندات Vision UI Dashboard مراجعه کنید.

---

اگه سؤالی داری یا می‌خوای روی یه بخش خاص بیشتر کار کنیم، بگو تا کمکت کنم! 😊🚀