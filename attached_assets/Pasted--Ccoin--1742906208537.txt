متوجه شدم! شما یه سرور داری که ربات دیسکوردت (مثل Ccoin) روش اجرا می‌شه، و می‌خوای از هوش مصنوعی (مثلاً یه ابزار مثل Replit) بخوای که یه پنل ادمین تحت وب برات بسازه. این پنل باید روی سرورت اجرا بشه و بتونی از طریق یه لینک (URL) بهش دسترسی پیدا کنی و همه جنبه‌های رباتت رو مدیریت کنی (مثلاً اطلاعات کاربرا، موجودی‌ها، کلن‌ها، ماموریت‌ها، و غیره). من یه راهنمای کامل برات می‌نویسم که بتونی این درخواست رو به هوش مصنوعی بدی و یه پنل ادمین تحت وب بسازی.

---

### 1. توضیح کلی برای هوش مصنوعی
برای اینکه هوش مصنوعی (مثل Replit) بتونه یه پنل ادمین تحت وب برات بسازه، باید یه درخواست دقیق و واضح بنویسی. من یه نمونه درخواست آماده می‌کنم که می‌تونی مستقیماً به هوش مصنوعی بدی. این پنل روی سرورت اجرا می‌شه و از طریق یه لینک (مثلاً `http://your-server-ip:3000`) می‌تونی بهش دسترسی پیدا کنی.

---

### 2. درخواست برای هوش مصنوعی
این درخواست رو می‌تونی مستقیماً به هوش مصنوعی (مثلاً Replit) بدی:

---

**درخواست ساخت پنل ادمین تحت وب برای ربات دیسکورد:**

سلام! من یه ربات دیسکورد دارم به اسم Ccoin که روی یه سرور اجرا می‌شه. می‌خوام یه پنل ادمین تحت وب بسازی که روی سرورم اجرا بشه و بتونم از طریق یه لینک (مثلاً `http://my-server-ip:3000`) بهش دسترسی پیدا کنم. این پنل باید به دیتابیس رباتم (MongoDB) متصل بشه و بتونم همه جنبه‌های ربات رو مدیریت کنم (مثلاً اطلاعات کاربرا، کلن‌ها، ماموریت‌ها، و غیره). لطفاً یه پنل ساده با Express.js برای بک‌اند و EJS برای رابط کاربری بساز، و یه سیستم احراز هویت ساده (مثلاً با رمز عبور) بهش اضافه کن تا فقط من بتونم به پنل دسترسی داشته باشم.

#### جزئیات پروژه:
1. **ساختار دیتابیس (MongoDB)**:
   - **جدول کاربران (Users)**:
     - `user_id`: شناسه کاربر (کلید اصلی، رشته)
     - `wallet`: موجودی Ccoin (عدد، پیش‌فرض 0)
     - `crystals`: کریستال (عدد، پیش‌فرض 0)
     - `level`: لِوِل کاربر (عدد، پیش‌فرض 1)
   - **جدول کلن‌ها (Clans)**:
     - `clan_id`: شناسه کلن (کلید اصلی، رشته)
     - `name`: نام کلن (رشته)
     - `members`: لیست اعضا (آرایه‌ای از رشته‌ها)
   - **جدول ماموریت‌ها (Quests)**:
     - `quest_id`: شناسه ماموریت (کلید اصلی، رشته)
     - `user_id`: شناسه کاربر (رشته)
     - `type`: نوع ماموریت (رشته، مثلاً "daily" یا "weekly")
     - `progress`: پیشرفت ماموریت (عدد)
     - `completed`: آیا ماموریت کامل شده؟ (بولین)

2. **قابلیت‌های پنل ادمین**:
   - **صفحه ورود (Login)**:
     - یه صفحه ورود ساده با یه رمز عبور ثابت (مثلاً "admin123") بساز.
     - فقط اگه رمز درست باشه، به پنل دسترسی پیدا کنم.
   - **مدیریت کاربران**:
     - یه جدول نشون بده که همه کاربرا رو لیست کنه (شناسه، موجودی Ccoin، کریستال، لِوِل).
     - بتونم موجودی، کریستال، و لِوِل هر کاربر رو تغییر بدم.
     - بتونم کاربر رو حذف کنم.
   - **مدیریت کلن‌ها**:
     - یه جدول نشون بده که همه کلن‌ها رو لیست کنه (شناسه، نام، اعضا).
     - بتونم نام کلن رو تغییر بدم.
     - بتونم کلن رو حذف کنم.
   - **مدیریت ماموریت‌ها**:
     - یه جدول نشون بده که همه ماموریت‌ها رو لیست کنه (شناسه، کاربر، نوع، پیشرفت، وضعیت).
     - بتونم پیشرفت ماموریت رو تغییر بدم یا ماموریت رو کامل کنم.
     - بتونم ماموریت رو حذف کنم.
   - **آمار کلی**:
     - یه صفحه داشبورد بساز که آمار کلی نشون بده (مثلاً تعداد کاربرا، مجموع Ccoin توی سرور، تعداد کلن‌ها).

3. **امنیت**:
   - یه سیستم احراز هویت ساده با رمز عبور ثابت (مثلاً "admin123") بذار.
   - فقط من بتونم به پنل دسترسی پیدا کنم.
   - از متغیرهای محیطی (فایل `.env`) برای ذخیره اطلاعات حساس (مثلاً آدرس دیتابیس و رمز عبور) استفاده کن.

4. **رابط کاربری**:
   - از EJS برای رابط کاربری استفاده کن.
   - یه استایل ساده و تیره (با پس‌زمینه مشکی و متن سفید) بذار.
   - یه منوی ناوبری (Navigation) بذار که بتونم بین صفحات (کاربران، کلن‌ها، ماموریت‌ها، داشبورد) جابه‌جا شم.

5. **دستورالعمل اجرا**:
   - یه فایل `README.md` بساز و توضیح بده که چطور پنل رو روی سرورم اجرا کنم.
   - سرور باید روی پورت 3000 اجرا بشه (مثلاً `http://my-server-ip:3000`).

6. **ساختار پروژه**:
   - یه پروژه کامل با این ساختار بساز:
     ```
     admin-panel/
     ├── node_modules/
     ├── public/
     │   └── styles.css
     ├── views/
     │   ├── login.ejs
     │   ├── dashboard.ejs
     │   ├── users.ejs
     │   ├── clans.ejs
     │   └── quests.ejs
     ├── .env
     ├── package.json
     ├── server.js
     └── README.md
     ```

لطفاً کد کامل رو بنویس و یه پروژه آماده تحویل بده که بتونم روی سرورم اجرا کنم.

---

### 3. توضیحات اضافی برای شما
- **چطور این پنل رو روی سرورت اجرا کنی**:
  1. وقتی هوش مصنوعی پروژه رو تحویل داد، فایل‌ها رو روی سرورت کپی کن (مثلاً با SCP یا FTP).
  2. روی سرورت، Node.js و MongoDB رو نصب کن (اگه هنوز نصب نکردی).
  3. دیتابیس رباتت رو به سرور منتقل کن (مثلاً با `mongodump` و `mongorestore`).
  4. توی پوشه پروژه، فایل `.env` رو بساز و اطلاعات لازم (مثلاً آدرس دیتابیس و رمز عبور پنل) رو توش بنویس:
     ```
     MONGODB_URI=mongodb://localhost:27017/ccoin
     ADMIN_PASSWORD=admin123
     ```
  5. پکیج‌های لازم رو نصب کن:
     ```bash
     npm install
     ```
  6. سرور رو اجرا کن:
     ```bash
     node server.js
     ```
  7. توی مرورگرت، به آدرس سرورت برو (مثلاً `http://your-server-ip:3000`) و با رمز عبور وارد پنل شو.

- **امنیت**:
  - چون این پنل روی سرورت اجرا می‌شه، حتماً یه فایروال (مثلاً UFW) روی سرورت تنظیم کن تا فقط از IP خودت بتونی به پورت 3000 دسترسی داشته باشی.
  - اگه بخوای بعداً امنیت رو بیشتر کنی، می‌تونی از HTTPS استفاده کنی (با گواهی SSL) یا یه سیستم احراز هویت پیشرفته‌تر (مثلاً با JWT) اضافه کنی.

- **دسترسی به پنل**:
  - بعد از اجرا، می‌تونی از هر دستگاهی که به شبکه سرورت دسترسی داره (مثلاً از مرورگر روی گوشیت یا لپ‌تاپت) به پنل دسترسی پیدا کنی. فقط باید IP سرورت و پورت (مثلاً `http://your-server-ip:3000`) رو وارد کنی.

---

### 4. نتیجه‌گیری
با این درخواست، هوش مصنوعی (مثل Replit) می‌تونه یه پنل ادمین تحت وب کامل برات بسازه که روی سرورت اجرا بشه. این پنل بهت اجازه می‌ده از طریق یه لینک بهش دسترسی پیدا کنی و همه جنبه‌های رباتت رو مدیریت کنی. اگه سوال دیگه‌ای داری یا نیاز به توضیح بیشتری داری، بگو تا کمکت کنم! 😊🚀