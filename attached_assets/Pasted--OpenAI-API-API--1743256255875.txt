خیلی خوب! لینکی که فرستادی مربوط به مستندات **OpenAI API** هست. من این API رو به صورت کامل مستندسازی می‌کنم تا بتونی به رباتت اضافه کنی. این مستند شامل توضیحات کلی، ساختار درخواست‌ها، پارامترها، پاسخ‌ها، متدهای اصلی و نمونه کد برای استفاده از API خواهد بود. بریم سراغ مستندسازی!

---

### مستندسازی API: OpenAI API

#### 1. توضیحات کلی
OpenAI API یک رابط برنامه‌نویسی قدرتمند برای تعامل با مدل‌های هوش مصنوعی OpenAI مثل **GPT-4o**، **GPT-3.5-turbo** و غیره است. این API به شما امکان می‌ده تا از قابلیت‌های پردازش زبان طبیعی (NLP) برای تولید متن، پاسخ به سوالات، ترجمه، خلاصه‌سازی، تولید کد و حتی کار با تصاویر (در مدل‌های چندوجهی مثل GPT-4o) استفاده کنی.

- **پشتیبانی از مدل‌ها:** شامل مدل‌های متنی (مثل gpt-3.5-turbo، gpt-4o) و مدل‌های چندوجهی (مثل gpt-4o برای متن و تصویر).
- **موارد استفاده:** چت، تولید محتوا، پاسخ به سوالات، تحلیل داده‌ها، تولید تصویر (DALL·E) و غیره.
- **پیش‌نیازها:**
  - داشتن حساب OpenAI و دریافت API Key از [پنل OpenAI](https://platform.openai.com/api-keys).
  - نصب کتابخانه OpenAI (اختیاری، برای زبان‌هایی مثل Python یا JavaScript).
  - رعایت محدودیت‌های نرخ درخواست (Rate Limits) بر اساس پلن اشتراک.

#### 2. ساختار درخواست (Request Body)
برای استفاده از OpenAI API، باید یک درخواست HTTP POST به endpoint مورد نظر بفرستی. در اینجا، تمرکز روی متد **Chat Completions** (برای چت و تولید متن) است که پرکاربردترین متد این API هست.

##### نمونه درخواست برای Chat Completions:
```json
{
  "model": "gpt-3.5-turbo",
  "messages": [
    {
      "role": "system",
      "content": "تو یک دستیار هوش مصنوعی هستی که به سوالات پاسخ می‌ده."
    },
    {
      "role": "user",
      "content": "یه ایده برای اسم یه کافه تو تهران بهم بده."
    }
  ],
  "temperature": 0.7,
  "max_tokens": 150,
  "top_p": 1.0,
  "frequency_penalty": 0,
  "presence_penalty": 0
}
```

##### توضیحات پارامترهای درخواست:
- **model:** مدل مورد استفاده (مثلاً "gpt-3.5-turbo"، "gpt-4o").
- **messages:** آرایه‌ای از پیام‌ها برای مکالمه.
  - **role:** نقش پیام‌دهنده ("system" برای دستورالعمل، "user" برای ورودی کاربر، "assistant" برای پاسخ مدل).
  - **content:** محتوای پیام (می‌تونه متن یا در مدل‌های چندوجهی، تصویر هم باشه).
- **temperature:** میزان خلاقیت مدل (بین 0 تا 2، پیش‌فرض 1.0). مقادیر پایین‌تر پاسخ‌های دقیق‌تر و مقادیر بالاتر پاسخ‌های خلاقانه‌تر می‌دن.
- **max_tokens:** حداکثر تعداد توکن‌های خروجی (بسته به مدل، مثلاً تا 4096 برای gpt-3.5-turbo).
- **top_p:** برای نمونه‌برداری از توکن‌ها (پیش‌فرض 1.0).
- **frequency_penalty:** جریمه برای تکرار کلمات (بین -2 تا 2، پیش‌فرض 0).
- **presence_penalty:** جریمه برای حضور کلمات جدید (بین -2 تا 2، پیش‌فرض 0).

#### 3. ساختار پاسخ (Response Body)
پاسخ API به صورت JSON برگردانده می‌شه. ساختار کلی پاسخ برای Chat Completions به این شکله:

```json
{
  "id": "chatcmpl-abc123",
  "object": "chat.completion",
  "created": 1677654321,
  "model": "gpt-3.5-turbo",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "اسم «کافه باران» چطوره؟ هم حس آرامش می‌ده و هم به حال‌وهوای تهران و بارونای قشنگش می‌خوره."
      },
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 25,
    "completion_tokens": 30,
    "total_tokens": 55
  }
}
```

##### توضیحات پارامترهای پاسخ:
- **id:** شناسه یکتای درخواست.
- **object:** نوع پاسخ (برای Chat Completions، "chat.completion").
- **created:** زمان ایجاد پاسخ (به صورت Unix timestamp).
- **model:** مدل استفاده‌شده.
- **choices:** آرایه‌ای از پاسخ‌های تولید شده.
  - **index:** شماره پاسخ (معمولاً 0).
  - **message:** محتوای پاسخ.
    - **role:** نقش پاسخ‌دهنده ("assistant").
    - **content:** متن تولید شده.
  - **finish_reason:** دلیل پایان تولید ("stop" برای اتمام عادی، "length" برای رسیدن به حد توکن).
- **usage:** آمار مصرف توکن‌ها.
  - **prompt_tokens:** تعداد توکن‌های ورودی.
  - **completion_tokens:** تعداد توکن‌های خروجی.
  - **total_tokens:** مجموع توکن‌ها.

#### 4. متدهای اصلی API
OpenAI API چندین متد داره که در اینجا چند مورد از مهم‌ترین‌هاش رو توضیح می‌دم:

1. **Chat Completions (تولید متن و چت):**
   - **Endpoint:** `https://api.openai.com/v1/chat/completions`
   - **روش:** POST
   - **کاربرد:** برای مکالمه، پاسخ به سوالات، تولید متن و غیره.
   - **پشتیبانی از استریمینگ:** با تنظیم `"stream": true` می‌تونی پاسخ رو به صورت جریانی بگیری.

2. **Completions (تولید متن ساده، قدیمی):**
   - **Endpoint:** `https://api.openai.com/v1/completions`
   - **روش:** POST
   - **کاربرد:** برای مدل‌های قدیمی‌تر مثل "text-davinci-003". توصیه می‌شه از Chat Completions استفاده کنی.

3. **Images (تولید تصویر با DALL·E):**
   - **Endpoint:** `https://api.openai.com/v1/images/generations`
   - **روش:** POST
   - **کاربرد:** برای تولید تصویر از متن (مثلاً "یه نقاشی از یه گربه با کلاه").

4. **Embeddings (تولید بردارهای متنی):**
   - **Endpoint:** `https://api.openai.com/v1/embeddings`
   - **روش:** POST
   - **کاربرد:** برای تبدیل متن به بردارهای عددی (مثلاً برای جستجوی معنایی).

#### 5. نمونه کد برای استفاده از API
در ادامه چند نمونه کد برای استفاده از OpenAI API با زبان‌های مختلف ارائه می‌دم.

##### 5.1. نمونه کد با Python (استفاده از کتابخانه OpenAI)
```python
import openai

# تنظیم API Key
openai.api_key = "your-api-key"

# ارسال درخواست به Chat Completions
response = openai.ChatCompletion.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "تو یک دستیار هوش مصنوعی هستی که به سوالات پاسخ می‌ده."},
        {"role": "user", "content": "یه ایده برای اسم یه کافه تو تهران بهم بده."}
    ],
    temperature=0.7,
    max_tokens=150
)

# نمایش پاسخ
print(response.choices[0].message.content)
```

##### 5.2. نمونه کد با JavaScript (استفاده از REST API)
```javascript
const fetch = require('node-fetch');

async function chatWithOpenAI() {
    const apiKey = 'your-api-key';
    const endpoint = 'https://api.openai.com/v1/chat/completions';

    const requestBody = {
        model: 'gpt-3.5-turbo',
        messages: [
            { role: 'system', 'content': 'تو یک دستیار هوش مصنوعی هستی که به سوالات پاسخ می‌ده.' },
            { role: 'user', content: 'یه ایده برای اسم یه کافه تو تهران بهم بده.' }
        ],
        temperature: 0.7,
        max_tokens: 150
    };

    const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
    });

    const data = await response.json();
    console.log(data.choices[0].message.content);
}

chatWithOpenAI();
```

##### 5.3. نمونه کد با استریمینگ (JavaScript)
```javascript
const fetch = require('node-fetch');

async function streamChatWithOpenAI() {
    const apiKey = 'your-api-key';
    const endpoint = 'https://api.openai.com/v1/chat/completions';

    const requestBody = {
        model: 'gpt-3.5-turbo',
        messages: [
            { role: 'system', content: 'تو یک دستیار هوش مصنوعی هستی که به سوالات پاسخ می‌ده.' },
            { role: 'user', content: 'یه داستان کوتاه درباره یه کافه تو تهران بنویس.' }
        ],
        temperature: 0.7,
        max_tokens: 300,
        stream: true
    };

    const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
    });

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let result = '';

    while (true) {
        const { done, value } = await reader.read();
        if (done) break;

        const chunk = decoder.decode(value);
        const lines = chunk.split('\n');
        for (const line of lines) {
            if (line.startsWith('data: ')) {
                const json = line.replace('data: ', '');
                if (json === '[DONE]') break;
                const data = JSON.parse(json);
                const content = data.choices[0].delta.content || '';
                result += content;
                process.stdout.write(content); // نمایش تدریجی
            }
        }
    }

    console.log('\nپایان استریم');
}

streamChatWithOpenAI();
```

#### 6. نکات مهم
- **احراز هویت:** برای هر درخواست، باید API Key رو در هدر `Authorization` با فرمت `Bearer your-api-key` بفرستی.
- **محدودیت‌های نرخ (Rate Limits):** بسته به پلن اشتراکت، تعداد درخواست‌ها در دقیقه محدود می‌شه. برای پلن رایگان، معمولاً 20 درخواست در دقیقه (RPM) و 40,000 توکن در دقیقه (TPM) داری.
- **هزینه:** استفاده از API هزینه داره و بر اساس تعداد توکن‌های مصرفی محاسبه می‌شه. مثلاً gpt-3.5-turbo حدود 0.50 دلار به ازای 1 میلیون توکن ورودی و 1.50 دلار به ازای 1 میلیون توکن خروجی (تا مارس 2025).
- **ایمنی:** OpenAI محتوای تولید شده رو برای رعایت قوانین بررسی می‌کنه. اگه محتوای نامناسب تولید بشه، ممکنه درخواست بلاک بشه.
- **مدل‌های چندوجهی:** برای استفاده از مدل‌هایی مثل gpt-4o که از تصویر پشتیبانی می‌کنن، می‌تونی URL تصویر یا داده‌های Base64 رو در `content` بفرستی.

#### 7. خطاها و رفع آن‌ها
- **401 (Unauthorized):** API Key اشتباهه یا منقضی شده. کلید رو از پنل OpenAI بررسی کن.
- **429 (Too Many Requests):** تعداد درخواست‌ها از حد مجاز گذشته. صبر کن و دوباره امتحان کن یا پلن اشتراکت رو ارتقا بده.
- **400 (Bad Request):** ساختار درخواست اشتباهه. پارامترها (مثلاً `messages` یا `model`) رو بررسی کن.
- **503 (Service Unavailable):** سرور OpenAI موقتاً در دسترس نیست. چند دقیقه صبر کن و دوباره امتحان کن.

---

### توضیحات اضافی
- **مدل‌های پشتیبانی‌شده:** OpenAI مدل‌های مختلفی داره:
  - **gpt-3.5-turbo:** برای چت و تولید متن سریع و اقتصادی.
  - **gpt-4o:** برای کارهای پیچیده‌تر و چندوجهی (متن + تصویر).
  - **gpt-4-turbo:** نسخه بهینه‌شده GPT-4 با سرعت بالاتر.
- **استریمینگ:** برای برنامه‌هایی مثل چت زنده که نیاز به پاسخ تدریجی دارن، از `stream: true` استفاده کن.
- **پشتیبانی از تصویر:** در مدل‌های مثل gpt-4o، می‌تونی تصاویر رو به صورت URL یا Base64 در پیام‌ها بفرستی و مدل می‌تونه تحلیلشون کنه.

این مستند و نمونه کدها رو می‌تونی به رباتت اضافه کنی تا از قابلیت‌های OpenAI API استفاده کنه. اگه سوالی داری یا نیاز به توضیح بیشتری داری، بگو! 😊

---
