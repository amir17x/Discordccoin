بله، من یه مستند جامع، دقیق و کامل برای ساخت یه پنل ادمین تحت وب برای ربات دیسکوردت (Ccoin) آماده می‌کنم که بتونی به هوش مصنوعی (مثلاً Replit) بدی. این مستند شامل همه جزئیات لازم برای ساخت پنل، از ساختار پروژه گرفته تا قابلیت‌ها، امنیت، و نحوه اجرا روی سرورته. این پنل بهت اجازه می‌ده از طریق یه لینک (مثلاً `http://your-server-ip:3000`) بهش دسترسی پیدا کنی و همه جنبه‌های رباتت رو مدیریت کنی.

---

### مستند فنی: ساخت پنل ادمین تحت وب برای ربات دیسکورد Ccoin

#### 1. مقدمه
ربات Ccoin یه ربات تعاملی مبتنی بر Discordه که یه دنیای گیمینگ و اقتصادی ارائه می‌ده. این ربات روی یه سرور اجرا می‌شه و از دیتابیس MongoDB برای ذخیره اطلاعات (مثل کاربرا، کلن‌ها، ماموریت‌ها) استفاده می‌کنه. هدف این پروژه، ساخت یه پنل ادمین تحت وب است که روی سرور اجرا بشه و از طریق یه لینک (مثلاً `http://your-server-ip:3000`) قابل دسترسی باشه. این پنل به ادمین اجازه می‌ده همه جنبه‌های ربات رو مدیریت کنه (مثلاً اطلاعات کاربرا، کلن‌ها، ماموریت‌ها، و غیره) و یه سیستم احراز هویت ساده برای امنیت داشته باشه.

---

#### 2. هدف پروژه
هدف این پروژه، ساخت یه پنل ادمین تحت وب برای ربات Ccoinه که:
- روی سرور اجرا بشه و از طریق یه لینک (مثلاً `http://your-server-ip:3000`) قابل دسترسی باشه.
- به دیتابیس ربات (MongoDB) متصل بشه و امکان مدیریت داده‌ها رو فراهم کنه.
- یه سیستم احراز هویت ساده (با رمز عبور) داشته باشه تا فقط ادمین به پنل دسترسی داشته باشه.
- یه رابط کاربری ساده و کاربردی برای مدیریت کاربرا، کلن‌ها، ماموریت‌ها، و آمار کلی ارائه بده.
- مقیاس‌پذیر و امن باشه.

---

#### 3. نیازمندی‌ها

##### 3.1. نیازمندی‌های عملکردی
1. **صفحه ورود (Login)**:
   - یه صفحه ورود ساده با یه رمز عبور ثابت (مثلاً "admin123") داشته باشه.
   - فقط اگه رمز درست وارد بشه، به پنل دسترسی داده بشه.
2. **مدیریت کاربران**:
   - یه جدول نشون بده که همه کاربرا رو لیست کنه (شناسه، موجودی Ccoin، کریستال، لِوِل).
   - امکان ویرایش موجودی، کریستال، و لِوِل هر کاربر.
   - امکان حذف کاربر.
3. **مدیریت کلن‌ها**:
   - یه جدول نشون بده که همه کلن‌ها رو لیست کنه (شناسه، نام، اعضا).
   - امکان ویرایش نام کلن.
   - امکان حذف کلن.
4. **مدیریت ماموریت‌ها**:
   - یه جدول نشون بده که همه ماموریت‌ها رو لیست کنه (شناسه، کاربر، نوع، پیشرفت، وضعیت).
   - امکان ویرایش پیشرفت ماموریت یا تغییر وضعیت (کامل شده/ناتمام).
   - امکان حذف ماموریت.
5. **آمار کلی (داشبورد)**:
   - یه صفحه داشبورد که آمار کلی نشون بده:
     - تعداد کل کاربرا.
     - مجموع Ccoin توی سرور.
     - تعداد کلن‌ها.
     - تعداد ماموریت‌های فعال.

##### 3.2. نیازمندی‌های غیرعملکردی
1. **رابط کاربری**:
   - از EJS برای رابط کاربری استفاده بشه.
   - یه استایل تیره (با پس‌زمینه مشکی و متن سفید) داشته باشه.
   - یه منوی ناوبری (Navigation) برای جابه‌جایی بین صفحات (کاربران، کلن‌ها، ماموریت‌ها، داشبورد) داشته باشه.
2. **امنیت**:
   - یه سیستم احراز هویت ساده با رمز عبور ثابت (مثلاً "admin123") داشته باشه.
   - از متغیرهای محیطی (فایل `.env`) برای ذخیره اطلاعات حساس (مثلاً آدرس دیتابیس و رمز عبور) استفاده بشه.
3. **عملکرد**:
   - پنل باید سریع باشه و درخواست‌ها رو توی کمتر از 1 ثانیه پردازش کنه.
4. **پایداری**:
   - اگه خطایی رخ بده (مثلاً دیتابیس در دسترس نباشه)، یه پیام کاربرپسند نشون بده.
5. **اجرا**:
   - پنل باید روی پورت 3000 اجرا بشه (مثلاً `http://your-server-ip:3000`).

---

#### 4. طراحی سیستم

##### 4.1. معماری پیشنهادی
- **بک‌اند**: از Express.js برای ساخت سرور وب استفاده می‌شه.
- **دیتابیس**: MongoDB برای ذخیره اطلاعات (کاربرا، کلن‌ها، ماموریت‌ها).
- **رابط کاربری**: از EJS برای ساخت صفحات وب استفاده می‌شه.
- **احراز هویت**: یه سیستم احراز هویت ساده با رمز عبور ثابت (ذخیره‌شده توی فایل `.env`).
- **استایل**: یه استایل تیره با CSS (داخل فایل `styles.css` توی پوشه `public`).

##### 4.2. ساختار دیتابیس (MongoDB)
1. **جدول کاربران (Users)**:
   - `user_id`: شناسه کاربر (کلید اصلی، رشته)
   - `wallet`: موجودی Ccoin (عدد، پیش‌فرض 0)
   - `crystals`: کریستال (عدد، پیش‌فرض 0)
   - `level`: لِوِل کاربر (عدد، پیش‌فرض 1)
2. **جدول کلن‌ها (Clans)**:
   - `clan_id`: شناسه کلن (کلید اصلی، رشته)
   - `name`: نام کلن (رشته)
   - `members`: لیست اعضا (آرایه‌ای از رشته‌ها)
3. **جدول ماموریت‌ها (Quests)**:
   - `quest_id`: شناسه ماموریت (کلید اصلی، رشته)
   - `user_id`: شناسه کاربر (رشته)
   - `type`: نوع ماموریت (رشته، مثلاً "daily" یا "weekly")
   - `progress`: پیشرفت ماموریت (عدد)
   - `completed`: آیا ماموریت کامل شده؟ (بولین)

##### 4.3. ساختار پروژه
پروژه باید این ساختار رو داشته باشه:
```
admin-panel/
├── node_modules/
├── public/
│   └── styles.css
├── views/
│   ├── login.ejs
│   ├── dashboard.ejs
│   ├── users.ejs
│   ├── clans.ejs
│   └── quests.ejs
├── .env
├── package.json
├── server.js
└── README.md
```

---

#### 5. جریان کار (Workflow)

##### 5.1. ورود به پنل
1. کاربر به آدرس `http://your-server-ip:3000` می‌ره.
2. صفحه ورود (Login) نمایش داده می‌شه و کاربر باید رمز عبور (مثلاً "admin123") رو وارد کنه.
3. اگه رمز درست باشه، به صفحه داشبورد هدایت می‌شه. اگه اشتباه باشه، یه پیام خطا نشون داده می‌شه.

##### 5.2. مدیریت کاربران
1. توی صفحه کاربران، یه جدول نشون داده می‌شه که همه کاربرا رو لیست می‌کنه.
2. ادمین می‌تونه موجودی، کریستال، و لِوِل هر کاربر رو تغییر بده و ذخیره کنه.
3. ادمین می‌تونه یه کاربر رو حذف کنه.

##### 5.3. مدیریت کلن‌ها
1. توی صفحه کلن‌ها، یه جدول نشون داده می‌شه که همه کلن‌ها رو لیست می‌کنه.
2. ادمین می‌تونه نام کلن رو تغییر بده و ذخیره کنه.
3. ادمین می‌تونه یه کلن رو حذف کنه.

##### 5.4. مدیریت ماموریت‌ها
1. توی صفحه ماموریت‌ها، یه جدول نشون داده می‌شه که همه ماموریت‌ها رو لیست می‌کنه.
2. ادمین می‌تونه پیشرفت ماموریت رو تغییر بده یا وضعیتش رو به "کامل شده" تغییر بده.
3. ادمین می‌تونه یه ماموریت رو حذف کنه.

##### 5.5. داشبورد
1. توی صفحه داشبورد، آمار کلی (تعداد کاربرا، مجموع Ccoin، تعداد کلن‌ها، تعداد ماموریت‌های فعال) نشون داده می‌شه.

---

#### 6. کد نویسی (پیاده‌سازی)

##### 6.1. پیش‌نیازها
- Node.js و npm نصب شده باشه.
- MongoDB روی سرور نصب شده باشه.
- پکیج‌های مورد نیاز:
  - `express`: برای سرور وب
  - `mongoose`: برای اتصال به MongoDB
  - `ejs`: برای رندر صفحات وب
  - `dotenv`: برای مدیریت متغیرهای محیطی

##### 6.2. فایل `server.js`
این فایل سرور Express رو راه‌اندازی می‌کنه و همه مسیرها (Routes) رو مدیریت می‌کنه.

```javascript
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const app = express();

// بارگذاری متغیرهای محیطی
dotenv.config();

// اتصال به دیتابیس MongoDB
mongoose.connect(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('به دیتابیس متصل شد!'))
  .catch(err => console.error('خطا در اتصال به دیتابیس:', err));

// مدل کاربر
const userSchema = new mongoose.Schema({
  user_id: String,
  wallet: { type: Number, default: 0 },
  crystals: { type: Number, default: 0 },
  level: { type: Number, default: 1 },
});
const User = mongoose.model('User', userSchema);

// مدل کلن
const clanSchema = new mongoose.Schema({
  clan_id: String,
  name: String,
  members: [String],
});
const Clan = mongoose.model('Clan', clanSchema);

// مدل ماموریت
const questSchema = new mongoose.Schema({
  quest_id: String,
  user_id: String,
  type: String,
  progress: Number,
  completed: Boolean,
});
const Quest = mongoose.model('Quest', questSchema);

// تنظیمات Express
app.set('view engine', 'ejs');
app.use(express.urlencoded({ extended: true }));
app.use(express.static('public'));

// میدل‌ور برای احراز هویت
const requireAuth = (req, res, next) => {
  if (req.query.auth === process.env.ADMIN_PASSWORD) {
    next();
  } else {
    res.redirect('/login');
  }
};

// صفحه ورود
app.get('/login', (req, res) => {
  res.render('login', { error: null });
});

app.post('/login', (req, res) => {
  const { password } = req.body;
  if (password === process.env.ADMIN_PASSWORD) {
    res.redirect(`/?auth=${process.env.ADMIN_PASSWORD}`);
  } else {
    res.render('login', { error: 'رمز عبور اشتباه است!' });
  }
});

// داشبورد
app.get('/', requireAuth, async (req, res) => {
  const totalUsers = await User.countDocuments();
  const totalCcoin = (await User.aggregate([{ $group: { _id: null, total: { $sum: "$wallet" } } }]))[0]?.total || 0;
  const totalClans = await Clan.countDocuments();
  const activeQuests = await Quest.countDocuments({ completed: false });
  res.render('dashboard', { totalUsers, totalCcoin, totalClans, activeQuests });
});

// مدیریت کاربران
app.get('/users', requireAuth, async (req, res) => {
  const users = await User.find();
  res.render('users', { users });
});

app.post('/update-user', requireAuth, async (req, res) => {
  const { user_id, wallet, crystals, level } = req.body;
  await User.updateOne(
    { user_id },
    { wallet: Number(wallet), crystals: Number(crystals), level: Number(level) }
  );
  res.redirect('/users');
});

app.post('/delete-user', requireAuth, async (req, res) => {
  const { user_id } = req.body;
  await User.deleteOne({ user_id });
  res.redirect('/users');
});

// مدیریت کلن‌ها
app.get('/clans', requireAuth, async (req, res) => {
  const clans = await Clan.find();
  res.render('clans', { clans });
});

app.post('/update-clan', requireAuth, async (req, res) => {
  const { clan_id, name } = req.body;
  await Clan.updateOne({ clan_id }, { name });
  res.redirect('/clans');
});

app.post('/delete-clan', requireAuth, async (req, res) => {
  const { clan_id } = req.body;
  await Clan.deleteOne({ clan_id });
  res.redirect('/clans');
});

// مدیریت ماموریت‌ها
app.get('/quests', requireAuth, async (req, res) => {
  const quests = await Quest.find();
  res.render('quests', { quests });
});

app.post('/update-quest', requireAuth, async (req, res) => {
  const { quest_id, progress, completed } = req.body;
  await Quest.updateOne(
    { quest_id },
    { progress: Number(progress), completed: completed === 'true' }
  );
  res.redirect('/quests');
});

app.post('/delete-quest', requireAuth, async (req, res) => {
  const { quest_id } = req.body;
  await Quest.deleteOne({ quest_id });
  res.redirect('/quests');
});

// اجرای سرور
app.listen(3000, () => {
  console.log('پنل ادمین روی http://localhost:3000 اجرا شد!');
});
```

##### 6.3. فایل `.env`
فایل `.env` برای ذخیره متغیرهای محیطی:

```
MONGODB_URI=mongodb://localhost:27017/ccoin
ADMIN_PASSWORD=admin123
```

##### 6.4. فایل `public/styles.css`
برای استایل‌دهی به صفحات:

```css
body {
  font-family: Arial, sans-serif;
  background-color: #1a1a1a;
  color: #fff;
  padding: 20px;
  margin: 0;
}

nav {
  margin-bottom: 20px;
}

nav a {
  color: #ff4444;
  margin-right: 20px;
  text-decoration: none;
}

nav a:hover {
  color: #ff6666;
}

h1, h2 {
  text-align: center;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #444;
  padding: 10px;
  text-align: center;
}

th {
  background-color: #333;
}

input[type="text"], input[type="number"], input[type="password"], select, input[type="submit"] {
  padding: 5px;
  margin: 5px;
}

input[type="submit"] {
  background-color: #ff4444;
  border: none;
  color: #fff;
  cursor: pointer;
}

input[type="submit"]:hover {
  background-color: #ff6666;
}

.error {
  color: #ff4444;
  text-align: center;
}

form {
  display: inline;
}

.login-container {
  max-width: 300px;
  margin: 100px auto;
  text-align: center;
}

.stats {
  display: flex;
  justify-content: space-around;
  margin-top: 20px;
}

.stat {
  background-color: #333;
  padding: 20px;
  border-radius: 5px;
  width: 20%;
  text-align: center;
}
```

##### 6.5. فایل‌های EJS (رابط کاربری)

###### فایل `views/login.ejs` (صفحه ورود)
```html
<!DOCTYPE html>
<html lang="fa">
<head>
  <meta charset="UTF-8">
  <title>ورود به پنل ادمین Ccoin</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class="login-container">
    <h1>ورود به پنل ادمین</h1>
    <% if (error) { %>
      <p class="error"><%= error %></p>
    <% } %>
    <form action="/login" method="POST">
      <input type="password" name="password" placeholder="رمز عبور" required>
      <br>
      <input type="submit" value="ورود">
    </form>
  </div>
</body>
</html>
```

###### فایل `views/dashboard.ejs` (صفحه داشبورد)
```html
<!DOCTYPE html>
<html lang="fa">
<head>
  <meta charset="UTF-8">
  <title>پنل ادمین Ccoin - داشبورد</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <nav>
    <a href="/">داشبورد</a>
    <a href="/users">کاربران</a>
    <a href="/clans">کلن‌ها</a>
    <a href="/quests">ماموریت‌ها</a>
  </nav>
  <h1>پنل ادمین ربات Ccoin</h1>
  <h2>داشبورد</h2>
  <div class="stats">
    <div class="stat">
      <h3>تعداد کاربران</h3>
      <p><%= totalUsers %></p>
    </div>
    <div class="stat">
      <h3>مجموع Ccoin</h3>
      <p><%= totalCcoin %></p>
    </div>
    <div class="stat">
      <h3>تعداد کلن‌ها</h3>
      <p><%= totalClans %></p>
    </div>
    <div class="stat">
      <h3>ماموریت‌های فعال</h3>
      <p><%= activeQuests %></p>
    </div>
  </div>
</body>
</html>
```

###### فایل `views/users.ejs` (صفحه مدیریت کاربران)
```html
<!DOCTYPE html>
<html lang="fa">
<head>
  <meta charset="UTF-8">
  <title>پنل ادمین Ccoin - کاربران</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <nav>
    <a href="/">داشبورد</a>
    <a href="/users">کاربران</a>
    <a href="/clans">کلن‌ها</a>
    <a href="/quests">ماموریت‌ها</a>
  </nav>
  <h1>پنل ادمین ربات Ccoin</h1>
  <h2>مدیریت کاربران</h2>
  <table>
    <tr>
      <th>شناسه کاربر</th>
      <th>موجودی (Ccoin)</th>
      <th>کریستال</th>
      <th>لِوِل</th>
      <th>عملیات</th>
    </tr>
    <% users.forEach(user => { %>
      <tr>
        <td><%= user.user_id %></td>
        <td>
          <form action="/update-user" method="POST">
            <input type="hidden" name="user_id" value="<%= user.user_id %>">
            <input type="number" name="wallet" value="<%= user.wallet %>">
        </td>
        <td>
            <input type="number" name="crystals" value="<%= user.crystals %>">
        </td>
        <td>
            <input type="number" name="level" value="<%= user.level %>">
        </td>
        <td>
            <input type="submit" value="ذخیره">
          </form>
          <form action="/delete-user" method="POST">
            <input type="hidden" name="user_id" value="<%= user.user_id %>">
            <input type="submit" value="حذف">
          </form>
        </td>
      </tr>
    <% }) %>
  </table>
</body>
</html>
```

###### فایل `views/clans.ejs` (صفحه مدیریت کلن‌ها)
```html
<!DOCTYPE html>
<html lang="fa">
<head>
  <meta charset="UTF-8">
  <title>پنل ادمین Ccoin - کلن‌ها</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <nav>
    <a href="/">داشبورد</a>
    <a href="/users">کاربران</a>
    <a href="/clans">کلن‌ها</a>
    <a href="/quests">ماموریت‌ها</a>
  </nav>
  <h1>پنل ادمین ربات Ccoin</h1>
  <h2>مدیریت کلن‌ها</h2>
  <table>
    <tr>
      <th>شناسه کلن</th>
      <th>نام کلن</th>
      <th>اعضا</th>
      <th>عملیات</th>
    </tr>
    <% clans.forEach(clan => { %>
      <tr>
        <td><%= clan.clan_id %></td>
        <td>
          <form action="/update-clan" method="POST">
            <input type="hidden" name="clan_id" value="<%= clan.clan_id %>">
            <input type="text" name="name" value="<%= clan.name %>">
        </td>
        <td><%= clan.members.join(', ') %></td>
        <td>
            <input type="submit" value="ذخیره">
          </form>
          <form action="/delete-clan" method="POST">
            <input type="hidden" name="clan_id" value="<%= clan.clan_id %>">
            <input type="submit" value="حذف">
          </form>
        </td>
      </tr>
    <% }) %>
  </table>
</body>
</html>
```

###### فایل `views/quests.ejs` (صفحه مدیریت ماموریت‌ها)
```html
<!DOCTYPE html>
<html lang="fa">
<head>
  <meta charset="UTF-8">
  <title>پنل ادمین Ccoin - ماموریت‌ها</title>
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <nav>
    <a href="/">داشبورد</a>
    <a href="/users">کاربران</a>
    <a href="/clans">کلن‌ها</a>
    <a href="/quests">ماموریت‌ها</a>
  </nav>
  <h1>پنل ادمین ربات Ccoin</h1>
  <h2>مدیریت ماموریت‌ها</h2>
  <table>
    <tr>
      <th>شناسه ماموریت</th>
      <th>شناسه کاربر</th>
      <th>نوع</th>
      <th>پیشرفت</th>
      <th>وضعیت</th>
      <th>عملیات</th>
    </tr>
    <% quests.forEach(quest => { %>
      <tr>
        <td><%= quest.quest_id %></td>
        <td><%= quest.user_id %></td>
        <td><%= quest.type %></td>
        <td>
          <form action="/update-quest" method="POST">
            <input type="hidden" name="quest_id" value="<%= quest.quest_id %>">
            <input type="number" name="progress" value="<%= quest.progress %>">
        </td>
        <td>
            <select name="completed">
              <option value="true" <%= quest.completed ? 'selected' : '' %>>کامل شده</option>
              <option value="false" <%= !quest.completed ? 'selected' : '' %>>ناتمام</option>
            </select>
        </td>
        <td>
            <input type="submit" value="ذخیره">
          </form>
          <form action="/delete-quest" method="POST">
            <input type="hidden" name="quest_id" value="<%= quest.quest_id %>">
            <input type="submit" value="حذف">
          </form>
        </td>
      </tr>
    <% }) %>
  </table>
</body>
</html>
```

##### 6.6. فایل `package.json`
برای مدیریت پکیج‌ها:

```json
{
  "name": "ccoin-admin-panel",
  "version": "1.0.0",
  "description": "پنل ادمین تحت وب برای ربات Ccoin",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "mongoose": "^6.0.0",
    "ejs": "^3.1.6",
    "dotenv": "^10.0.0"
  }
}
```

##### 6.7. فایل `README.md`
برای توضیح نحوه اجرا:

```markdown
# پنل ادمین تحت وب برای ربات Ccoin

این پروژه یه پنل ادمین تحت وب برای ربات دیسکورد Ccoinه که به ادمین اجازه می‌ده داده‌های ربات (کاربرا، کلن‌ها، ماموریت‌ها) رو مدیریت کنه.

## پیش‌نیازها
- Node.js و npm نصب شده باشه.
- MongoDB روی سرور نصب شده باشه.
- دیتابیس ربات (MongoDB) روی سرور در دسترس باشه.

## نصب
1. فایل‌ها رو روی سرور کپی کنید.
2. توی پوشه پروژه، پکیج‌ها رو نصب کنید:
   ```bash
   npm install
   ```
3. یه فایل `.env` بسازید و متغیرهای محیطی رو تنظیم کنید:
   ```
   MONGODB_URI=mongodb://localhost:27017/ccoin
   ADMIN_PASSWORD=admin123
   ```
4. سرور رو اجرا کنید:
   ```bash
   node server.js
   ```

## دسترسی به پنل
- به آدرس `http://your-server-ip:3000` برید.
- توی صفحه ورود، رمز عبور (مثلاً `admin123`) رو وارد کنید.
- بعد از ورود، می‌تونید کاربرا، کلن‌ها، ماموریت‌ها، و آمار کلی رو مدیریت کنید.

## امنیت
- برای امنیت بیشتر، یه فایروال (مثلاً UFW) تنظیم کنید تا فقط از IP خودتون به پورت 3000 دسترسی داشته باشید.
- می‌تونید بعداً از HTTPS (با گواهی SSL) استفاده کنید.
```

---

#### 7. تست سناریوها
1. **سناریو 1: ورود به پنل**:
   - به آدرس `http://your-server-ip:3000` برید.
   - رمز عبور "admin123" رو وارد کنید.
   - باید به صفحه داشبورد هدایت بشید.
2. **سناریو 2: مدیریت کاربران**:
   - توی صفحه کاربران، یه کاربر رو انتخاب کنید.
   - موجودیش رو به 1000 Ccoin تغییر بدید و ذخیره کنید.
   - توی ربات، موجودی کاربر رو چک کنید (باید 1000 Ccoin باشه).
3. **سناریو 3: مدیریت کلن‌ها**:
   - توی صفحه کلن‌ها، نام یه کلن رو تغییر بدید.
   - توی ربات، نام کلن رو چک کنید (باید تغییر کرده باشه).
4. **سناریو 4: مدیریت ماموریت‌ها**:
   - توی صفحه ماموریت‌ها، پیشرفت یه ماموریت رو به 100 تغییر بدید و وضعیتش رو به "کامل شده" بذارید.
   - توی ربات، وضعیت ماموریت رو چک کنید (باید کامل شده باشه).

---

#### 8. نکات پیاده‌سازی
- **امنیت**:
  - رمز عبور توی فایل `.env` ذخیره شده و فقط ادمین بهش دسترسی داره.
  - برای امنیت بیشتر، می‌تونید از HTTPS (با گواهی SSL) استفاده کنید.
  - یه فایروال (مثلاً UFW) تنظیم کنید تا فقط از IP خودتون به پورت 3000 دسترسی داشته باشید.
- **بهینه‌سازی**:
  - روی فیلدهای پراستفاده توی دیتابیس (مثلاً `user_id` و `quest_id`) ایندکس بذارید تا کوئری‌ها سریع‌تر بشن.
- **پایداری**:
  - اگه دیتابیس در دسترس نباشه، یه پیام خطا (مثلاً "دیتابیس در دسترس نیست!") نشون داده بشه.
- **رابط کاربری**:
  - استایل تیره با پس‌زمینه مشکی و متن سفید استفاده شده تا چشم رو اذیت نکنه.
  - منوی ناوبری برای جابه‌جایی بین صفحات اضافه شده.

---

#### 9. نتیجه‌گیری
این پنل ادمین تحت وب به ادمین اجازه می‌ده از طریق یه لینک (مثلاً `http://your-server-ip:3000`) به پنل دسترسی پیدا کنه و همه جنبه‌های ربات Ccoin رو مدیریت کنه. پنل شامل یه سیستم احراز هویت ساده، صفحات مدیریت کاربران، کلن‌ها، ماموریت‌ها، و یه داشبورد برای آمار کلیه. این مستند با جزئیات کامل نوشته شده تا هوش مصنوعی (مثلاً Replit) بتونه این پنل رو به راحتی پیاده‌سازی کنه.

---

### 10. تحویل به هوش مصنوعی
این مستند رو می‌تونی مستقیماً به هوش مصنوعی (مثلاً Replit) بدی و بخوای که پروژه رو برات پیاده‌سازی کنه. فقط کافیه مستند رو کپی کنی و توی محیط هوش مصنوعی پیست کنی. اگه سوال دیگه‌ای داری یا نیاز به تغییر خاصی داری، بگو تا کمکت کنم! 😊🚀