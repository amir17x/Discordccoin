بله، من بر اساس پیام شما و تاریخچه‌ای که ارائه دادید، ابتدا وضعیت فعلی پروژه رو تحلیل می‌کنم و بعد برای هر یک از سه سؤال آخر (که درباره ادامه کار روی سیستم دوستان، چت ناشناس، یا تست قابلیت‌ها هست) یه مستند دقیق و با جزئیات بالا آماده می‌کنم. این مستندات به شکلی طراحی می‌شن که بتونید به یه هوش مصنوعی دیگه بدید تا سیستم رو بهبود بده و "خفن‌تر" کنه. من تمام جنبه‌های فنی، قابلیت‌ها، و ایده‌های جدید رو با دقت بالا پوشش می‌دم.

---

### تحلیل وضعیت فعلی پروژه

#### 1. پیشرفت‌های انجام‌شده
بر اساس تاریخچه، شما روی سیستم دوستان (Friendship System) و چت ناشناس (Anonymous Chat System) کار کردید و پیشرفت‌های خوبی داشتید:
- **سیستم پاداش لِوِل دوستی (Friendship Level Reward System):**
  - مشکل سیستم ادعای پاداش (Reward Claim System) رفع شده.
  - ساختار `claimedRewards` از آرایه به شیء تغییر کرده تا مدیریت بهتری داشته باشه.
  - چک‌های ایمنی برای مقادیر `null` به سیستم پاداش اضافه شده.
  - خطای احتمالی `undefined` در تابع `grantFriendshipLevelRewards` با ارائه یه لِوِل پیش‌فرض رفع شده.
- **مدیریت هدیه روزانه (Daily Gift Handling):**
  - متد `hasSentDailyGift` حالا به‌درستی با سیستم ذخیره‌سازی (Storage) ارتباط برقرار می‌کنه.
- **سیستم دوستان (Friendship System):**
  - ردیابی XP برای فعالیت‌های دوستی به‌درستی کار می‌کنه.
  - پیشرفت لِوِل دوستی (Level Progression) به‌صورت قوی پیاده‌سازی شده.
  - سیستم پاداش برای لِوِل‌های دوستی فعاله.
  - مدیریت هدیه روزانه و تاریخچه فعالیت‌های دوستی (Friendship Activity History) به‌خوبی کار می‌کنه.
- **چت ناشناس (Anonymous Chat System):**
  - این سیستم کاملاً فعاله و به‌درستی کار می‌کنه.
- **وضعیت برنامه:**
  - برنامه با موفقیت ری‌استارت شده.
  - ربات دیسکورد لاگین کرده و سرور Express روی پورت 5000 فعاله.
  - تمام دستورات (Commands) با موفقیت ریلود شدن و هیچ خطای بزرگی گزارش نشده.

#### 2. وضعیت کلی
شما تونستید سیستم دوستان رو به یه سطح پایدار و کاربردی برسونید. قابلیت‌های اصلی (ردیابی XP، پیشرفت لِوِل، پاداش‌ها، هدیه روزانه، و تاریخچه فعالیت‌ها) به‌خوبی کار می‌کنن. چت ناشناس هم فعاله و مشکلی نداره. با این حال، هنوز می‌تونید بهبودهایی اعمال کنید یا روی جنبه‌های دیگه پروژه کار کنید.

---

### مستندات دقیق برای سه سؤال آخر

#### 1. مستند برای "بهبودهای اضافی در سیستم دوستان یا چت ناشناس (Make any additional improvements to the friendship or anonymous chat systems?)"

##### 1.1. هدف
هدف این بخش، بهبود سیستم دوستان و چت ناشناس با اضافه کردن قابلیت‌های جدید، بهبود تجربه کاربری، و افزایش تعامل کاربراست. این بهبودها باید:
- تعامل کاربرا رو بیشتر کنه.
- تجربه کاربری رو جذاب‌تر و پویاتر کنه.
- امنیت و حریم خصوصی رو حفظ کنه.
- با سیستم کلن‌ها و بقیه بخش‌های ربات هم‌خوانی داشته باشه.

##### 1.2. بهبودهای پیشنهادی برای سیستم دوستان

###### 1.2.1. سیستم "بهترین دوست" (Best Friend System)
- **توضیح:** کاربر بتونه یه دوست رو به عنوان "بهترین دوست" انتخاب کنه که مزایای ویژه‌ای داشته باشه.
- **جزئیات:**
  - هر کاربر فقط می‌تونه یه بهترین دوست داشته باشه.
  - برای انتخاب، لِوِل دوستی باید حداقل 3 باشه.
  - مزایا:
    - 20% سکه بیشتر توی هدیه‌ها (مثلاً اگه 100 Ccoin هدیه بده، 120 Ccoin حساب بشه).
    - یه رول تزئینی "بهترین دوست" توی سرور.
    - یه ایموجی خاص (مثلاً 💖) کنار اسمش توی لیست دوستان.
  - توی پروفایل دوست، یه دکمه "انتخاب به‌عنوان بهترین دوست" اضافه بشه:
    ```
    👤 پروفایل کاربر#1234
    لِوِل دوستی: 3
    [دکمه: انتخاب به‌عنوان بهترین دوست]
    ```
  - اگه کاربر بخواد بهترین دوستش رو تغییر بده، یه پیام تأیید نمایش داده بشه:
    ```
    ⚠️ آیا مطمئنی می‌خوای کاربر#5678 رو به‌عنوان بهترین دوست جدیدت انتخاب کنی؟
    بهترین دوست فعلی (کاربر#1234) تغییر می‌کنه.
    [دکمه: بله] [دکمه: خیر]
    ```
- **ساختار دیتابیس:**
  - توی جدول `Friends`، یه فیلد جدید اضافه بشه:
    - `best_friend`: شناسه بهترین دوست (رشته، می‌تونه `null` باشه).
- **پیاده‌سازی:**
  - توی فایل `friendshipManager.ts`، یه متد `setBestFriend(userId, friendId)` اضافه کن که بهترین دوست رو تنظیم کنه.
  - توی فایل `giftMenu.ts`، چک کن که اگه گیرنده بهترین دوست فرستنده باشه، 20% سکه بیشتر اعمال بشه.

###### 1.2.2. سیستم گزارش تخلف (Report System) برای چت خصوصی
- **توضیح:** اگه کاربری توی چت خصوصی رفتار نامناسبی داشته باشه (مثلاً توهین یا اسپم)، کاربر مقابل بتونه گزارش بده.
- **جزئیات:**
  - توی چت خصوصی، یه دکمه "گزارش تخلف" اضافه بشه:
    ```
    💬 چت خصوصی با کاربر#1234
    پیام بنویس: [فیلد ورودی]
    [دکمه: ارسال] [دکمه: بستن چت] [دکمه: تاریخچه چت] [دکمه: گزارش تخلف]
    ```
  - اگه کاربر روی "گزارش تخلف" کلیک کنه، یه فرم باز بشه:
    ```
    🚨 گزارش تخلف
    دلیل گزارش:
    [منو: انتخاب دلیل] (توهین، اسپم، محتوای نامناسب، دیگر)
    توضیحات: [فیلد ورودی]
    [دکمه: ارسال گزارش] [دکمه: لغو]
    ```
  - گزارش توی یه جدول جداگونه ذخیره بشه و ادمین ربات بتونه بررسی کنه.
- **ساختار دیتابیس:**
  - جدول جدید `Reports`:
    - `report_id`: شناسه گزارش (رشته، کلید اصلی)
    - `reporter_id`: شناسه گزارش‌دهنده (رشته)
    - `reported_user_id`: شناسه کاربر گزارش‌شده (رشته)
    - `chat_id`: شناسه چت (رشته)
    - `reason`: دلیل گزارش (رشته)
    - `details`: توضیحات (رشته)
    - `timestamp`: زمان گزارش (تاریخ و ساعت)
    - `status`: وضعیت ("pending", "reviewed", "resolved") (رشته)
- **پیاده‌سازی:**
  - توی فایل `privateChatManager.ts`، یه متد `reportUser(chatId, reporterId, reportedUserId, reason, details)` اضافه کن که گزارش رو ذخیره کنه.
  - یه دستور `/admin reports` برای ادمین‌ها اضافه کن که لیست گزارش‌ها رو نشون بده:
    ```
    🚨 گزارش‌های تخلف
    1. گزارش از کاربر#5678 علیه کاربر#1234
    دلیل: توهین
    [دکمه: مشاهده جزئیات] [دکمه: رفع شده]
    ```

###### 1.2.3. سیستم اعلان تولد دوستان (Friend Birthday Notification)
- **توضیح:** اگه کاربر تاریخ تولدش رو توی پروفایلش وارد کرده باشه، ربات توی روز تولدش به دوستاش اعلان بفرسته.
- **جزئیات:**
  - توی جدول `Users`، یه فیلد `birthday` (رشته، فرمت "MM-DD") اضافه بشه.
  - کاربر بتونه توی تنظیمات تاریخ تولدش رو وارد کنه:
    ```
    ⚙️ تنظیمات پروفایل
    تاریخ تولد (MM-DD): [فیلد ورودی]
    [دکمه: ذخیره]
    ```
  - توی روز تولد، ربات به دوستای کاربر اعلان بفرسته:
    ```
    🎂 امروز تولد کاربر#1234 هست!
    یه هدیه براش بفرست و 10 XP دوستی بگیر!
    [دکمه: هدیه دادن]
    ```
  - اگه دوستش هدیه بفرسته، 10 XP دوستی اضافی بگیره.
- **پیاده‌سازی:**
  - یه Job روزانه (مثلاً با `node-schedule`) بساز که هر روز تاریخ فعلی رو با `birthday` کاربرا مقایسه کنه.
  - توی فایل `friendshipManager.ts`، متد `notifyFriendsOfBirthday(userId)` اضافه کن که اعلان‌ها رو بفرسته.

###### 1.2.4. سیستم هدیه گروهی به کلن (Group Gift to Clan)
- **توضیح:** دو دوست بتونن یه هدیه گروهی به کلن‌شون بدن که بین همه اعضا تقسیم بشه.
- **جزئیات:**
  - اگه دو دوست توی یه کلن باشن، بتونن یه هدیه گروهی (مثلاً 1000 Ccoin) به کلن بدن.
  - توی پروفایل دوست، یه دکمه "هدیه گروهی به کلن" اضافه بشه:
    ```
    🎁 هدیه گروهی به کلن قهرمانان
    شما و کاربر#1234 می‌تونید 1000 Ccoin به کلن هدیه بدید!
    هر نفر 500 Ccoin پرداخت می‌کنه.
    [دکمه: تأیید] [دکمه: لغو]
    ```
  - اگه تأیید کنن، هدیه توی کانال کلن اعلام بشه:
    ```
    🎉 هدیه گروهی!
    کاربر#5678 و کاربر#1234 به کلن 1000 Ccoin هدیه دادن!
    هر عضو 50 Ccoin دریافت کرد.
    ```
  - هر دو کاربر 30 XP دوستی بگیرن.
- **پیاده‌سازی:**
  - توی فایل `clanManager.ts`، متد `sendGroupGiftToClan(userId1, userId2, amount)` اضافه کن که هدیه رو پردازش کنه.
  - چک کن که هر دو کاربر موجودی کافی داشته باشن.

##### 1.3. بهبودهای پیشنهادی برای چت ناشناس

###### 1.3.1. سیستم چت ناشناس با تم (Themed Anonymous Chat)
- **توضیح:** کاربرا بتونن یه موضوع خاص برای چت ناشناس انتخاب کنن.
- **جزئیات:**
  - توی فرم چت ناشناس، یه منو برای انتخاب تم اضافه بشه:
    ```
    🕵️‍♂️ چت ناشناس
    [منو: انتخاب تم] (گیمینگ، فیلم و سریال، روزمرگی)
    [منو: علایق] (مثلاً وار کلن، ماموریت‌ها)
    [دکمه: شروع جستجو]
    ```
  - ربات کاربرایی که تم و علایق مشابه دارن رو جفت کنه.
- **پیاده‌سازی:**
  - توی جدول `AnonymousChatQueue`، یه فیلد `theme` (رشته) اضافه کن.
  - توی فایل `anonymousChatManager.ts`، متد `findMatch(userId, interests, theme)` رو آپدیت کن که تم رو هم در نظر بگیره.

###### 1.3.2. سیستم بازخورد (Feedback System) برای چت ناشناس
- **توضیح:** بعد از پایان چت ناشناس، کاربرا بتونن بازخوردشون رو درباره تجربه‌شون بگن.
- **جزئیات:**
  - بعد از پایان چت، یه فرم بازخورد نمایش داده بشه:
    ```
    🕵️‍♂️ چت ناشناس تموم شد!
    تجربه‌ت چطور بود؟
    [منو: بازخورد] (عالی، خوب، متوسط، بد)
    [دکمه: ارسال]
    ```
  - بازخوردها توی یه جدول جداگونه ذخیره بشن.
- **ساختار دیتابیس:**
  - جدول جدید `AnonymousChatFeedback`:
    - `feedback_id`: شناسه بازخورد (رشته، کلید اصلی)
    - `user_id`: شناسه کاربر (رشته)
    - `chat_id`: شناسه چت (رشته)
    - `rating`: امتیاز (رشته، "excellent", "good", "average", "bad")
    - `timestamp`: زمان ارسال (تاریخ و ساعت)
- **پیاده‌سازی:**
  - توی فایل `anonymousChatManager.ts`، متد `collectFeedback(userId, chatId, rating)` اضافه کن که بازخورد رو ذخیره کنه.

###### 1.3.3. سیستم پاداش برای چت ناشناس (Anonymous Chat Rewards)
- **توضیح:** برای تشویق کاربرا به استفاده از چت ناشناس، یه سیستم پاداش اضافه بشه.
- **جزئیات:**
  - اگه کاربر توی 5 چت ناشناس شرکت کنه (بدون اینکه چت به دلیل رفتار نامناسب بسته بشه)، یه پاداش بگیره:
    ```
    🎉 پاداش چت ناشناس!
    شما توی 5 چت ناشناس شرکت کردید!
    پاداش: 💰 100 Ccoin
    ```
  - تعداد چت‌های موفق توی جدول `Users` ردیابی بشه.
- **ساختار دیتابیس:**
  - توی جدول `Users`، یه فیلد `anonymous_chat_count` (عدد، پیش‌فرض 0) اضافه بشه.
- **پیاده‌سازی:**
  - توی فایل `anonymousChatManager.ts`، بعد از پایان هر چت موفق، متد `incrementChatCount(userId)` رو فراخوانی کن.
  - اگه `anonymous_chat_count` به 5 رسید، پاداش بده و ریستش کن.

##### 1.4. نکات پیاده‌سازی
- **امنیت:** برای گزارش تخلف، هویت کاربر گزارش‌شده فقط برای ادمین قابل مشاهده باشه.
- **بهینه‌سازی:** از Redis برای ذخیره موقت بازخوردها و شمارش چت‌های ناشناس استفاده کن.
- **رابط کاربری:** از ایموجی‌های مرتبط (مثلاً 🎂 برای تولد، 🚨 برای گزارش) استفاده کن.

---

#### 2. مستند برای "شروع کار روی جنبه دیگری از پروژه (Begin work on another aspect of the project?)"

##### 2.1. هدف
هدف این بخش، طراحی یه سیستم جدید برای ربات دیسکورد Ccoinه که بتونه یه جنبه دیگه از تعامل کاربرا رو پوشش بده. با توجه به اینکه سیستم دوستان و چت ناشناس به‌خوبی کار می‌کنن، می‌تونیم روی یه سیستم "ماموریت‌های گروهی" (Group Quests) کار کنیم که با سیستم دوستان و کلن‌ها هم‌خوانی داشته باشه.

##### 2.2. سیستم پیشنهادی: ماموریت‌های گروهی (Group Quests System)

###### 2.2.1. توضیح
- **هدف:** کاربرا بتونن با دوستاشون یا اعضای کلن‌شون توی ماموریت‌های گروهی شرکت کنن و پاداش بگیرن.
- **ویژگی‌ها:**
  - ماموریت‌ها می‌تونن شامل فعالیت‌هایی مثل "دزدی گروهی"، "شرکت توی وار کلن"، یا "جمع‌آوری مقدار مشخصی Ccoin" باشن.
  - کاربرا بتونن دوستاشون رو به ماموریت دعوت کنن.
  - پاداش‌ها شامل Ccoin، کریستال، و XP دوستی باشه.

###### 2.2.2. ساختار دیتابیس
- **جدول ماموریت‌های گروهی (GroupQuests):**
  - `quest_id`: شناسه ماموریت (رشته، کلید اصلی)
  - `type`: نوع ماموریت (رشته، مثلاً "group_theft", "clan_war", "coin_collection")
  - `participants`: لیست شرکت‌کنندگان (آرایه‌ای از `user_id`ها)
  - `progress`: پیشرفت ماموریت (عدد، مثلاً 0/100 برای جمع‌آوری 100 Ccoin)
  - `goal`: هدف ماموریت (عدد، مثلاً 100 برای جمع‌آوری 100 Ccoin)
  - `rewards`: پاداش‌ها (شیء):
    - `ccoins`: مقدار Ccoin (عدد)
    - `crystals`: مقدار کریستال (عدد)
    - `friendship_xp`: XP دوستی (عدد)
  - `status`: وضعیت ("active", "completed", "failed") (رشته)
  - `created_at`: زمان ایجاد (تاریخ و ساعت)
  - `expires_at`: زمان انقضا (تاریخ و ساعت)

###### 2.2.3. جریان کار
- **ایجاد ماموریت:**
  - کاربر دستور `/groupquest create` رو می‌زنه:
    ```
    📜 ایجاد ماموریت گروهی
    [منو: نوع ماموریت] (دزدی گروهی، وار کلن، جمع‌آوری Ccoin)
    [دکمه: ایجاد]
    ```
  - مثلاً اگه "جمع‌آوری Ccoin" رو انتخاب کنه:
    ```
    📜 ماموریت گروهی: جمع‌آوری Ccoin
    هدف: جمع‌آوری 100 Ccoin
    پاداش: 200 Ccoin + 10 کریستال + 50 XP دوستی
    [دکمه: دعوت دوستان] [دکمه: لغو]
    ```
- **دعوت دوستان:**
  - کاربر روی "دعوت دوستان" کلیک می‌کنه و لیست دوستانش نمایش داده می‌شه:
    ```
    📜 دعوت به ماموریت گروهی
    1. کاربر#1234
    2. کاربر#5678
    [دکمه: دعوت] [دکمه: بعدی]
    ```
  - اگه دعوت کنه، یه پیام به دوستش فرستاده می‌شه:
    ```
    📜 دعوت به ماموریت گروهی
    کاربر#5678 شما رو به ماموریت "جمع‌آوری 100 Ccoin" دعوت کرده!
    [دکمه: پیوستن] [دکمه: رد]
    ```
- **پیشرفت ماموریت:**
  - اگه هر یک از شرکت‌کنندگان Ccoin جمع‌آوری کنه (مثلاً از طریق فعالیت‌های اقتصادی)، پیشرفت ماموریت آپدیت می‌شه:
    ```
    📜 ماموریت گروهی: جمع‌آوری Ccoin
    پیشرفت: 50/100
    [دکمه: مشاهده شرکت‌کنندگان]
    ```
- **تکمیل ماموریت:**
  - وقتی هدف کامل بشه، ماموریت تموم می‌شه و پاداش‌ها توزیع می‌شن:
    ```
    🎉 ماموریت گروهی کامل شد!
    شما و کاربر#1234 ماموریت "جمع‌آوری 100 Ccoin" رو کامل کردید!
    پاداش: 200 Ccoin + 10 کریستال + 50 XP دوستی
    ```

###### 2.2.4. پیاده‌سازی
- **فایل‌ها:**
  - `groupQuestManager.ts`: مدیریت ماموریت‌ها (ایجاد، دعوت، آپدیت پیشرفت، توزیع پاداش).
  - `economyManager.ts`: برای ردیابی Ccoin جمع‌آوری‌شده توسط شرکت‌کنندگان.
- **متدها:**
  - `createGroupQuest(userId, type)`: ماموریت رو ایجاد کنه.
  - `inviteToQuest(questId, userId, friendId)`: دعوت‌نامه بفرسته.
  - `updateQuestProgress(questId, amount)`: پیشرفت ماموریت رو آپدیت کنه.
  - `completeQuest(questId)`: ماموریت رو کامل کنه و پاداش‌ها رو بده.

###### 2.2.5. نکات
- **امنیت:** فقط شرکت‌کنندگان بتونن پیشرفت ماموریت رو آپدیت کنن.
- **بهینه‌سازی:** از Redis برای کش کردن پیشرفت ماموریت‌ها استفاده کن.
- **رابط کاربری:** از ایموجی‌های مرتبط (مثلاً 📜 برای ماموریت) استفاده کن.

---

#### 3. مستند برای "تست یه قابلیت خاص برای اطمینان از عملکرد درست (Test any particular functionality to ensure it's working as expected?)"

##### 3.1. هدف
هدف این بخش، طراحی یه برنامه تست جامع برای بررسی عملکرد سیستم دوستان و چت ناشناسه تا مطمئن بشیم همه قابلیت‌ها به‌درستی کار می‌کنن. این تست‌ها باید تمام جنبه‌های سیستم رو پوشش بدن و مشکلات احتمالی رو شناسایی کنن.

##### 3.2. برنامه تست پیشنهادی

###### 3.2.1. تست سیستم دوستان (Friendship System)
- **سناریوهای تست:**
  1. **ارسال و مدیریت درخواست دوستی:**
     - یه کاربر (کاربر A) به کاربر B درخواست دوستی بفرسته.
     - چک کن که درخواست توی DM کاربر B نمایش داده بشه.
     - کاربر B درخواست رو تأیید کنه و چک کن که هر دو به لیست دوستان همدیگه اضافه بشن.
     - یه درخواست دیگه بفرست و این بار رد کن، چک کن که پیام رد شدن به فرستنده ارسال بشه.
     - یه درخواست دیگه بفرست و این بار بلاک کن، چک کن که کاربر A به لیست بلاک‌شده‌های کاربر B اضافه بشه.
  2. **لِوِل دوستی و پاداش‌ها:**
     - کاربر A به کاربر B 100 Ccoin هدیه بده (10 XP).
     - چک کن که `friendship_xp` به 10 آپدیت بشه.
     - 10 پیام توی چت خصوصی بفرست (5 XP).
     - یه ماموریت گروهی با هم کامل کنن (50 XP).
     - چک کن که لِوِل دوستی به 2 برسه (65/250 XP) و پاداش (100 Ccoin + 5 کریستال) به هر دو داده بشه.
     - پاداش رو ادعا کن و چک کن که توی `claimedRewards` ثبت بشه.
  3. **هدیه روزانه:**
     - کاربر A یه هدیه روزانه به کاربر B بفرسته.
     - چک کن که هر دو 5 XP دوستی بگیرن.
     - چک کن که متد `hasSentDailyGift` درست کار کنه و کاربر A نتونه دوباره توی همون روز هدیه بفرسته.
  4. **تاریخچه دوستی:**
     - چک کن که فعالیت‌های دوستی (هدیه، چت، ماموریت) توی تاریخچه ثبت بشن.
     - تاریخچه رو باز کن و چک کن که فعالیت‌ها به ترتیب زمانی نمایش داده بشن.
  5. **تنظیمات دوستی:**
     - تنظیمات کاربر A رو به "فقط سرورهای مشترک" تغییر بده.
     - یه کاربر (کاربر C) که توی سرور مشترکی با کاربر A نیست، درخواست دوستی بفرسته و چک کن که رد بشه.
     - تنظیمات نمایش پروفایل رو به "فقط دوستان" تغییر بده و چک کن که کاربر C نتونه پروفایل کاربر A رو ببینه.

###### 3.2.2. تست چت ناشناس (Anonymous Chat System)
- **سناریوهای تست:**
  1. **جفت‌سازی و شروع چت:**
     - کاربر A و کاربر B چت ناشناس رو فعال کنن و یه تم (مثلاً "گیمینگ") انتخاب کنن.
     - چک کن که ربات اونا رو بر اساس تم جفت کنه.
     - چک کن که هویت هر دو کاربر مخفی بمونه (فقط "کاربر ناشناس 1" و "کاربر ناشناس 2" نمایش داده بشه).
  2. **رد و بدل پیام‌ها:**
     - کاربر A یه پیام بفرسته و چک کن که توی DM کاربر B نمایش داده بشه.
     - کاربر B جواب بده و چک کن که پیام به کاربر A رله بشه.
  3. **پایان چت و حذف داده‌ها:**
     - کاربر A چت رو ببنده.
     - چک کن که چت برای هر دو بسته بشه و پیام "چت ناشناس به پایان رسید" نمایش داده بشه.
     - چک کن که رکورد چت از جدول `AnonymousChats` حذف بشه.
  4. **غیرفعال بودن چت:**
     - یه چت ناشناس شروع کن و 10 دقیقه پیام نفرست.
     - چک کن که ربات چت رو به صورت خودکار ببنده و داده‌ها حذف بشن.
  5. **بازخورد و پاداش:**
     - بعد از پایان چت، کاربر A بازخورد "عالی" بده.
     - چک کن که بازخورد توی جدول `AnonymousChatFeedback` ثبت بشه.
     - کاربر A توی 5 چت ناشناس شرکت کنه و چک کن که پاداش 100 Ccoin بگیره.

###### 3.2.3. ابزارهای تست
- **فریم‌ورک تست:** از `Jest` برای تست‌های واحد (Unit Tests) و `Supertest` برای تست‌های API استفاده کن.
- **تست‌های واحد:**
  - توی فایل `friendshipManager.test.ts`:
    - متد `sendFriendRequest` رو تست کن که درخواست رو درست ثبت کنه.
    - متد `grantFriendshipLevelRewards` رو تست کن که پاداش‌ها رو درست بده.
  - توی فایل `anonymousChatManager.test.ts`:
    - متد `findMatch` رو تست کن که جفت‌سازی درست انجام بشه.
    - متد `endChat` رو تست کن که داده‌ها حذف بشن.
- **تست‌های End-to-End:**
  - یه سرور تستی با دو کاربر (کاربر A و کاربر B) بساز.
  - سناریوهای بالا رو به صورت دستی یا با ابزارهایی مثل `Puppeteer` اجرا کن.

###### 3.2.4. معیارهای موفقیت
- تمام سناریوهای تست باید بدون خطا اجرا بشن.
- داده‌ها (مثلاً XP، پاداش‌ها، تاریخچه) باید به‌درستی توی دیتابیس ثبت بشن.
- چت ناشناس باید کاملاً ناشناس بمونه و داده‌ها بعد از پایان چت حذف بشن.

---

### نتیجه‌گیری
این مستندات با جزئیات بالا برای هر یک از سه سؤال طراحی شدن:
1. **بهبودهای اضافی:** سیستم بهترین دوست، گزارش تخلف، اعلان تولد، هدیه گروهی به کلن، چت ناشناس با تم، بازخورد، و پاداش چت ناشناس.
2. **جنبه جدید پروژه:** سیستم ماموریت‌های گروهی با قابلیت دعوت دوستان و پاداش‌های گروهی.
3. **تست قابلیت‌ها:** یه برنامه تست جامع برای سیستم دوستان و چت ناشناس.

شما می‌تونید این مستندات رو به یه هوش مصنوعی دیگه بدید تا این قابلیت‌ها رو پیاده‌سازی کنه و سیستم رو "خفن‌تر" کنه. اگه بخوای روی یه بخش خاص بیشتر کار کنم یا جزئیات بیشتری بدم، بگو تا کمکت کنم! 😊🚀