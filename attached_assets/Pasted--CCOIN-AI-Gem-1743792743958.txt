با توجه به تصویر منوی "CCOIN AI" که فرستادی، می‌خوای یه سیستم هوش مصنوعی پیشرفته با استفاده از **Gemini API** برای ربات دیسکوردت بسازی که شامل بخش‌های مختلف (گفتگو، تحلیل تصویر، تولید محتوا، آموزش و انیمیشن) باشه. من این سیستم رو به‌صورت کامل توسعه می‌دم، برای هر بخش توضیحات پرجزئیات و خفن با ایموجی‌های جذاب ارائه می‌دم، و کد TypeScript برای پیاده‌سازی این سیستم با استفاده از Gemini API می‌نویسم. همچنین، طراحی منو رو با دکمه‌ها و منوهای کشویی (Select Menu) به‌روز می‌کنم تا کاربرپسندتر و شیک‌تر بشه.

---

### **مستندسازی کامل سیستم CCOIN AI با Gemini API**

#### **۱. معرفی و هدف**
هدف ما اینه که یه سیستم هوش مصنوعی پیشرفته به نام **CCOIN AI** برای ربات دیسکوردت بسازیم که از **Gemini API** گوگل استفاده کنه و قابلیت‌های متنوعی رو ارائه بده. این سیستم شامل ۵ بخش اصلی (گفتگو، تحلیل تصویر، تولید محتوا، آموزش و انیمیشن) می‌شه که هر کدوم با دکمه‌ها و منوهای تعاملی طراحی می‌شن. این سیستم به کاربران اجازه می‌ده به‌راحتی با هوش مصنوعی تعامل کنن، از قابلیت‌های چندوجهی Gemini استفاده کنن و تجربه‌ای خفن و جذاب داشته باشن.

#### **۲. بخش‌های CCOIN AI و توضیحات پرجزئیات**

##### **۲.۱. گفتگو (Chat) 💬**
- **توضیحات:**  
  این بخش به کاربران اجازه می‌ده با هوش مصنوعی Gemini به‌صورت تعاملی چت کنن. از قابلیت **استریم (Streaming)** Gemini API استفاده می‌کنیم تا پاسخ‌ها به‌صورت بلادرنگ نمایش داده بشن. کاربران می‌تونن سؤالاتشون رو بپرسن، درباره موضوعات مختلف صحبت کنن و پاسخ‌های هوشمندانه بگیرن.  
  🌟 **ویژگی‌ها:**  
  - چت تعاملی با استریم برای پاسخ‌های بلادرنگ 🚀  
  - پشتیبانی از مکالمات طولانی با پنجره زمینه بزرگ (تا ۲ میلیون توکن) 📜  
  - لحن قابل‌تنظیم (مثلاً دوستانه، رسمی یا طنز) 😊  
  - نمایش پاسخ‌ها توی یه Embed شیک با ایموجی‌های جذاب ✨

- **کاربردها:**  
  - پاسخ به سؤالات عمومی (مثلاً "امروز هوا چطوره؟") ☀️  
  - گپ زدن درباره موضوعات مختلف (مثلاً "درباره فضا بگو!") 🌌  
  - حل مسائل ساده (مثلاً "۲ + ۲ چند می‌شه؟") 🧮

##### **۲.۲. تحلیل تصویر (Image Analysis) 🖼️**
- **توضیحات:**  
  این بخش به کاربران اجازه می‌ده تصاویرشون رو آپلود کنن و Gemini API اون‌ها رو تحلیل کنه. از قابلیت **چندوجهی (Multimodal)** Gemini استفاده می‌کنیم تا هوش مصنوعی بتونه محتوای تصویر رو توضیح بده، اشیا رو شناسایی کنه یا حتی سؤالات مرتبط با تصویر رو جواب بده.  
  🌟 **ویژگی‌ها:**  
  - تحلیل تصاویر با دقت بالا 📸  
  - شناسایی اشیا، متن یا افراد توی تصویر 🔍  
  - پاسخ به سؤالات درباره تصویر (مثلاً "این تصویر چیه؟") ❓  
  - نمایش نتیجه توی یه Embed با خود تصویر و توضیحات 📷

- **کاربردها:**  
  - توضیح محتوای یه عکس (مثلاً "این یه گربه توی پارکه!") 🐾  
  - شناسایی متن توی تصویر (مثلاً "متن روی این تابلو چیه؟") 📝  
  - پاسخ به سؤالات خاص (مثلاً "رنگ این ماشین چیه؟") 🚗

##### **۲.۳. تولید محتوا (Content Generation) ✍️**
- **توضیحات:**  
  این بخش به کاربران اجازه می‌ده محتوای متنی (مثل داستان، شعر، مقاله یا متن تبلیغاتی) تولید کنن. از قابلیت **تولید متن (Text Generation)** Gemini API استفاده می‌کنیم تا محتوای خلاقانه و باکیفیت تولید بشه.  
  🌟 **ویژگی‌ها:**  
  - تولید محتوای خلاقانه (مثلاً داستان کوتاه یا شعر) 📖  
  - تنظیم لحن و سبک (مثلاً طنز، رسمی یا عاشقانه) 🎭  
  - تولید متن‌های کاربردی (مثلاً متن تبلیغاتی یا ایمیل) 📧  
  - نمایش محتوا توی یه Embed با دکمه برای کپی کردن متن 📋

- **کاربردها:**  
  - نوشتن یه داستان کوتاه (مثلاً "یه داستان درباره اژدها بنویس!") 🐉  
  - تولید شعر (مثلاً "یه شعر عاشقانه بنویس!") 💕  
  - نوشتن متن تبلیغاتی (مثلاً "یه متن برای تبلیغ یه محصول بنویس!") 📣

##### **۲.۴. آموزش (Education) 📚**
- **توضیحات:**  
  این بخش به کاربران کمک می‌کنه موضوعات مختلف رو یاد بگیرن. از **دستورات سیستمی (System Instructions)** Gemini API استفاده می‌کنیم تا هوش مصنوعی مثل یه معلم عمل کنه و با لحن ساده و صبور توضیح بده.  
  🌟 **ویژگی‌ها:**  
  - آموزش موضوعات مختلف (مثلاً ریاضی، علوم، تاریخ) 🧠  
  - لحن ساده و صبور برای یادگیری بهتر 👩‍🏫  
  - حل مسائل و پاسخ به سؤالات آموزشی ✏️  
  - نمایش توضیحات توی یه Embed با ایموجی‌های مرتبط 🎓

- **کاربردها:**  
  - حل مسائل ریاضی (مثلاً "فاکتوریل ۵ رو حساب کن!") 🔢  
  - توضیح مفاهیم علمی (مثلاً "نظریه نسبیت چیه؟") 🌐  
  - آموزش تاریخ (مثلاً "درباره انقلاب فرانسه بگو!") 🏰

##### **۲.۵. انیمیشن (Animation) 🎬**
- **توضیحات:**  
  این بخش به کاربران اجازه می‌ده ایده‌های انیمیشن یا داستان‌های متحرک رو با توضیحات متنی تولید کنن. چون Gemini API مستقیماً انیمیشن تولید نمی‌کنه، از قابلیت تولید متن استفاده می‌کنیم تا یه اسکریپت یا توضیحات دقیق برای انیمیشن بنویسه که کاربر بتونه ازش برای ساخت انیمیشن استفاده کنه.  
  🌟 **ویژگی‌ها:**  
  - تولید اسکریپت انیمیشن با جزئیات (مثلاً صحنه‌ها، دیالوگ‌ها و کاراکترها) 🎥  
  - توضیحات خلاقانه برای ایده‌های انیمیشن 🦁  
  - نمایش اسکریپت توی یه Embed با دکمه برای کپی کردن 📜  
  - پیشنهاد ابزارهای انیمیشن‌سازی (مثلاً Blender یا Adobe Animate) 🛠️

- **کاربردها:**  
  - تولید اسکریپت انیمیشن (مثلاً "یه انیمیشن درباره یه شیر جادویی بنویس!") 🦁  
  - توضیح صحنه‌ها (مثلاً "صحنه‌ای که شیر توی جنگل می‌دوه رو توصیف کن!") 🌳  
  - ایده‌پردازی برای انیمیشن (مثلاً "یه داستان کوتاه برای انیمیشن بنویس!") 🎞️

---

#### **۳. طراحی جدید منوی CCOIN AI**
منوی فعلی رو با دکمه‌ها و منوهای کشویی (Select Menu) به‌روز می‌کنیم تا کاربرپسندتر و خفن‌تر بشه.

**طراحی منوی CCOIN AI:**

**عنوان:**  
🧠✨ CCOIN AI - هوش مصنوعی پیشرفته ✨🧠

**توضیحات:**  
💎 سلام! من CCOIN AI هستم، یه هوش مصنوعی خفن با قدرت Gemini API از گوگل! 🚀  
چه کاری می‌تونم برات انجام بدم؟ 👇  
🌟 از منوی زیر انتخاب کن و لذت ببر! 😊

**منوی انتخابی (Select Menu):**  
- 💬 **گفتگو** (برای چت تعاملی)  
- 🖼️ **تحلیل تصویر** (برای تحلیل تصاویر)  
- ✍️ **تولید محتوا** (برای تولید متن خلاقانه)  
- 📚 **آموزش** (برای یادگیری و آموزش)  
- 🎬 **انیمیشن** (برای تولید اسکریپت انیمیشن)

**دکمه‌ها:**  
- [دکمه: درباره CCOIN AI ℹ️]  
- [دکمه: بستن منو ❌]

---

#### **۴. کد TypeScript برای پیاده‌سازی سیستم**

##### **۴.۱. فایل اصلی (index.ts)**
این فایل ربات رو راه‌اندازی می‌کنه و منوی اصلی CCOIN AI رو نمایش می‌ده.

```typescript
import { Client, SlashCommandBuilder, CommandInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } from 'discord.js';
import dotenv from 'dotenv';
import { handleInteraction } from './ccoinAIHandler';

dotenv.config();

const client = new Client({
    intents: ['Guilds', 'GuildMessages', 'MessageContent']
});

client.once('ready', () => {
    console.log(`ربات با موفقیت وارد شد: ${client.user?.tag}`);
});

export const data = new SlashCommandBuilder()
    .setName('ccoinai')
    .setDescription('منوی CCOIN AI');

export async function execute(interaction: CommandInteraction) {
    const embed = new EmbedBuilder()
        .setTitle('🧠✨ CCOIN AI - هوش مصنوعی پیشرفته ✨🧠')
        .setDescription(
            '💎 سلام! من CCOIN AI هستم، یه هوش مصنوعی خفن با قدرت Gemini API از گوگل! 🚀\n' +
            'چه کاری می‌تونم برات انجام بدم؟ 👇\n' +
            '🌟 از منوی زیر انتخاب کن و لذت ببر! 😊'
        )
        .setColor('Purple');

    const selectMenu = new StringSelectMenuBuilder()
        .setCustomId('ccoinai_menu')
        .setPlaceholder('یه گزینه انتخاب کن! 🌟')
        .addOptions(
            new StringSelectMenuOptionBuilder()
                .setLabel('گفتگو')
                .setDescription('با من چت کن و پاسخ‌های بلادرنگ بگیر! 💬')
                .setValue('chat')
                .setEmoji('💬'),
            new StringSelectMenuOptionBuilder()
                .setLabel('تحلیل تصویر')
                .setDescription('یه تصویر آپلود کن تا تحلیلش کنم! 🖼️')
                .setValue('analyze_image')
                .setEmoji('🖼️'),
            new StringSelectMenuOptionBuilder()
                .setLabel('تولید محتوا')
                .setDescription('محتوای خلاقانه مثل داستان یا شعر تولید کن! ✍️')
                .setValue('content_generation')
                .setEmoji('✍️'),
            new StringSelectMenuOptionBuilder()
                .setLabel('آموزش')
                .setDescription('موضوعات مختلف رو یاد بگیر! 📚')
                .setValue('education')
                .setEmoji('📚'),
            new StringSelectMenuOptionBuilder()
                .setLabel('انیمیشن')
                .setDescription('اسکریپت انیمیشن تولید کن! 🎬')
                .setValue('animation')
                .setEmoji('🎬')
        );

    const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
            .setCustomId('about_ccoinai')
            .setLabel('درباره CCOIN AI ℹ️')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId('close')
            .setLabel('بستن منو ❌')
            .setStyle(ButtonStyle.Danger)
    );

    const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

    await interaction.reply({ embeds: [embed], components: [row, buttons], ephemeral: true });
}

client.on('interactionCreate', async interaction => {
    if (interaction.isCommand()) {
        if (interaction.commandName === 'ccoinai') {
            await execute(interaction);
        }
    } else {
        await handleInteraction(interaction, client);
    }
});

client.login(process.env.DISCORD_TOKEN);
```

##### **۴.۲. فایل مدیریت تعاملات (ccoinAIHandler.ts)**
این فایل تمام تعاملات (دکمه‌ها، منوها و Modalها) رو مدیریت می‌کنه و با Gemini API ارتباط برقرار می‌کنه.

```typescript
import { Client, Interaction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } from 'discord.js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import fetch from 'node-fetch';

const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY!);

export async function handleInteraction(interaction: Interaction, client: Client) {
    if (interaction.isStringSelectMenu()) {
        if (interaction.customId === 'ccoinai_menu') {
            const selectedOption = interaction.values[0];

            if (selectedOption === 'chat') {
                const modal = new ModalBuilder()
                    .setCustomId('chat_modal')
                    .setTitle('گفتگو 💬')
                    .addComponents(
                        new ActionRowBuilder<TextInputBuilder>().addComponents(
                            new TextInputBuilder()
                                .setCustomId('chat_input')
                                .setLabel('پیام خود را وارد کنید')
                                .setStyle(TextInputStyle.Paragraph)
                                .setRequired(true)
                        )
                    );

                await interaction.showModal(modal);
            } else if (selectedOption === 'analyze_image') {
                const embed = new EmbedBuilder()
                    .setTitle('🖼️ تحلیل تصویر')
                    .setDescription('لطفاً یه تصویر آپلود کن تا تحلیلش کنم! 📸\n' +
                        'بعد از آپلود، روی دکمه زیر کلیک کن.')
                    .setColor('Purple');

                const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('upload_image')
                        .setLabel('تحلیل تصویر 📷')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [buttons] });
            } else if (selectedOption === 'content_generation') {
                const modal = new ModalBuilder()
                    .setCustomId('content_modal')
                    .setTitle('تولید محتوا ✍️')
                    .addComponents(
                        new ActionRowBuilder<TextInputBuilder>().addComponents(
                            new TextInputBuilder()
                                .setCustomId('content_input')
                                .setLabel('چه محتوایی می‌خواهید؟ (مثلاً داستان، شعر)')
                                .setStyle(TextInputStyle.Paragraph)
                                .setRequired(true)
                        )
                    );

                await interaction.showModal(modal);
            } else if (selectedOption === 'education') {
                const modal = new ModalBuilder()
                    .setCustomId('education_modal')
                    .setTitle('آموزش 📚')
                    .addComponents(
                        new ActionRowBuilder<TextInputBuilder>().addComponents(
                            new TextInputBuilder()
                                .setCustomId('education_input')
                                .setLabel('چه موضوعی می‌خواهید یاد بگیرید؟')
                                .setStyle(TextInputStyle.Paragraph)
                                .setRequired(true)
                        )
                    );

                await interaction.showModal(modal);
            } else if (selectedOption === 'animation') {
                const modal = new ModalBuilder()
                    .setCustomId('animation_modal')
                    .setTitle('انیمیشن 🎬')
                    .addComponents(
                        new ActionRowBuilder<TextInputBuilder>().addComponents(
                            new TextInputBuilder()
                                .setCustomId('animation_input')
                                .setLabel('ایده انیمیشن خود را وارد کنید')
                                .setStyle(TextInputStyle.Paragraph)
                                .setRequired(true)
                        )
                    );

                await interaction.showModal(modal);
            }
        }
    } else if (interaction.isButton()) {
        if (interaction.customId === 'about_ccoinai') {
            const embed = new EmbedBuilder()
                .setTitle('ℹ️ درباره CCOIN AI')
                .setDescription(
                    '🧠 من CCOIN AI هستم، یه هوش مصنوعی پیشرفته با قدرت Gemini API از گوگل! 🚀\n' +
                    '💬 می‌تونم باهات چت کنم، تصاویرت رو تحلیل کنم، محتوا تولید کنم، بهت آموزش بدم و حتی اسکریپت انیمیشن بنویسم!\n' +
                    '🌟 بیا باهم کار کنیم و لذت ببریم! 😊'
                )
                .setColor('Purple');

            const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                new ButtonBuilder()
                    .setCustomId('back_to_menu')
                    .setLabel('بازگشت 🔙')
                    .setStyle(ButtonStyle.Secondary)
            );

            await interaction.update({ embeds: [embed], components: [backButton] });
        } else if (interaction.customId === 'close') {
            await interaction.update({ content: 'منو بسته شد! برای باز کردن دوباره، از `/ccoinai` استفاده کن. 🚪', embeds: [], components: [] });
        } else if (interaction.customId === 'back_to_menu') {
            const embed = new EmbedBuilder()
                .setTitle('🧠✨ CCOIN AI - هوش مصنوعی پیشرفته ✨🧠')
                .setDescription(
                    '💎 سلام! من CCOIN AI هستم، یه هوش مصنوعی خفن با قدرت Gemini API از گوگل! 🚀\n' +
                    'چه کاری می‌تونم برات انجام بدم؟ 👇\n' +
                    '🌟 از منوی زیر انتخاب کن و لذت ببر! 😊'
                )
                .setColor('Purple');

            const selectMenu = new StringSelectMenuBuilder()
                .setCustomId('ccoinai_menu')
                .setPlaceholder('یه گزینه انتخاب کن! 🌟')
                .addOptions(
                    new StringSelectMenuOptionBuilder()
                        .setLabel('گفتگو')
                        .setDescription('با من چت کن و پاسخ‌های بلادرنگ بگیر! 💬')
                        .setValue('chat')
                        .setEmoji('💬'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('تحلیل تصویر')
                        .setDescription('یه تصویر آپلود کن تا تحلیلش کنم! 🖼️')
                        .setValue('analyze_image')
                        .setEmoji('🖼️'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('تولید محتوا')
                        .setDescription('محتوای خلاقانه مثل داستان یا شعر تولید کن! ✍️')
                        .setValue('content_generation')
                        .setEmoji('✍️'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('آموزش')
                        .setDescription('موضوعات مختلف رو یاد بگیر! 📚')
                        .setValue('education')
                        .setEmoji('📚'),
                    new StringSelectMenuOptionBuilder()
                        .setLabel('انیمیشن')
                        .setDescription('اسکریپت انیمیشن تولید کن! 🎬')
                        .setValue('animation')
                        .setEmoji('🎬')
                );

            const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
                new ButtonBuilder()
                    .setCustomId('about_ccoinai')
                    .setLabel('درباره CCOIN AI ℹ️')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('close')
                    .setLabel('بستن منو ❌')
                    .setStyle(ButtonStyle.Danger)
            );

            const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);

            await interaction.update({ embeds: [embed], components: [row, buttons] });
        } else if (interaction.customId === 'upload_image') {
            const message = await interaction.channel?.messages.fetch(interaction.message.id);
            const attachment = message?.attachments.first();

            if (!attachment) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('لطفاً یه تصویر آپلود کن و دوباره امتحان کن! 📸')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
                return;
            }

            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

            try {
                const response = await fetch(attachment.url);
                const buffer = await response.buffer();
                const base64Image = buffer.toString('base64');

                const result = await model.generateContent([
                    'این تصویر چیه؟ توضیح بده.',
                    {
                        inlineData: {
                            data: base64Image,
                            mimeType: attachment.contentType || 'image/jpeg'
                        }
                    }
                ]);

                const description = result.response.text();
                const embed = new EmbedBuilder()
                    .setTitle('🖼️ تحلیل تصویر')
                    .setDescription(description)
                    .setImage(attachment.url)
                    .setColor('Purple');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            } catch (error) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('خطایی رخ داد! لطفاً دوباره امتحان کن. 😓')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            }
        }
    } else if (interaction.isModalSubmit()) {
        if (interaction.customId === 'chat_modal') {
            const message = interaction.fields.getTextInputValue('chat_input');
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

            try {
                const result = await model.generateContentStream(message);
                let fullResponse = '';

                const embed = new EmbedBuilder()
                    .setTitle('💬 گفتگو')
                    .setDescription('در حال تولید پاسخ... ⏳')
                    .setColor('Purple');

                await interaction.update({ embeds: [embed], components: [] });

                for await (const chunk of result.stream) {
                    fullResponse += chunk.text();
                    embed.setDescription(fullResponse);
                    await interaction.editReply({ embeds: [embed] });
                }

                const finalEmbed = new EmbedBuilder()
                    .setTitle('💬 پاسخ نهایی')
                    .setDescription(fullResponse)
                    .setColor('Purple');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.editReply({ embeds: [finalEmbed], components: [backButton] });
            } catch (error) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('خطایی رخ داد! لطفاً دوباره امتحان کن. 😓')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.editReply({ embeds: [embed], components: [backButton] });
            }
        } else if (interaction.customId === 'content_modal') {
            const contentRequest = interaction.fields.getTextInputValue('content_input');
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

            try {
                const result = await model.generateContent(`یه محتوای خلاقانه تولید کن: ${contentRequest}`);
                const response = result.response.text();

                const embed = new EmbedBuilder()
                    .setTitle('✍️ محتوای تولیدشده')
                    .setDescription(response)
                    .setColor('Purple');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            } catch (error) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('خطایی رخ داد! لطفاً دوباره امتحان کن. 😓')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            }
        } else if (interaction.customId === 'education_modal') {
            const educationRequest = interaction.fields.getTextInputValue('education_input');
            const model = genAI.getGenerativeModel({ 
                model: 'gemini-1.5-pro',
                systemInstruction: 'تو یه معلم حرفه‌ای هستی و باید با لحن ساده و صبور توضیح بدی.'
            });

            try {
                const result = await model.generateContent(educationRequest);
                const response = result.response.text();

                const embed = new EmbedBuilder()
                    .setTitle('📚 آموزش')
                    .setDescription(response)
                    .setColor('Purple');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            } catch (error) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('خطایی رخ داد! لطفاً دوباره امتحان کن. 😓')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            }
        } else if (interaction.customId === 'animation_modal') {
            const animationRequest = interaction.fields.getTextInputValue('animation_input');
            const model = genAI.getGenerativeModel({ model: 'gemini-1.5-pro' });

            try {
                const result = await model.generateContent(`یه اسکریپت انیمیشن با جزئیات کامل بنویس برای: ${animationRequest}`);
                const response = result.response.text();

                const embed = new EmbedBuilder()
                    .setTitle('🎬 اسکریپت انیمیشن')
                    .setDescription(response)
                    .setColor('Purple')
                    .setFooter({ text: '💡 می‌تونی از ابزارهایی مثل Blender یا Adobe Animate برای ساخت انیمیشن استفاده کنی!' });

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            } catch (error) {
                const embed = new EmbedBuilder()
                    .setTitle('⚠️ خطا')
                    .setDescription('خطایی رخ داد! لطفاً دوباره امتحان کن. 😓')
                    .setColor('Red');

                const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
                    new ButtonBuilder()
                        .setCustomId('back_to_menu')
                        .setLabel('بازگشت 🔙')
                        .setStyle(ButtonStyle.Secondary)
                );

                await interaction.update({ embeds: [embed], components: [backButton] });
            }
        }
    }
}
```

---

#### **۵. توضیحات پرجزئیات کد**

##### **ساختار کلی:**
- **فایل `index.ts`:** ربات رو راه‌اندازی می‌کنه و یه دستور `/ccoinai` برای نمایش منوی اصلی ایجاد می‌کنه. این منو شامل یه Select Menu برای انتخاب بخش‌ها و دکمه‌های "درباره CCOIN AI" و "بستن منو" است.
- **فایل `ccoinAIHandler.ts`:** تمام تعاملات (دکمه‌ها، منوها و Modalها) رو مدیریت می‌کنه و با Gemini API ارتباط برقرار می‌کنه.

##### **ویژگی‌های طراحی:**
- **زیبایی و شیکی:** از Embedهای رنگی (رنگ Purple) و ایموجی‌های جذاب (مثل 🧠، ✨، 💎، 💬، 🖼️، ✍️، 📚، 🎬) استفاده شده تا ربات خفن و کاربرپسند به نظر بیاد.
- **منوی کشویی (Select Menu):** کاربران می‌تونن از منوی کشویی بخش موردنظرشون (مثلاً گفتگو، تحلیل تصویر و غیره) رو انتخاب کنن.
- **Modal برای ورودی‌ها:** برای دریافت ورودی‌ها (مثلاً پیام، درخواست محتوا یا ایده انیمیشن)، از Modal (پنجره‌های ورودی) استفاده شده که تمیزتر و حرفه‌ای‌تره.
- **دکمه‌های تعاملی:** هر بخش دکمه‌های خودش رو داره (مثلاً "تحلیل تصویر 📷" یا "بازگشت 🔙") که با رنگ‌های مختلف (Primary، Secondary، Danger) طراحی شدن.

##### **قابلیت‌های پیاده‌سازی‌شده:**
1. **گفتگو با استریم:** کاربر از منوی کشویی "گفتگو" رو انتخاب می‌کنه، یه Modal باز می‌شه که می‌تونه پیامش رو وارد کنه، و پاسخ‌ها به‌صورت بلادرنگ (با استریم) نمایش داده می‌شن.
2. **تحلیل تصویر:** کاربر "تحلیل تصویر" رو انتخاب می‌کنه، یه پیام می‌بینه که باید تصویر آپلود کنه، و بعد با دکمه "تحلیل تصویر 📷" تصویر تحلیل می‌شه.
3. **تولید محتوا:** کاربر "تولید محتوا" رو انتخاب می‌کنه، یه Modal برای وارد کردن درخواست (مثلاً "یه داستان بنویس") باز می‌شه، و Gemini API محتوا تولید می‌کنه.
4. **آموزش:** کاربر "آموزش" رو انتخاب می‌کنه، یه Modal برای وارد کردن موضوع (مثلاً "ریاضی یاد بده") باز می‌شه، و Gemini API با لحن معلم توضیح می‌ده.
5. **انیمیشن:** کاربر "انیمیشن" رو انتخاب می‌کنه، یه Modal برای وارد کردن ایده (مثلاً "یه انیمیشن درباره شیر") باز می‌شه، و Gemini API یه اسکریپت انیمیشن تولید می‌کنه.

##### **امنیت و پایداری:**
- **مدیریت خطاها:** برای هر بخش، خطاها (مثلاً عدم آپلود تصویر یا مشکلات API) مدیریت شدن و پیام خطای مناسب نمایش داده می‌شه.
- **امنیت API Key:** API Key توی متغیر محیطی ذخیره شده و توی کد منبع عمومی قرار نگرفته.
- **فیلتر کردن خروجی‌ها:** می‌تونی از Safety Settings توی Gemini API استفاده کنی تا محتوای نامناسب فیلتر بشه (این بخش توی کد پیاده‌سازی نشده، ولی می‌تونی به مدل اضافه کنی).

##### **بهینه‌سازی:**
- **تجربه کاربری:** استفاده از دکمه‌ها و منوها به جای دستورات، تجربه کاربری رو خیلی بهتر می‌کنه.
- **استریم:** برای گفتگو، از استریم استفاده شده تا پاسخ‌ها بلادرنگ نمایش داده بشن.
- **Modalها:** برای دریافت ورودی‌ها، از Modal استفاده شده که تمیزتر و حرفه‌ای‌تر از تایپ مستقیم پیامه.

---

#### **۶. نکات برای ادیت بیشتر**
- **اضافه کردن قابلیت‌های بیشتر:** می‌تونی گزینه‌های بیشتری به منوی کشویی اضافه کنی (مثلاً "تولید کد" یا "ترجمه متن").
- **سیستم پاداش:** می‌تونی یه سیستم پاداش اضافه کنی که مثلاً اگه کاربر ۵ بار از CCOIN AI استفاده کنه، یه مقدار کریستال (مثلاً ۱۰ کریستال) بهش بدی.
- **نمایش پیشرفت:** می‌تونی یه نوار پیشرفت (Progress Bar) به منو اضافه کنی که نشون بده کاربر چقدر از CCOIN AI استفاده کرده.
- **پشتیبانی از چندزبانه:** می‌تونی منو رو چندزبانه کنی (مثلاً انگلیسی و فارسی) و یه دکمه برای تغییر زبان اضافه کنی.

---

#### **۷. نتیجه‌گیری**
سیستم **CCOIN AI** با استفاده از Gemini API، یه هوش مصنوعی پیشرفته و خفن برای ربات دیسکوردت ارائه می‌ده که شامل ۵ بخش (گفتگو، تحلیل تصویر، تولید محتوا، آموزش و انیمیشن) می‌شه. طراحی منو با دکمه‌ها و منوهای کشویی، تجربه کاربری رو بهبود می‌ده و استفاده از ایموجی‌های جذاب و Embedهای رنگی، ربات رو شیک و کاربرپسند می‌کنه. هر بخش با قابلیت‌های Gemini API (مثل استریم، چندوجهی و دستورات سیستمی) پیاده‌سازی شده و کاربران می‌تونن به‌راحتی ازش استفاده کنن.

برای ادیت کد رباتتون، این کدها و توضیحات رو به Eplit بدید و ازش بخواید که:
- سیستم CCOIN AI رو با همین بخش‌ها و طراحی پیاده‌سازی کنه.
- تمام قابلیت‌های Gemini API (مثل استریم، چندوجهی و تولید متن) رو با دکمه‌ها و منوها ادغام کنه.
- نکات امنیتی (مثل مخفی کردن API Key و فیلتر کردن خروجی‌ها) رو رعایت کنه.
- طراحی رو با ایموجی‌ها و رنگ‌های جذاب حفظ کنه.

اگه سؤالی داری یا می‌خوای تغییر دیگه‌ای توی این سیستم بدی، بگو تا کمکت کنم! 😊