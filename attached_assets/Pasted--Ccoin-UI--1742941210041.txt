خیلی خوبه که می‌خوای یه پنل ادمین خفن و کاربرپسند برای ربات Ccoin بسازی! توی تصویر اول، یه UI ساده از پنل ادمین رو می‌بینیم که اطلاعاتی مثل تعداد کلن‌ها، کوئست‌ها، Ccoin، و کریستال‌ها رو نشون می‌ده. توی تصاویر بعدی، یه رابط کاربری (UI) توی دیسکورد برای مدیریت ربات با دکمه‌ها رو می‌بینیم که شامل قابلیت‌هایی مثل مدیریت اقتصاد، کلن‌ها، کوئست‌ها، و تنظیماته. من این دو رو ترکیب می‌کنم، ویژگی‌های جدید و جذاب اضافه می‌کنم، و یه مستند جامع با کد و توضیحات برات می‌نویسم تا بتونی یه داشبورد حرفه‌ای و پویا بسازی.

---

### مستند جامع برای طراحی و پیاده‌سازی داشبورد پنل ادمین حرفه‌ای و پویا برای ربات Ccoin

#### مقدمه
هدف این مستند، طراحی و پیاده‌سازی یه پنل ادمین حرفه‌ای، زیبا، کاربرپسند، و پویا برای ربات Ccoin هست که بتونه قابلیت‌های مدیریت ربات رو هم از طریق وب (پنل ادمین) و هم از طریق دیسکورد (با دکمه‌ها) فراهم کنه. این پنل با استفاده از **Express.js** برای بک‌اند، **EJS** برای رندر صفحات، **Tailwind CSS** برای طراحی UI، **Chart.js** برای نمودارها، و **discord.js** برای مدیریت ربات توی دیسکورد پیاده‌سازی می‌شه. همچنین از **Discord OAuth2** برای احراز هویت استفاده می‌کنیم.

---

### 1. تحلیل UIهای موجود

#### 1.1. UI پنل ادمین (تصویر اول)
- **ویژگی‌ها:**  
  - نمایش آمار کلی:  
    - تعداد کلن‌ها (0).
    - تعداد کوئست‌ها (0).
    - مجموع Ccoin (0).
    - مجموع کریستال‌ها (0).
    - تعداد کاربرای جدید توی 24 ساعت (0).
  - نوار کناری (Sidebar):  
    - گزینه‌های "داشبورد"، "کاربرا"، "کلن‌ها"، "کوئست‌ها"، "اقتصاد"، "تنظیمات"، "لاگ‌ها".
  - هدر (Header):  
    - نام ادمین (whysiks) و دکمه خروج.
- **محدودیت‌ها:**  
  - طراحی ساده و بدون جذابیت بصری.
  - عدم وجود نمودار یا اطلاعات پویا.
  - اطلاعات محدود (فقط چند عدد ساده).

#### 1.2. UI دیسکورد با دکمه‌ها (تصاویر بعدی)
- **ویژگی‌ها:**  
  - نمایش اطلاعات پایه:  
    - تعداد کاربرا (1).
    - مجموع Ccoin (500).
    - مجموع کریستال‌ها (6).
  - دکمه‌های تعاملی:  
    - مدیریت اقتصاد (اضافه کردن/حذف Ccoin و کریستال).
    - مدیریت کلن‌ها (ایجاد/حذف کلن).
    - مدیریت کوئست‌ها (ایجاد/حذف کوئست).
    - مدیریت کاربرا (اضافه کردن/حذف کاربر).
    - تنظیمات (تنظیمات ربات).
    - لاگ‌ها (مشاهده لاگ‌ها).
  - آیکون‌ها و طراحی جذاب:  
    - استفاده از ایموجی‌ها برای دکمه‌ها (مثلاً 💰 برای اقتصاد، 🏰 برای کلن‌ها).
- **مزایا:**  
  - تعاملی بودن با دکمه‌ها.
  - دسترسی سریع به قابلیت‌های مدیریت از داخل دیسکورد.

#### 1.3. ترکیب این دو
ما می‌تونیم یه پنل ادمین وب بسازیم که:
- اطلاعات جامع و پویا (مثل نمودارها و جداول) رو نمایش بده.
- قابلیت‌های مدیریت (مثل دکمه‌های دیسکورد) رو توی وب هم داشته باشه.
- یه رابط دیسکورد با دکمه‌ها هم داشته باشیم که ادمین‌ها بتونن از داخل دیسکورد هم ربات رو مدیریت کنن.

---

### 2. قابلیت‌های پنل ادمین جدید
#### 2.1. داشبورد (Dashboard)
- **آمار کلی:**  
  - تعداد کل کاربرا (Total Users).
  - تعداد کاربرای جدید در 24 ساعت گذشته (New Users in Last 24h).
  - تعداد کل پیام‌ها (Total Messages).
  - تعداد دستورات اجرا‌شده (Total Commands Used).
  - مجموع Ccoin و کریستال‌ها توی سرور.
  - تعداد کلن‌ها و کوئست‌ها.
- **وضعیت سرور:**  
  - وضعیت ربات (Online/Offline).
  - آپتایم سرور (Uptime).
  - مصرف حافظه (Memory Usage).
- **نمودارها:**  
  - نمودار تعداد کاربرای جدید در 7 روز گذشته (خطی).
  - نمودار تعداد پیام‌ها در 7 روز گذشته (میله‌ای).
  - نمودار توزیع Ccoin بین کاربرا (دوناتی).

#### 2.2. مدیریت کاربرا (User Management)
- **لیست کاربرا:**  
  - نمایش جدول کاربرا با اطلاعات (نام کاربری، آیدی، Ccoin، کریستال، سطح، تعداد پیام‌ها).
  - امکان جستجو و فیلتر (مثلاً بر اساس Ccoin یا سطح).
  - دکمه‌های "ویرایش" و "حذف" برای هر کاربر.
- **ویرایش کاربر:**  
  - تغییر موجودی Ccoin و کریستال.
  - تغییر سطح و XP.
  - بن کردن یا آنبن کردن کاربر.
- **اضافه کردن کاربر:**  
  - فرم برای اضافه کردن کاربر جدید (آیدی، نام کاربری، Ccoin اولیه).

#### 2.3. مدیریت اقتصاد (Economy Management)
- **آمار اقتصادی:**  
  - مجموع Ccoin و کریستال توی سرور.
  - تعداد کل تراکنش‌ها.
  - میانگین Ccoin هر کاربر.
- **مدیریت تراکنش‌ها:**  
  - نمایش جدول تراکنش‌ها (فرستنده، گیرنده، مقدار، تاریخ).
  - دکمه برای لغو تراکنش.
- **اضافه/حذف Ccoin و کریستال:**  
  - فرم برای اضافه کردن یا کم کردن Ccoin و کریستال برای یه کاربر خاص.

#### 2.4. مدیریت کلن‌ها (Clan Management)
- **لیست کلن‌ها:**  
  - نمایش جدول کلن‌ها (نام، لیدر، تعداد اعضا، سطح، مجموع Ccoin).
  - دکمه‌های "ویرایش" و "حذف".
- **ایجاد/ویرایش کلن:**  
  - فرم برای ایجاد کلن جدید (نام، لیدر، سطح اولیه).
  - فرم برای ویرایش کلن (تغییر لیدر، سطح، یا حذف).

#### 2.5. مدیریت کوئست‌ها (Quest Management)
- **لیست کوئست‌ها:**  
  - نمایش جدول کوئست‌ها (عنوان، توضیحات، دسته‌بندی، حداقل سطح، پاداش).
  - دکمه‌های "ویرایش" و "حذف".
- **ایجاد/ویرایش کوئست:**  
  - فرم برای ایجاد کوئست جدید (عنوان، توضیحات، دسته‌بندی، حداقل سطح، پاداش).
  - فرم برای ویرایش کوئست.

#### 2.6. لاگ‌ها (Logs)
- **لاگ فعالیت‌ها:**  
  - نمایش جدول لاگ‌ها (تاریخ، نوع فعالیت، کاربر، توضیحات).
  - فیلتر بر اساس تاریخ، نوع فعالیت، یا کاربر.
- **لاگ‌های ربات:**  
  - نمایش لاگ دستورات اجرا‌شده توسط ربات.

#### 2.7. تنظیمات (Settings)
- **تنظیمات ربات:**  
  - تغییر پیشوند دستورات (Command Prefix).
  - تغییر نرخ تبدیل کریستال به Ccoin.
- **تنظیمات پنل:**  
  - تغییر تم (Dark/Light).
  - تغییر زبان (انگلیسی/فارسی).

#### 2.8. رابط دیسکورد با دکمه‌ها
- **دستور `/admin`:**  
  - یه پیام با دکمه‌های تعاملی برای مدیریت ربات.
- **دکمه‌ها:**  
  - مدیریت اقتصاد (اضافه/حذف Ccoin و کریستال).
  - مدیریت کلن‌ها (ایجاد/حذف کلن).
  - مدیریت کوئست‌ها (ایجاد/حذف کوئست).
  - مدیریت کاربرا (اضافه/حذف کاربر).
  - تنظیمات (تغییر پیشوند، نرخ تبدیل).
  - لاگ‌ها (مشاهده لاگ‌ها).
  - لینک به پنل وب (دکمه‌ای که لینک پنل ادمین رو نشون بده).

---

### 3. طراحی UI حرفه‌ای و کاربرپسند
#### 3.1. استفاده از Tailwind CSS
برای طراحی UI، از **Tailwind CSS** استفاده می‌کنیم که یه فریم‌ورک CSS سبک و منعطفه. Tailwind به ما اجازه می‌ده با کلاس‌های آماده، یه UI زیبا و ریسپانسیو بسازیم.

#### 3.2. ساختار کلی UI
- **نوار کناری (Sidebar):**  
  - منوی ناوبری با لینک به بخش‌های مختلف (Dashboard, Users, Economy, Clans, Quests, Logs, Settings).
  - لوگوی ربات و نام ادمین توی بالای نوار کناری.
  - آیکون کنار هر گزینه (مثلاً 📊 برای داشبورد، 👥 برای کاربرا).
- **هدر (Header):**  
  - نمایش نام ادمین و نقش (مثلاً "Admin: whysiks").
  - دکمه خروج (Logout).
  - دکمه تغییر تم (Dark/Light).
- **بخش اصلی (Main Content):**  
  - کارت‌ها (Cards) برای نمایش آمار.
  - جداول (Tables) برای نمایش لیست‌ها (کاربرا، کلن‌ها، کوئست‌ها).
  - نمودارها (Charts) برای نمایش داده‌های پویا.
  - فرم‌ها (Forms) برای ایجاد/ویرایش.
- **تم:**  
  - تم تیره (Dark Theme) با رنگ‌های مدرن (خاکستری تیره، آبی، بنفش).
  - امکان تغییر به تم روشن (Light Theme).

#### 3.3. نمونه طراحی داشبورد
یه نمونه از داشبورد جدید (به صورت متنی برای درک بهتر):

```
[Sidebar]
- Logo: Ccoin Bot
- Admin: whysiks
- 📊 Dashboard (active)
- 👥 Users
- 💰 Economy
- 🏰 Clans
- 🎯 Quests
- 📜 Logs
- ⚙️ Settings

[Header]
- whysiks (Admin) | 🌙 Dark Mode | Logout

[Main Content]
📊 داشبورد
------------------------------------------------
[Card] کل کاربرا: 150
[Card] کاربرای جدید (24 ساعت): 5
[Card] کل پیام‌ها: 12,345
[Card] دستورات اجرا‌شده: 1,234
[Card] مجموع Ccoin: 10,000
[Card] مجموع کریستال: 500
[Card] تعداد کلن‌ها: 10
[Card] تعداد کوئست‌ها: 20

[Card] وضعیت سرور
- ربات: آنلاین ✅
- آپتایم: 3 روز و 12 ساعت
- مصرف حافظه: 128 MB

[Chart] کاربرای جدید (7 روز گذشته)
[Line Chart: 2, 3, 1, 5, 4, 3, 5]

[Chart] پیام‌ها (7 روز گذشته)
[Bar Chart: 500, 600, 450, 700, 800, 650, 900]

[Chart] توزیع Ccoin
[Donut Chart: کاربر 1: 30%, کاربر 2: 20%, ...]
------------------------------------------------
```

#### 3.4. طراحی رابط دیسکورد
یه پیام با دکمه‌های تعاملی توی دیسکورد:

```
📊 پنل ادمین Ccoin
------------------------------------------------
👥 تعداد کاربرا: 150
💰 مجموع Ccoin: 10,000
💎 مجموع کریستال: 500
🏰 تعداد کلن‌ها: 10
🎯 تعداد کوئست‌ها: 20

[Button: 💰 مدیریت اقتصاد] [Button: 🏰 مدیریت کلن‌ها] [Button: 🎯 مدیریت کوئست‌ها]
[Button: 👥 مدیریت کاربرا] [Button: ⚙️ تنظیمات] [Button: 📜 لاگ‌ها]
[Button: 🌐 پنل وب]
------------------------------------------------
```

---

### 4. پیاده‌سازی کد

#### 4.1. نصب پکیج‌های مورد نیاز
برای پیاده‌سازی این پنل، به پکیج‌های زیر نیاز داریم:

```bash
npm install express ejs express-session discord-oauth2 sqlite3 chart.js tailwindcss discord.js
```

- **Express:** برای بک‌اند.
- **EJS:** برای رندر صفحات.
- **express-session:** برای مدیریت سشن‌ها.
- **discord-oauth2:** برای احراز هویت.
- **sqlite3:** برای دیتابیس.
- **Chart.js:** برای نمایش نمودارها.
- **Tailwind CSS:** برای طراحی UI.
- **discord.js:** برای ربات دیسکورد.

#### 4.2. ساختار پروژه
```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های پنل ادمین
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   └── bot.ts          # ربات دیسکورد
├── views/
│   ├── dashboard/
│   │   └── index.ejs   # داشبورد
│   ├── users/
│   │   ├── index.ejs   # لیست کاربرا
│   │   └── edit.ejs    # ویرایش کاربر
│   ├── economy/
│   │   └── index.ejs   # مدیریت اقتصاد
│   ├── clans/
│   │   ├── index.ejs   # لیست کلن‌ها
│   │   └── edit.ejs    # ویرایش کلن
│   ├── quests/
│   │   ├── index.ejs   # لیست کوئست‌ها
│   │   ├── create.ejs  # ایجاد کوئست
│   │   └── edit.ejs    # ویرایش کوئست
│   ├── logs/
│   │   └── index.ejs   # لاگ‌ها
│   ├── settings/
│   │   └── index.ejs   # تنظیمات
│   └── partials/
│       ├── header.ejs  # هدر
│       └── sidebar.ejs # نوار کناری
├── public/
│   ├── css/
│   │   └── styles.css  # فایل CSS (Tailwind)
│   └── js/
│       └── charts.js   # اسکریپت‌های Chart.js
├── package.json
└── .replit
```

#### 4.3. تنظیمات سرور (server/index.ts)
فایل اصلی سرور رو تنظیم می‌کنیم:

```typescript
import express from 'express';
import session from 'express-session';
import adminRoutes from './admin';
import { initDatabase } from './database';
import { startBot } from './bot';

const app = express();

// تنظیمات EJS
app.set('view engine', 'ejs');

// تنظیمات سشن
app.use(
  session({
    secret: 'your-secret-key',
    resave: false,
    saveUninitialized: false,
  })
);

// استاتیک کردن فایل‌های عمومی
app.use(express.static('public'));

// پارس کردن فرم‌ها
app.use(express.urlencoded({ extended: true }));

// راه‌اندازی دیتابیس
initDatabase();

// روت‌های پنل ادمین
app.use('/admin', adminRoutes);

// راه‌اندازی ربات دیسکورد
startBot();

app.listen(5000, () => {
  console.log('Server running on port 5000');
});
```

#### 4.4. روت‌های پنل ادمین (server/admin.ts)
فایل `admin.ts` رو برای مدیریت روت‌ها تنظیم می‌کنیم:

```typescript
import express from 'express';
import DiscordOauth2 from 'discord-oauth2';
import { getStats, getUser, getUsers, updateUser } from './storage';

const router = express.Router();
const oauth = new DiscordOauth2();

// میدلوِر برای چک کردن ورود
const ensureAuthenticated = (req, res, next) => {
  if (!req.session.user) {
    return res.redirect('/admin/login');
  }
  // چک کردن نقش ادمین
  const guild = req.session.guilds.find(g => g.id === 'YOUR_GUILD_ID');
  if (!guild || !guild.roles.includes('ADMIN_ROLE_ID')) {
    return res.status(403).send('Access Denied');
  }
  next();
};

// صفحه ورود
router.get('/login', (req, res) => {
  const redirectUri = 'https://DiscordBuddy.maxtincruiz.repl.co/admin/callback';
  const url = oauth.generateAuthUrl({
    clientId: 'YOUR_CLIENT_ID',
    redirectUri,
    scope: ['identify', 'guilds'],
  });
  res.redirect(url);
});

// کال‌بک ورود
router.get('/callback', async (req, res) => {
  const redirectUri = 'https://DiscordBuddy.maxtincruiz.repl.co/admin/callback';
  const token = await oauth.tokenRequest({
    clientId: 'YOUR_CLIENT_ID',
    clientSecret: 'YOUR_CLIENT_SECRET',
    code: req.query.code,
    grantType: 'authorization_code',
    redirectUri,
  });
  const user = await oauth.getUser(token.access_token);
  const guilds = await oauth.getUserGuilds(token.access_token);
  req.session.user = user;
  req.session.guilds = guilds;
  res.redirect('/admin/dashboard');
});

// خروج
router.get('/logout', (req, res) => {
  req.session.destroy();
  res.redirect('/admin/login');
});

// داشبورد
router.get('/dashboard', ensureAuthenticated, async (req, res) => {
  const stats = await getStats();
  res.render('dashboard/index', { user: req.session.user, stats });
});

// مدیریت کاربرا
router.get('/users', ensureAuthenticated, async (req, res) => {
  const users = await getUsers();
  res.render('users/index', { user: req.session.user, users });
});

// ویرایش کاربر
router.get('/users/edit/:id', ensureAuthenticated, async (req, res) => {
  const userData = await getUser(req.params.id);
  res.render('users/edit', { user: req.session.user, userData });
});

router.post('/users/edit/:id', ensureAuthenticated, async (req, res) => {
  const { ccoin, crystals, level, xp } = req.body;
  await updateUser(req.params.id, { ccoin, crystals, level, xp });
  res.redirect('/admin/users');
});

export default router;
```

#### 4.5. ربات دیسکورد (server/bot.ts)
فایل `bot.ts` رو برای مدیریت ربات و دکمه‌ها تنظیم می‌کنیم:

```typescript
import { Client, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { getStats } from './storage';

const client = new Client({ intents: ['Guilds', 'GuildMessages', 'MessageContent'] });

export async function startBot() {
  client.on('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
  });

  client.on('interactionCreate', async (interaction) => {
    if (!interaction.isCommand() && !interaction.isButton()) return;

    // چک کردن نقش ادمین
    const member = interaction.member;
    if (!member.roles.cache.has('ADMIN_ROLE_ID')) {
      return interaction.reply({ content: 'شما دسترسی به این دستور ندارید!', ephemeral: true });
    }

    if (interaction.isCommand() && interaction.commandName === 'admin') {
      const stats = await getStats();
      const embed = new EmbedBuilder()
        .setTitle('📊 پنل ادمین Ccoin')
        .setDescription(
          `👥 تعداد کاربرا: ${stats.totalUsers}\n` +
          `💰 مجموع Ccoin: ${stats.totalCcoin}\n` +
          `💎 مجموع کریستال: ${stats.totalCrystals}\n` +
          `🏰 تعداد کلن‌ها: ${stats.totalClans}\n` +
          `🎯 تعداد کوئست‌ها: ${stats.totalQuests}`
        )
        .setColor('#7289DA');

      const row1 = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('economy').setLabel('مدیریت اقتصاد').setStyle(ButtonStyle.Primary).setEmoji('💰'),
        new ButtonBuilder().setCustomId('clans').setLabel('مدیریت کلن‌ها').setStyle(ButtonStyle.Primary).setEmoji('🏰'),
        new ButtonBuilder().setCustomId('quests').setLabel('مدیریت کوئست‌ها').setStyle(ButtonStyle.Primary).setEmoji('🎯')
      );

      const row2 = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('users').setLabel('مدیریت کاربرا').setStyle(ButtonStyle.Primary).setEmoji('👥'),
        new ButtonBuilder().setCustomId('settings').setLabel('تنظیمات').setStyle(ButtonStyle.Primary).setEmoji('⚙️'),
        new ButtonBuilder().setCustomId('logs').setLabel('لاگ‌ها').setStyle(ButtonStyle.Primary).setEmoji('📜')
      );

      const row3 = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setLabel('پنل وب')
          .setStyle(ButtonStyle.Link)
          .setURL('https://DiscordBuddy.maxtincruiz.repl.co/admin')
          .setEmoji('🌐')
      );

      await interaction.reply({ embeds: [embed], components: [row1, row2, row3], ephemeral: true });
    }

    if (interaction.isButton()) {
      if (interaction.customId === 'economy') {
        await interaction.reply({ content: 'مدیریت اقتصاد: لطفاً مقدار Ccoin یا کریستال رو وارد کنید.', ephemeral: true });
      } else if (interaction.customId === 'clans') {
        await interaction.reply({ content: 'مدیریت کلن‌ها: لطفاً نام کلن رو وارد کنید.', ephemeral: true });
      } else if (interaction.customId === 'quests') {
        await interaction.reply({ content: 'مدیریت کوئست‌ها: لطفاً عنوان کوئست رو وارد کنید.', ephemeral: true });
      } else if (interaction.customId === 'users') {
        await interaction.reply({ content: 'مدیریت کاربرا: لطفاً آیدی کاربر رو وارد کنید.', ephemeral: true });
      } else if (interaction.customId === 'settings') {
        await interaction.reply({ content: 'تنظیمات: لطفاً پیشوند جدید رو وارد کنید.', ephemeral: true });
      } else if (interaction.customId === 'logs') {
        await interaction.reply({ content: 'لاگ‌ها: در حال نمایش لاگ‌های اخیر...', ephemeral: true });
      }
    }
  });

  client.login('YOUR_BOT_TOKEN');
}
```

#### 4.6. فایل‌های EJS
##### 4.6.1. داشبورد (views/dashboard/index.ejs)
فایل داشبورد رو با Tailwind CSS و Chart.js طراحی می‌کنیم:

```html
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>پنل ادمین - داشبورد</title>
  <link href="/css/styles.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-900 text-white">
  <%- include('../partials/sidebar', { active: 'dashboard' }) %>
  <div class="ml-64 p-6">
    <%- include('../partials/header') %>
    <h1 class="text-3xl font-bold mb-6">📊 داشبورد</h1>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">کل کاربرا</h2>
        <p class="text-2xl mt-2"><%= stats.totalUsers %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">کاربرای جدید (24 ساعت)</h2>
        <p class="text-2xl mt-2"><%= stats.newUsers24h %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">کل پیام‌ها</h2>
        <p class="text-2xl mt-2"><%= stats.totalMessages %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">دستورات اجرا‌شده</h2>
        <p class="text-2xl mt-2"><%= stats.commandsUsed %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">مجموع Ccoin</h2>
        <p class="text-2xl mt-2"><%= stats.totalCcoin %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">مجموع کریستال</h2>
        <p class="text-2xl mt-2"><%= stats.totalCrystals %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">تعداد کلن‌ها</h2>
        <p class="text-2xl mt-2"><%= stats.totalClans %></p>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold">تعداد کوئست‌ها</h2>
        <p class="text-2xl mt-2"><%= stats.totalQuests %></p>
      </div>
    </div>
    <div class="mt-6 bg-gray-800 p-4 rounded-lg shadow">
      <h2 class="text-xl font-semibold mb-4">وضعیت سرور</h2>
      <p>ربات: <span class="text-green-500">آنلاین ✅</span></p>
      <p>آپتایم: <%= stats.uptime %></p>
      <p>مصرف حافظه: <%= stats.memoryUsage %> MB</p>
    </div>
    <div class="mt-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">کاربرای جدید (7 روز گذشته)</h2>
        <canvas id="newUsersChart"></canvas>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">پیام‌ها (7 روز گذشته)</h2>
        <canvas id="messagesChart"></canvas>
      </div>
      <div class="bg-gray-800 p-4 rounded-lg shadow">
        <h2 class="text-xl font-semibold mb-4">توزیع Ccoin</h2>
        <canvas id="ccoinChart"></canvas>
      </div>
    </div>
  </div>
  <script src="/js/charts.js"></script>
  <script>
    const newUsersData = [2, 3, 1, 5, 4, 3, 5];
    const messagesData = [500, 600, 450, 700, 800, 650, 900];
    const ccoinData = [30, 20, 15, 10, 25];
    const ccoinLabels = ['کاربر 1', 'کاربر 2', 'کاربر 3', 'کاربر 4', 'بقیه'];
    drawCharts(newUsersData, messagesData, ccoinData, ccoinLabels);
  </script>
</body>
</html>
```

##### 4.6.2. نوار کناری (views/partials/sidebar.ejs)
نوار کناری برای ناوبری:

```html
<aside class="fixed top-0 left-0 w-64 h-full bg-gray-800 p-4">
  <div class="text-center mb-6">
    <img src="/logo.png" alt="Ccoin Bot" class="w-16 mx-auto">
    <h2 class="text-xl font-bold mt-2">Ccoin Bot</h2>
    <p class="text-gray-400">ادمین: <%= user.username %></p>
  </div>
  <nav>
    <a href="/admin/dashboard" class="block py-2 px-4 rounded <%= active === 'dashboard' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">📊 داشبورد</a>
    <a href="/admin/users" class="block py-2 px-4 rounded <%= active === 'users' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">👥 کاربرا</a>
    <a href="/admin/economy" class="block py-2 px-4 rounded <%= active === 'economy' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">💰 اقتصاد</a>
    <a href="/admin/clans" class="block py-2 px-4 rounded <%= active === 'clans' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">🏰 کلن‌ها</a>
    <a href="/admin/quests" class="block py-2 px-4 rounded <%= active === 'quests' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">🎯 کوئست‌ها</a>
    <a href="/admin/logs" class="block py-2 px-4 rounded <%= active === 'logs' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">📜 لاگ‌ها</a>
    <a href="/admin/settings" class="block py-2 px-4 rounded <%= active === 'settings' ? 'bg-blue-600' : 'hover:bg-gray-700' %>">⚙️ تنظیمات</a>
  </nav>
</aside>
```

##### 4.6.3. هدر (views/partials/header.ejs)
هدر برای نمایش اطلاعات ادمین و دکمه‌ها:

```html
<header class="bg-gray-800 p-4 flex justify-between items-center">
  <div>
    <span class="font-semibold"><%= user.username %></span>
    <span class="text-gray-400">(ادمین)</span>
  </div>
  <div class="flex space-x-4">
    <button id="theme-toggle" class="bg-gray-700 hover:bg-gray-600 text-white py-2 px-4 rounded">🌙 تم تیره</button>
    <a href="/admin/logout" class="bg-red-600 hover:bg-red-700 text-white py-2 px-4 rounded">خروج</a>
  </div>
</header>
<script>
  const themeToggle = document.getElementById('theme-toggle');
  themeToggle.addEventListener('click', () => {
    document.body.classList.toggle('dark');
    themeToggle.textContent = document.body.classList.contains('dark') ? '🌙 تم تیره' : '☀️ تم روشن';
  });
</script>
```

#### 4.7. فایل Chart.js (public/js/charts.js)
اسکریپت برای رندر نمودارها:

```javascript
function drawCharts(newUsersData, messagesData, ccoinData, ccoinLabels) {
  // نمودار کاربرای جدید
  const newUsersCtx = document.getElementById('newUsersChart').getContext('2d');
  new Chart(newUsersCtx, {
    type: 'line',
    data: {
      labels: ['6 روز پیش', '5 روز پیش', '4 روز پیش', '3 روز پیش', '2 روز پیش', 'دیروز', 'امروز'],
      datasets: [{
        label: 'کاربرای جدید',
        data: newUsersData,
        borderColor: '#3B82F6',
        fill: false,
      }],
    },
    options: {
      scales: {
        y: { beginAtZero: true },
      },
    },
  });

  // نمودار پیام‌ها
  const messagesCtx = document.getElementById('messagesChart').getContext('2d');
  new Chart(messagesCtx, {
    type: 'bar',
    data: {
      labels: ['6 روز پیش', '5 روز پیش', '4 روز پیش', '3 روز پیش', '2 روز پیش', 'دیروز', 'امروز'],
      datasets: [{
        label: 'پیام‌ها',
        data: messagesData,
        backgroundColor: '#3B82F6',
      }],
    },
    options: {
      scales: {
        y: { beginAtZero: true },
      },
    },
  });

  // نمودار توزیع Ccoin
  const ccoinCtx = document.getElementById('ccoinChart').getContext('2d');
  new Chart(ccoinCtx, {
    type: 'doughnut',
    data: {
      labels: ccoinLabels,
      datasets: [{
        label: 'توزیع Ccoin',
        data: ccoinData,
        backgroundColor: ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6'],
      }],
    },
  });
}
```

#### 4.8. فایل Tailwind CSS (public/css/styles.css)
برای استفاده از Tailwind CSS:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

body.dark {
  @apply bg-gray-900 text-white;
}

body:not(.dark) {
  @apply bg-gray-100 text-gray-900;
}
```

برای تولید فایل CSS:

```bash
npx tailwindcss -i ./public/css/input.css -o ./public/css/styles.css
```

#### 4.9. توابع دیتابیس (server/storage.ts)
یه نمونه از توابع دیتابیس برای دریافت آمار:

```typescript
import { db } from './database';

export async function getStats() {
  return new Promise((resolve, reject) => {
    db.get(
      'SELECT (SELECT COUNT(*) FROM users) as totalUsers, ' +
        '(SELECT COUNT(*) FROM users WHERE created_at >= ?) as newUsers24h, ' +
        '(SELECT SUM(messages_sent) FROM users) as totalMessages, ' +
        '(SELECT SUM(commands_used) FROM users) as commandsUsed, ' +
        '(SELECT SUM(ccoin) FROM users) as totalCcoin, ' +
        '(SELECT SUM(crystals) FROM users) as totalCrystals, ' +
        '(SELECT COUNT(*) FROM clans) as totalClans, ' +
        '(SELECT COUNT(*) FROM quests) as totalQuests',
      [new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()],
      (err, row) => {
        if (err) reject(err);
        resolve({
          totalUsers: row.totalUsers,
          newUsers24h: row.newUsers24h,
          totalMessages: row.totalMessages,
          commandsUsed: row.commandsUsed,
          totalCcoin: row.totalCcoin,
          totalCrystals: row.totalCrystals,
          totalClans: row.totalClans,
          totalQuests: row.totalQuests,
          uptime: '3 روز و 12 ساعت', // محاسبه آپتایم
          memoryUsage: (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2),
        });
      }
    );
  });
}

export async function getUsers() {
  return new Promise((resolve, reject) => {
    db.all('SELECT * FROM users', (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function getUser(userId) {
  return new Promise((resolve, reject) => {
    db.get('SELECT * FROM users WHERE user_id = ?', [userId], (err, row) => {
      if (err) reject(err);
      resolve(row);
    });
  });
}

export async function updateUser(userId, data) {
  return new Promise((resolve, reject) => {
    db.run(
      'UPDATE users SET ccoin = ?, crystals = ?, level = ?, xp = ? WHERE user_id = ?',
      [data.ccoin, data.crystals, data.level, data.xp, userId],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}
```

---

### 5. مستند برای هوش مصنوعی
#### مقدمه
این مستند برای طراحی و پیاده‌سازی یه پنل ادمین حرفه‌ای، زیبا، کاربرپسند، و پویا برای ربات Ccoin طراحی شده. این پنل هم یه رابط وب (با Express.js، EJS، Tailwind CSS، و Chart.js) داره و هم یه رابط دیسکورد (با discord.js و دکمه‌های تعاملی).

#### قابلیت‌ها
- **داشبورد:** نمایش آمار کلی (کاربرا، پیام‌ها، Ccoin، کریستال، کلن‌ها، کوئست‌ها)، وضعیت سرور، و نمودارها (کاربرای جدید، پیام‌ها، توزیع Ccoin).
- **مدیریت کاربرا:** لیست کاربرا، ویرایش/حذف کاربر، اضافه کردن کاربر.
- **مدیریت اقتصاد:** آمار اقتصادی، مدیریت تراکنش‌ها، اضافه/حذف Ccoin و کریستال.
- **مدیریت کلن‌ها:** لیست کلن‌ها، ایجاد/ویرایش/حذف کلن.
- **مدیریت کوئست‌ها:** لیست کوئست‌ها، ایجاد/ویرایش/حذف کوئست.
- **لاگ‌ها:** نمایش لاگ فعالیت‌ها و دستورات.
- **تنظیمات:** تنظیمات ربات (پیشوند، نرخ تبدیل) و پنل (تم، زبان).
- **رابط دیسکورد:** دستور `/admin` با دکمه‌های تعاملی برای مدیریت اقتصاد، کلن‌ها، کوئست‌ها، کاربرا، تنظیمات، لاگ‌ها، و لینک به پنل وب.

#### طراحی UI
- **وب:**  
  - نوار کناری با آیکون‌ها برای ناوبری.
  - هدر با نام ادمین، دکمه تغییر تم، و دکمه خروج.
  - کارت‌ها برای نمایش آمار، جداول برای لیست‌ها، نمودارها برای داده‌های پویا.
  - تم تیره/روشن با Tailwind CSS.
- **دیسکورد:**  
  - پیام Embed با دکمه‌های تعاملی.
  - استفاده از ایموجی‌ها برای دکمه‌ها.
  - لینک به پنل وب.

#### تغییرات توی کد
1. **نصب پکیج‌ها:**  
   ```bash
   npm install express ejs express-session discord-oauth2 sqlite3 chart.js tailwindcss discord.js
   ```
2. **ساختار پروژه:**  
   فایل‌ها و پوشه‌ها طبق ساختار بالا ایجاد بشن.
3. **تنظیمات سرور:**  
   فایل `server/index.ts` برای راه‌اندازی سرور و ربات.
4. **روت‌های پنل:**  
   فایل `server/admin.ts` برای مدیریت روت‌ها و احراز هویت.
5. **ربات دیسکورد:**  
   فایل `server/bot.ts` برای دستور `/admin` و دکمه‌ها.
6. **فایل‌های EJS:**  
   فایل‌های `dashboard/index.ejs`, `partials/sidebar.ejs`, `partials/header.ejs` برای رندر UI.
7. **نمودارها:**  
   فایل `public/js/charts.js` برای رندر نمودارها.
8. **Tailwind CSS:**  
   فایل `public/css/styles.css` برای استایل‌ها.

#### نتیجه‌گیری
این پنل ادمین حرفه‌ای به ادمین‌ها اجازه می‌ده هم از طریق وب و هم از داخل دیسکورد ربات رو مدیریت کنن، با یه UI زیبا، پویا، و کاربرپسند.

---

اگه سؤالی داری یا می‌خوای روی یه بخش خاص بیشتر کار کنیم، بگو تا کمکت کنم! 😊🚀