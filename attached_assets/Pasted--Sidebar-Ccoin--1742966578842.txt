### مستندسازی جامع و دقیق منوی کناری (Sidebar) پنل ادمین ربات دیسکورد Ccoin با دسته‌بندی‌های مشخص

#### مقدمه
این مستند به تحلیل و مستندسازی منوی کناری (Sidebar) پنل ادمین ربات دیسکورد Ccoin می‌پردازد. با توجه به توضیحات ارائه‌شده، بخش‌های منو به دسته‌بندی‌های مشخص تقسیم شده‌اند: **اصلی**، **اقتصاد**، **گیم‌پلی**، **اجتماعی**، **سیستم**، و **توسعه**. هر بخش به‌صورت دقیق توضیح داده می‌شود، نحوه مدیریت آن‌ها در پنل ادمین شرح داده می‌شود، و کدهای لازم برای پیاده‌سازی هر بخش با جزئیات کامل ارائه و مستندسازی می‌شود. هدف این است که یک پنل ادمین جامع و حرفه‌ای برای مدیریت تمام جنبه‌های ربات دیسکورد Ccoin ایجاد شود.

---

### 1. دسته‌بندی و تحلیل منوی کناری (Sidebar)

#### 1.1. دسته‌بندی‌های منوی کناری
بر اساس توضیحات شما، منوی کناری به دسته‌بندی‌های زیر تقسیم می‌شود:

1. **اصلی:**
   - دشبورد (📊)
   - کاربران (👥)

2. **اقتصاد:**
   - تراکنش‌ها (💸)
   - سهام (📈)
   - لاتاری (🎰)
   - مدیریت اقتصاد (💰)
   - تنظیمات سرقت (🔒)

3. **گیم‌پلی:**
   - کلن‌ها (🏰)
   - آیتم‌ها (🛠️)
   - ماموریت‌ها (🎯)
   - بازی‌ها (🎮)
   - جایزه‌ها (🎁)
   - فروشگاه (🛒)

4. **اجتماعی:**
   - سیستم دوستی (🤝)
   - کاربران بلاک‌شده (🚫)
   - چت‌های خصوصی (💬)
   - رتبه‌بندی (🏆)
   - رای‌گیری (🗳️)
   - دعوت‌ها (📩)

5. **سیستم:**
   - لاگ‌ها (📜)
   - تنظیمات (⚙️)
   - وضعیت ربات (🖥️)
   - پشتیبان‌گیری (💾)

6. **توسعه:**
   - API (🔗)
   - مستندات (📖)
   - وب‌هوک (🪝)

#### 1.2. هدف کلی منو
- **دسترسی سریع:** منوی کناری به ادمین امکان می‌دهد به‌سرعت به بخش‌های مختلف پنل دسترسی پیدا کند.
- **مدیریت جامع:** هر دسته‌بندی برای مدیریت یک جنبه خاص از ربات (مانند اقتصاد، گیم‌پلی، و اجتماعی) طراحی شده است.
- **طراحی کاربرپسند:** استفاده از آیکون‌ها و دسته‌بندی‌های مشخص باعث می‌شود منو جذاب و قابل‌فهم باشد.

---

### 2. توضیحات و مدیریت هر بخش

#### 2.1. دسته‌بندی اصلی

##### 2.1.1. دشبورد (📊)
###### توضیح:
دشبورد صفحه اصلی پنل ادمین است که یک نمای کلی از وضعیت ربات ارائه می‌دهد. این بخش شامل کارت‌های آماری، نمودارها، و اطلاعات کلی مانند تعداد کاربرها، کلن‌ها، سی‌کوین در گردش، و وضعیت سرور است.

###### نحوه مدیریت:
- **نمایش آمار:** نمایش تعداد کاربرها، کلن‌ها، سی‌کوین، کریستال، و وضعیت لاتاری و سهام.
- **نمودارها:** نمایش نمودارهای میله‌ای و دایره‌ای برای رشد سی‌کوین، فعالیت کاربران، و فروش محصولات.
- **وضعیت سرور:** نمایش مصرف CPU و RAM و وضعیت ربات (روشن/خاموش).
- **قابلیت‌ها:**
  - مشاهده سریع آمار.
  - نمودارهای تعاملی با قابلیت زوم و فیلتر.

###### کد پیاده‌سازی:
```javascript
// server/routes/dashboard.js
const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

// مدل‌های دیتابیس
const User = mongoose.model('User', new mongoose.Schema({
  discordId: String,
  ccoin: Number,
  crystal: Number,
  messages: Number,
  voiceActivity: Number,
}));
const Clan = mongoose.model('Clan', new mongoose.Schema({
  name: String,
  members: [String],
  ccoin: Number,
}));

// مسیر دشبورد
router.get('/stats', async (req, res) => {
  try {
    const userCount = await User.countDocuments();
    const clanCount = await Clan.countDocuments();
    const totalCcoin = await User.aggregate([
      { $group: { _id: null, total: { $sum: "$ccoin" } } }
    ]);
    const totalCrystal = await User.aggregate([
      { $group: { _id: null, total: { $sum: "$crystal" } } }
    ]);

    res.json({
      users: userCount,
      clans: clanCount,
      ccoin: totalCcoin[0]?.total || 0,
      crystal: totalCrystal[0]?.total || 0,
    });
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت آمار' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const [stats, setStats] = useState({ users: 0, clans: 0, ccoin: 0, crystal: 0 });
  const [chartData, setChartData] = useState({ labels: [], datasets: [] });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get('/api/dashboard/stats');
        setStats(response.data);
      } catch (error) {
        console.error('Error fetching stats:', error);
      }
    };

    const fetchChartData = async () => {
      // فرض می‌کنیم داده‌های نمودار از API دریافت می‌شوند
      setChartData({
        labels: ['کاربرها', 'کلن‌ها', 'سی‌کوین', 'کریستال'],
        datasets: [
          {
            label: 'آمار کلی',
            data: [stats.users, stats.clans, stats.ccoin, stats.crystal],
            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
          },
        ],
      });
    };

    fetchStats();
    fetchChartData();
  }, [stats]);

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">📊 دشبورد</h1>
      <div className="grid grid-cols-4 gap-4 mb-6">
        <div className="p-4 bg-gray-800 rounded-lg">
          <h2 className="text-lg font-semibold">کاربرها</h2>
          <p className="text-2xl">{stats.users}</p>
        </div>
        <div className="p-4 bg-gray-800 rounded-lg">
          <h2 className="text-lg font-semibold">کلن‌ها</h2>
          <p className="text-2xl">{stats.clans}</p>
        </div>
        <div className="p-4 bg-gray-800 rounded-lg">
          <h2 className="text-lg font-semibold">سی‌کوین</h2>
          <p className="text-2xl">{stats.ccoin}</p>
        </div>
        <div className="p-4 bg-gray-800 rounded-lg">
          <h2 className="text-lg font-semibold">کریستال</h2>
          <p className="text-2xl">{stats.crystal}</p>
        </div>
      </div>
      <div className="bg-gray-800 p-4 rounded-lg">
        <Bar data={chartData} />
      </div>
    </div>
  );
};

export default Dashboard;
```

##### 2.1.2. کاربران (👥)
###### توضیح:
این بخش برای مدیریت کاربران سرور طراحی شده است. ادمین می‌تواند لیست کاربران، اطلاعات آن‌ها (مانند سی‌کوین، کریستال، و رتبه)، و فعالیت‌هایشان را مشاهده و ویرایش کند.

###### نحوه مدیریت:
- **نمایش:** جدول کاربران با ستون‌های نام، آیدی، سی‌کوین، کریستال، بانک، پول نقد، رتبه، پیام‌ها، و فعالیت صوتی.
- **جستجو و فیلتر:** امکان جستجو بر اساس نام یا آیدی و فیلتر بر اساس رتبه.
- **ویرایش:** تغییر سی‌کوین، کریستال، یا نقش کاربر (Leader, Co-Leader, Elder, Member).
- **حذف و اضافه:** حذف کاربر یا اضافه کردن کاربر جدید.
- **رتبه‌بندی:** نمایش Top 10 کاربر بر اساس سی‌کوین، کریستال، یا پیام‌ها.

###### کد پیاده‌سازی:
```javascript
// server/routes/users.js
const express = require('express');
const router = express.Router();

// مسیر کاربران
router.get('/', async (req, res) => {
  try {
    const users = await User.find();
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت کاربران' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { ccoin, crystal, role } = req.body;
    await User.findOneAndUpdate(
      { discordId: req.params.id },
      { ccoin, crystal, role },
      { new: true }
    );
    res.json({ message: 'کاربر به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی کاربر' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await User.findOneAndDelete({ discordId: req.params.id });
    res.json({ message: 'کاربر حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف کاربر' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Users = () => {
  const [users, setUsers] = useState([]);
  const [search, setSearch] = useState('');

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get('/api/users');
        setUsers(response.data);
      } catch (error) {
        console.error('Error fetching users:', error);
      }
    };
    fetchUsers();
  }, []);

  const handleEdit = async (id, field, value) => {
    try {
      await axios.put(`/api/users/${id}`, { [field]: value });
      setUsers(users.map(user => (user.discordId === id ? { ...user, [field]: value } : user)));
    } catch (error) {
      console.error('Error updating user:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟')) {
      try {
        await axios.delete(`/api/users/${id}`);
        setUsers(users.filter(user => user.discordId !== id));
      } catch (error) {
        console.error('Error deleting user:', error);
      }
    }
  };

  const filteredUsers = users.filter(user =>
    user.discordId.includes(search) || user.name?.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">👥 کاربران</h1>
      <input
        type="text"
        placeholder="جستجو..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-4 p-2 rounded bg-gray-800 text-white w-full"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>آیدی</th>
            <th>سی‌کوین</th>
            <th>کریستال</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {filteredUsers.map(user => (
            <tr key={user.discordId}>
              <td>{user.name || 'نامشخص'}</td>
              <td>{user.discordId}</td>
              <td>
                <input
                  type="number"
                  value={user.ccoin}
                  onChange={(e) => handleEdit(user.discordId, 'ccoin', e.target.value)}
                  className="p-1 rounded bg-gray-700 text-white"
                />
              </td>
              <td>
                <input
                  type="number"
                  value={user.crystal}
                  onChange={(e) => handleEdit(user.discordId, 'crystal', e.target.value)}
                  className="p-1 rounded bg-gray-700 text-white"
                />
              </td>
              <td>
                <button onClick={() => handleDelete(user.discordId)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Users;
```

#### 2.2. دسته‌بندی اقتصاد

##### 2.2.1. تراکنش‌ها (💸)
###### توضیح:
این بخش برای نمایش و مدیریت تراکنش‌های مالی (مانند خرید، انتقال، و سرقت) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول تراکنش‌ها با ستون‌های کاربر، نوع (خرید، انتقال، سرقت)، مقدار، و تاریخ.
- **فیلتر:** فیلتر بر اساس نوع، کاربر، یا تاریخ.
- **آمار:** نمایش مجموع سی‌کوین و کریستال در گردش.

###### کد پیاده‌سازی:
```javascript
// server/routes/transactions.js
const Transaction = mongoose.model('Transaction', new mongoose.Schema({
  userId: String,
  type: String,
  amount: Number,
  date: { type: Date, default: Date.now },
}));

router.get('/', async (req, res) => {
  try {
    const transactions = await Transaction.find().populate('userId', 'name');
    res.json(transactions);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت تراکنش‌ها' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Transactions = () => {
  const [transactions, setTransactions] = useState([]);
  const [filter, setFilter] = useState('');

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get('/api/transactions');
        setTransactions(response.data);
      } catch (error) {
        console.error('Error fetching transactions:', error);
      }
    };
    fetchTransactions();
  }, []);

  const filteredTransactions = transactions.filter(tx =>
    tx.type.toLowerCase().includes(filter.toLowerCase())
  );

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">💸 تراکنش‌ها</h1>
      <input
        type="text"
        placeholder="فیلتر بر اساس نوع..."
        value={filter}
        onChange={(e) => setFilter(e.target.value)}
        className="mb-4 p-2 rounded bg-gray-800 text-white w-full"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>کاربر</th>
            <th>نوع</th>
            <th>مقدار</th>
            <th>تاریخ</th>
          </tr>
        </thead>
        <tbody>
          {filteredTransactions.map(tx => (
            <tr key={tx._id}>
              <td>{tx.userId?.name || 'نامشخص'}</td>
              <td>{tx.type}</td>
              <td>{tx.amount}</td>
              <td>{new Date(tx.date).toLocaleString('fa-IR')}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Transactions;
```

##### 2.2.2. سهام (📈)
###### توضیح:
این بخش برای مدیریت سیستم سهام طراحی شده است که کاربران می‌توانند در آن سرمایه‌گذاری کنند و سود دریافت کنند.

###### نحوه مدیریت:
- **نمایش:** جدول سهام با ستون‌های کاربر، مقدار سرمایه‌گذاری، سود، و تاریخ.
- **ایجاد:** ایجاد سهام جدید با نرخ سود مشخص.
- **ویرایش:** تغییر نرخ سود یا مقدار سرمایه‌گذاری.
- **حذف:** حذف سهام.

###### کد پیاده‌سازی:
```javascript
// server/routes/stocks.js
const Stock = mongoose.model('Stock', new mongoose.Schema({
  userId: String,
  amount: Number,
  profitRate: Number,
  date: { type: Date, default: Date.now },
}));

router.get('/', async (req, res) => {
  try {
    const stocks = await Stock.find().populate('userId', 'name');
    res.json(stocks);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت سهام' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { userId, amount, profitRate } = req.body;
    const stock = new Stock({ userId, amount, profitRate });
    await stock.save();
    res.json({ message: 'سهام ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد سهام' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Stocks = () => {
  const [stocks, setStocks] = useState([]);
  const [newStock, setNewStock] = useState({ userId: '', amount: 0, profitRate: 0 });

  useEffect(() => {
    const fetchStocks = async () => {
      try {
        const response = await axios.get('/api/stocks');
        setStocks(response.data);
      } catch (error) {
        console.error('Error fetching stocks:', error);
      }
    };
    fetchStocks();
  }, []);

  const handleAddStock = async () => {
    try {
      await axios.post('/api/stocks', newStock);
      setStocks([...stocks, newStock]);
      setNewStock({ userId: '', amount: 0, profitRate: 0 });
    } catch (error) {
      console.error('Error adding stock:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">📈 سهام</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="آیدی کاربر"
          value={newStock.userId}
          onChange={(e) => setNewStock({ ...newStock, userId: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="مقدار سرمایه‌گذاری"
          value={newStock.amount}
          onChange={(e) => setNewStock({ ...newStock, amount: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="نرخ سود"
          value={newStock.profitRate}
          onChange={(e) => setNewStock({ ...newStock, profitRate: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <button onClick={handleAddStock} className="bg-blue-500 text-white p-2 rounded">
          افزودن سهام
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>کاربر</th>
            <th>مقدار</th>
            <th>نرخ سود</th>
            <th>تاریخ</th>
          </tr>
        </thead>
        <tbody>
          {stocks.map(stock => (
            <tr key={stock._id}>
              <td>{stock.userId?.name || 'نامشخص'}</td>
              <td>{stock.amount}</td>
              <td>{stock.profitRate}%</td>
              <td>{new Date(stock.date).toLocaleString('fa-IR')}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Stocks;
```

##### 2.2.3. لاتاری (🎰)
###### توضیح:
این بخش برای مدیریت سیستم لاتاری طراحی شده است که کاربران می‌توانند با خرید بلیط در قرعه‌کشی شرکت کنند.

###### نحوه مدیریت:
- **نمایش:** جدول لاتاری‌ها با ستون‌های تاریخ، جایزه، برنده، و تعداد شرکت‌کنندگان.
- **ایجاد:** ایجاد لاتاری جدید با جایزه مشخص.
- **ویرایش:** تغییر جایزه یا تعداد شرکت‌کنندگان.
- **حذف:** حذف لاتاری.
- **قرعه‌کشی:** انتخاب برنده به‌صورت تصادفی.

###### کد پیاده‌سازی:
```javascript
// server/routes/lottery.js
const Lottery = mongoose.model('Lottery', new mongoose.Schema({
  prize: Number,
  participants: [String],
  winner: String,
  date: { type: Date, default: Date.now },
}));

router.get('/', async (req, res) => {
  try {
    const lotteries = await Lottery.find();
    res.json(lotteries);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت لاتاری‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { prize } = req.body;
    const lottery = new Lottery({ prize, participants: [] });
    await lottery.save();
    res.json({ message: 'لاتاری ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد لاتاری' });
  }
});

router.post('/:id/draw', async (req, res) => {
  try {
    const lottery = await Lottery.findById(req.params.id);
    if (!lottery.participants.length) {
      return res.status(400).json({ error: 'هیچ شرکت‌کننده‌ای وجود ندارد' });
    }
    const winner = lottery.participants[Math.floor(Math.random() * lottery.participants.length)];
    lottery.winner = winner;
    await lottery.save();
    res.json({ message: 'قرعه‌کشی انجام شد', winner });
  } catch (error) {
    res.status(500).json({ error: 'خطا در قرعه‌کشی' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Lottery = () => {
  const [lotteries, setLotteries] = useState([]);
  const [newLottery, setNewLottery] = useState({ prize: 0 });

  useEffect(() => {
    const fetchLotteries = async () => {
      try {
        const response = await axios.get('/api/lottery');
        setLotteries(response.data);
      } catch (error) {
        console.error('Error fetching lotteries:', error);
      }
    };
    fetchLotteries();
  }, []);

  const handleAddLottery = async () => {
    try {
      await axios.post('/api/lottery', newLottery);
      setLotteries([...lotteries, newLottery]);
      setNewLottery({ prize: 0 });
    } catch (error) {
      console.error('Error adding lottery:', error);
    }
  };

  const handleDraw = async (id) => {
    try {
      const response = await axios.post(`/api/lottery/${id}/draw`);
      setLotteries(lotteries.map(lottery => (lottery._id === id ? { ...lottery, winner: response.data.winner } : lottery)));
    } catch (error) {
      console.error('Error drawing lottery:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🎰 لاتاری</h1>
      <div className="mb-4">
        <input
          type="number"
          placeholder="جایزه"
          value={newLottery.prize}
          onChange={(e) => setNewLottery({ ...newLottery, prize: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <button onClick={handleAddLottery} className="bg-blue-500 text-white p-2 rounded">
          ایجاد لاتاری
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>جایزه</th>
            <th>شرکت‌کنندگان</th>
            <th>برنده</th>
            <th>تاریخ</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {lotteries.map(lottery => (
            <tr key={lottery._id}>
              <td>{lottery.prize}</td>
              <td>{lottery.participants.length}</td>
              <td>{lottery.winner || 'مشخص نشده'}</td>
              <td>{new Date(lottery.date).toLocaleString('fa-IR')}</td>
              <td>
                <button onClick={() => handleDraw(lottery._id)} className="bg-green-500 text-white p-2 rounded">
                  قرعه‌کشی
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Lottery;
```

##### 2.2.4. مدیریت اقتصاد (💰)
###### توضیح:
این بخش برای مدیریت کلی اقتصاد ربات (مانند نرخ تبدیل، محدودیت‌ها، و تنظیمات کلی) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** نمایش نرخ تبدیل سی‌کوین به کریستال، مجموع سی‌کوین و کریستال در گردش.
- **تنظیمات:** تغییر نرخ تبدیل، محدودیت انتقال، و فعال/غیرفعال کردن سرقت.
- **آمار:** نمایش نمودار تراکنش‌ها (روزانه، هفتگی، ماهانه).

###### کد پیاده‌سازی:
```javascript
// server/routes/economy.js
const EconomySettings = mongoose.model('EconomySettings', new mongoose.Schema({
  conversionRate: Number,
  transferLimit: Number,
  robberyEnabled: Boolean,
}));

router.get('/settings', async (req, res) => {
  try {
    const settings = await EconomySettings.findOne();
    res.json(settings || { conversionRate: 0, transferLimit: 0, robberyEnabled: false });
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت تنظیمات اقتصاد' });
  }
});

router.put('/settings', async (req, res) => {
  try {
    const { conversionRate, transferLimit, robberyEnabled } = req.body;
    await EconomySettings.findOneAndUpdate({}, { conversionRate, transferLimit, robberyEnabled }, { upsert: true });
    res.json({ message: 'تنظیمات اقتصاد به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی تنظیمات اقتصاد' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const EconomyManagement = () => {
  const [settings, setSettings] = useState({ conversionRate: 0, transferLimit: 0, robberyEnabled: false });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get('/api/economy/settings');
        setSettings(response.data);
      } catch (error) {
        console.error('Error fetching economy settings:', error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdate = async () => {
    try {
      await axios.put('/api/economy/settings', settings);
      alert('تنظیمات با موفقیت به‌روزرسانی شد');
    } catch (error) {
      console.error('Error updating economy settings:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">💰 مدیریت اقتصاد</h1>
      <div className="bg-gray-800 p-4 rounded-lg">
        <div className="mb-4">
          <label className="block mb-2">نرخ تبدیل (سی‌کوین به کریستال):</label>
          <input
            type="number"
            value={settings.conversionRate}
            onChange={(e) => setSettings({ ...settings, conversionRate: e.target.value })}
            className="p-2 rounded bg-gray-700 text-white w-full"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2">محدودیت انتقال:</label>
          <input
            type="number"
            value={settings.transferLimit}
            onChange={(e) => setSettings({ ...settings, transferLimit: e.target.value })}
            className="p-2 rounded bg-gray-700 text-white w-full"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2">فعال کردن سرقت:</label>
          <input
            type="checkbox"
            checked={settings.robberyEnabled}
            onChange={(e) => setSettings({ ...settings, robberyEnabled: e.target.checked })}
          />
        </div>
        <button onClick={handleUpdate} className="bg-blue-500 text-white p-2 rounded">
          ذخیره تنظیمات
        </button>
      </div>
    </div>
  );
};

export default EconomyManagement;
```

##### 2.2.5. تنظیمات سرقت (🔒)
###### توضیح:
این بخش برای مدیریت تنظیمات سرقت (مانند شانس موفقیت و محدودیت‌ها) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** نمایش شانس سرقت و محدودیت‌های فعلی.
- **تنظیمات:** تغییر شانس سرقت (مثلاً 40%) و فعال/غیرفعال کردن سرقت.
- **آمار:** نمایش تعداد سرقت‌های موفق و ناموفق.

###### کد پیاده‌سازی:
```javascript
// server/routes/robbery.js
const RobberySettings = mongoose.model('RobberySettings', new mongoose.Schema({
  chance: Number,
  enabled: Boolean,
}));

router.get('/settings', async (req, res) => {
  try {
    const settings = await RobberySettings.findOne();
    res.json(settings || { chance: 40, enabled: true });
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت تنظیمات سرقت' });
  }
});

router.put('/settings', async (req, res) => {
  try {
    const { chance, enabled } = req.body;
    await RobberySettings.findOneAndUpdate({}, { chance, enabled }, { upsert: true });
    res.json({ message: 'تنظیمات سرقت به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی تنظیمات سرقت' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const RobberySettings = () => {
  const [settings, setSettings] = useState({ chance: 40, enabled: true });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get('/api/robbery/settings');
        setSettings(response.data);
      } catch (error) {
        console.error('Error fetching robbery settings:', error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdate = async () => {
    try {
      await axios.put('/api/robbery/settings', settings);
      alert('تنظیمات با موفقیت به‌روزرسانی شد');
    } catch (error) {
      console.error('Error updating robbery settings:', error);
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🔒 تنظیمات سرقت</h1>
      <div className="bg-gray-800 p-4 rounded-lg">
        <div className="mb-4">
          <label className="block mb-2">شانس سرقت (%):</label>
          <input
            type="number"
            value={settings.chance}
            onChange={(e) => setSettings({ ...settings, chance: e.target.value })}
            className="p-2 rounded bg-gray-700 text-white w-full"
          />
        </div>
        <div className="mb-4">
          <label className="block mb-2">فعال کردن سرقت:</label>
          <input
            type="checkbox"
            checked={settings.enabled}
            onChange={(e) => setSettings({ ...settings, enabled: e.target.checked })}
          />
        </div>
        <button onClick={handleUpdate} className="bg-blue-500 text-white p-2 rounded">
          ذخیره تنظیمات
        </button>
      </div>
    </div>
  );
};

export default RobberySettings;
```

#### 2.3. دسته‌بندی گیم‌پلی

##### 2.3.1. کلن‌ها (🏰)
###### توضیح:
این بخش برای مدیریت کلن‌ها طراحی شده است. ادمین می‌تواند کلن‌ها را ایجاد، ویرایش، یا حذف کند و نقش‌های اعضا را مدیریت کند.

###### نحوه مدیریت:
- **نمایش:** جدول کلن‌ها با ستون‌های نام، آیدی، اعضا، سی‌کوین کلن، و نقش‌ها.
- **ایجاد:** ایجاد کلن جدید با هزینه 10,000 سی‌کوین.
- **ویرایش:** تغییر نام، اعضا، سی‌کوین، یا نقش‌ها.
- **حذف:** حذف کلن.
- **مدیریت نقش‌ها:** تغییر نقش اعضا (Leader, Co-Leader, Elder, Member).

###### کد پیاده‌سازی:
```javascript
// server/routes/clans.js
router.get('/', async (req, res) => {
  try {
    const clans = await Clan.find();
    res.json(clans);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت کلن‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, members } = req.body;
    const clan = new Clan({ name, members, ccoin: 0 });
    await clan.save();
    res.json({ message: 'کلن ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد کلن' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, members, ccoin } = req.body;
    await Clan.findByIdAndUpdate(req.params.id, { name, members, ccoin });
    res.json({ message: 'کلن به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی کلن' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Clan.findByIdAndDelete(req.params.id);
    res.json({ message: 'کلن حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف کلن' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Clans = () => {
  const [clans, setClans] = useState([]);
  const [newClan, setNewClan] = useState({ name: '', members: '' });

  useEffect(() => {
    const fetchClans = async () => {
      try {
        const response = await axios.get('/api/clans');
        setClans(response.data);
      } catch (error) {
        console.error('Error fetching clans:', error);
      }
    };
    fetchClans();
  }, []);

  const handleAddClan = async () => {
    try {
      await axios.post('/api/clans', { ...newClan, members: newClan.members.split(',') });
      setClans([...clans, newClan]);
      setNewClan({ name: '', members: '' });
    } catch (error) {
      console.error('Error adding clan:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این کلن را حذف کنید؟')) {
      try {
        await axios.delete(`/api/clans/${id}`);
        setClans(clans.filter(clan => clan._id !== id));
      } catch (error) {
        console.error('Error deleting clan:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🏰 کلن‌ها</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام کلن"
          value={newClan.name}
          onChange={(e) => setNewClan({ ...newClan, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="text"
          placeholder="اعضا (با کاما جدا کنید)"
          value={newClan.members}
          onChange={(e) => setNewClan({ ...newClan, members: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <button onClick={handleAddClan} className="bg-blue-500 text-white p-2 rounded">
          ایجاد کلن
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>اعضا</th>
            <th>سی‌کوین</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {clans.map(clan => (
            <tr key={clan._id}>
              <td>{clan.name}</td>
              <td>{clan.members.join(', ')}</td>
              <td>{clan.ccoin}</td>
              <td>
                <button onClick={() => handleDelete(clan._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Clans;
```

##### 2.3.2. آیتم‌ها (🛠️)
###### توضیح:
این بخش برای مدیریت آیتم‌های بازی (مانند کلید جعبه مرموز) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول آیتم‌ها با ستون‌های نام، توضیحات، قیمت، و موجودی.
- **ایجاد:** اضافه کردن آیتم جدید.
- **ویرایش:** تغییر قیمت یا موجودی.
- **حذف:** حذف آیتم.

###### کد پیاده‌سازی:
```javascript
// server/routes/items.js
const Item = mongoose.model('Item', new mongoose.Schema({
  name: String,
  description: String,
  price: Number,
  stock: Number,
}));

router.get('/', async (req, res) => {
  try {
    const items = await Item.find();
    res.json(items);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت آیتم‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, description, price, stock } = req.body;
    const item = new Item({ name, description, price, stock });
    await item.save();
    res.json({ message: 'آیتم ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد آیتم' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, description, price, stock } = req.body;
    await Item.findByIdAndUpdate(req.params.id, { name, description, price, stock });
    res.json({ message: 'آیتم به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی آیتم' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Item.findByIdAndDelete(req.params.id);
    res.json({ message: 'آیتم حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف آیتم' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Items = () => {
  const [items, setItems] = useState([]);
  const [newItem, setNewItem] = useState({ name: '', description: '', price: 0, stock: 0 });

  useEffect(() => {
    const fetchItems = async () => {
      try {
        const response = await axios.get('/api/items');
        setItems(response.data);
      } catch (error) {
        console.error('Error fetching items:', error);
      }
    };
    fetchItems();
  }, []);

  const handleAddItem = async () => {
    try {
      await axios.post('/api/items', newItem);
      setItems([...items, newItem]);
      setNewItem({ name: '', description: '', price: 0, stock: 0 });
    } catch (error) {
      console.error('Error adding item:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این آیتم را حذف کنید؟')) {
      try {
        await axios.delete(`/api/items/${id}`);
        setItems(items.filter(item => item._id !== id));
      } catch (error) {
        console.error('Error deleting item:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🛠️ آیتم‌ها</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام آیتم"
          value={newItem.name}
          onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="text"
          placeholder="توضیحات"
          value={newItem.description}
          onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="قیمت"
          value={newItem.price}
          onChange={(e) => setNewItem({ ...newItem, price: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="موجودی"
          value={newItem.stock}
          onChange={(e) => setNewItem({ ...newItem, stock: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <button onClick={handleAddItem} className="bg-blue-500 text-white p-2 rounded">
          افزودن آیتم
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>توضیحات</th>
            <th>قیمت</th>
            <th>موجودی</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {items.map(item => (
            <tr key={item._id}>
              <td>{item.name}</td>
              <td>{item.description}</td>
              <td>{item.price}</td>
              <td>{item.stock}</td>
              <td>
                <button onClick={() => handleDelete(item._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Items;
```

##### 2.3.3. ماموریت‌ها (🎯)
###### توضیح:
این بخش برای مدیریت ماموریت‌ها (کوئست‌ها) طراحی شده است که کاربران می‌توانند با انجام آن‌ها جوایزی دریافت کنند.

###### نحوه مدیریت:
- **نمایش:** جدول ماموریت‌ها با ستون‌های نام، توضیحات، جایزه، و وضعیت.
- **ایجاد:** اضافه کردن ماموریت جدید.
- **ویرایش:** تغییر جایزه، توضیحات، یا وضعیت.
- **حذف:** حذف ماموریت.
- **آمار:** نمایش تعداد ماموریت‌های تکمیل‌شده.

###### کد پیاده‌سازی:
```javascript
// server/routes/quests.js
const Quest = mongoose.model('Quest', new mongoose.Schema({
  name: String,
  description: String,
  reward: Number,
  status: String,
}));

router.get('/', async (req, res) => {
  try {
    const quests = await Quest.find();
    res.json(quests);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت ماموریت‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, description, reward, status } = req.body;
    const quest = new Quest({ name, description, reward, status });
    await quest.save();
    res.json({ message: 'ماموریت ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد ماموریت' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, description, reward, status } = req.body;
    await Quest.findByIdAndUpdate(req.params.id, { name, description, reward, status });
    res.json({ message: 'ماموریت به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی ماموریت' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Quest.findByIdAndDelete(req.params.id);
    res.json({ message: 'ماموریت حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف ماموریت' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Quests = () => {
  const [quests, setQuests] = useState([]);
  const [newQuest, setNewQuest] = useState({ name: '', description: '', reward: 0, status: 'فعال' });

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const response = await axios.get('/api/quests');
        setQuests(response.data);
      } catch (error) {
        console.error('Error fetching quests:', error);
      }
    };
    fetchQuests();
  }, []);

  const handleAddQuest = async () => {
    try {
      await axios.post('/api/quests', newQuest);
      setQuests([...quests, newQuest]);
      setNewQuest({ name: '', description: '', reward: 0, status: 'فعال' });
    } catch (error) {
      console.error('Error adding quest:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این ماموریت را حذف کنید؟')) {
      try {
        await axios.delete(`/api/quests/${id}`);
        setQuests(quests.filter(quest => quest._id !== id));
      } catch (error) {
        console.error('Error deleting quest:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🎯 ماموریت‌ها</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام ماموریت"
          value={newQuest.name}
          onChange={(e) => setNewQuest({ ...newQuest, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="text"
          placeholder="توضیحات"
          value={newQuest.description}
          onChange={(e) => setNewQuest({ ...newQuest, description: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="جایزه"
          value={newQuest.reward}
          onChange={(e) => setNewQuest({ ...newQuest, reward: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <select
          value={newQuest.status}
          onChange={(e) => setNewQuest({ ...newQuest, status: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        >
          <option value="فعال">فعال</option>
          <option value="غیرفعال">غیرفعال</option>
        </select>
        <button onClick={handleAddQuest} className="bg-blue-500 text-white p-2 rounded">
          افزودن ماموریت
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>توضیحات</th>
            <th>جایزه</th>
            <th>وضعیت</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {quests.map(quest => (
            <tr key={quest._id}>
              <td>{quest.name}</td>
              <td>{quest.description}</td>
              <td>{quest.reward}</td>
              <td>{quest.status}</td>
              <td>
                <button onClick={() => handleDelete(quest._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Quests;
```

##### 2.3.4. بازی‌ها (🎮)
###### توضیح:
این بخش برای مدیریت بازی‌های ربات (مانند حدس عدد) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول بازی‌ها با ستون‌های نام، توضیحات، جایزه، و وضعیت.
- **ایجاد:** اضافه کردن بازی جدید.
- **ویرایش:** تغییر جایزه یا قوانین.
- **حذف:** حذف بازی.
- **آمار:** نمایش تعداد بازی‌های انجام‌شده.

###### کد پیاده‌سازی:
```javascript
// server/routes/games.js
const Game = mongoose.model('Game', new mongoose.Schema({
  name: String,
  description: String,
  reward: Number,
  status: String,
}));

router.get('/', async (req, res) => {
  try {
    const games = await Game.find();
    res.json(games);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت بازی‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, description, reward, status } = req.body;
    const game = new Game({ name, description, reward, status });
    await game.save();
    res.json({ message: 'بازی ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد بازی' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, description, reward, status } = req.body;
    await Game.findByIdAndUpdate(req.params.id, { name, description, reward, status });
    res.json({ message: 'بازی به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی بازی' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Game.findByIdAndDelete(req.params.id);
    res.json({ message: 'بازی حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف بازی' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Games = () => {
  const [games, setGames] = useState([]);
  const [newGame, setNewGame] = useState({ name: '', description: '', reward: 0, status: 'فعال' });

  useEffect(() => {
    const fetchGames = async () => {
      try {
        const response = await axios.get('/api/games');
        setGames(response.data);
      } catch (error) {
        console.error('Error fetching games:', error);
      }
    };
    fetchGames();
  }, []);

  const handleAddGame = async () => {
    try {
      await axios.post('/api/games', newGame);
      setGames([...games, newGame]);
      setNewGame({ name: '', description: '', reward: 0, status: 'فعال' });
    } catch (error) {
      console.error('Error adding game:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این بازی را حذف کنید؟')) {
      try {
        await axios.delete(`/api/games/${id}`);
        setGames(games.filter(game => game._id !== id));
      } catch (error) {
        console.error('Error deleting game:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🎮 بازی‌ها</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام بازی"
          value={newGame.name}
          onChange={(e) => setNewGame({ ...newGame, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="text"
          placeholder="توضیحات"
          value={newGame.description}
          onChange={(e) => setNewGame({ ...newGame, description: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="جایزه"
          value={newGame.reward}
          onChange={(e) => setNewGame({ ...newGame, reward: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <select
          value={newGame.status}
          onChange={(e) => setNewGame({ ...newGame, status: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        >
          <option value="فعال">فعال</option>
          <option value="غیرفعال">غیرفعال</option>
        </select>
        <button onClick={handleAddGame} className="bg-blue-500 text-white p-2 rounded">
          افزودن بازی
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>توضیحات</th>
            <th>جایزه</th>
            <th>وضعیت</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {games.map(game => (
            <tr key={game._id}>
              <td>{game.name}</td>
              <td>{game.description}</td>
              <td>{game.reward}</td>
              <td>{game.status}</td>
              <td>
                <button onClick={() => handleDelete(game._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Games;
```

##### 2.3.5. جایزه‌ها (🎁)
###### توضیح:
این بخش برای مدیریت جایزه‌ها (مانند جایزه روزانه) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول جایزه‌ها با ستون‌های نام، مقدار، دوره، و وضعیت.
- **ایجاد:** اضافه کردن جایزه جدید.
- **ویرایش:** تغییر مقدار، دوره، یا وضعیت.
- **حذف:** حذف جایزه.
- **تخصیص:** تخصیص جایزه به کاربر.

###### کد پیاده‌سازی:
```javascript
// server/routes/rewards.js
const Reward = mongoose.model('Reward', new mongoose.Schema({
  name: String,
  amount: Number,
  period: Number,
  status: String,
}));

router.get('/', async (req, res) => {
  try {
    const rewards = await Reward.find();
    res.json(rewards);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت جایزه‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, amount, period, status } = req.body;
    const reward = new Reward({ name, amount, period, status });
    await reward.save();
    res.json({ message: 'جایزه ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد جایزه' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, amount, period, status } = req.body;
    await Reward.findByIdAndUpdate(req.params.id, { name, amount, period, status });
    res.json({ message: 'جایزه به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی جایزه' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Reward.findByIdAndDelete(req.params.id);
    res.json({ message: 'جایزه حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف جایزه' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Rewards = () => {
  const [rewards, setRewards] = useState([]);
  const [newReward, setNewReward] = useState({ name: '', amount: 0, period: 0, status: 'فعال' });

  useEffect(() => {
    const fetchRewards = async () => {
      try {
        const response = await axios.get('/api/rewards');
        setRewards(response.data);
      } catch (error) {
        console.error('Error fetching rewards:', error);
      }
    };
    fetchRewards();
  }, []);

  const handleAddReward = async () => {
    try {
      await axios.post('/api/rewards', newReward);
      setRewards([...rewards, newReward]);
      setNewReward({ name: '', amount: 0, period: 0, status: 'فعال' });
    } catch (error) {
      console.error('Error adding reward:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این جایزه را حذف کنید؟')) {
      try {
        await axios.delete(`/api/rewards/${id}`);
        setRewards(rewards.filter(reward => reward._id !== id));
      } catch (error) {
        console.error('Error deleting reward:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🎁 جایزه‌ها</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام جایزه"
          value={newReward.name}
          onChange={(e) => setNewReward({ ...newReward, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="مقدار"
          value={newReward.amount}
          onChange={(e) => setNewReward({ ...newReward, amount: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="دوره (ساعت)"
          value={newReward.period}
          onChange={(e) => setNewReward({ ...newReward, period: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <select
          value={newReward.status}
          onChange={(e) => setNewReward({ ...newReward, status: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        >
          <option value="فعال">فعال</option>
          <option value="غیرفعال">غیرفعال</option>
        </select>
        <button onClick={handleAddReward} className="bg-blue-500 text-white p-2 rounded">
          افزودن جایزه
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>مقدار</th>
            <th>دوره</th>
            <th>وضعیت</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {rewards.map(reward => (
            <tr key={reward._id}>
              <td>{reward.name}</td>
              <td>{reward.amount}</td>
              <td>{reward.period}</td>
              <td>{reward.status}</td>
              <td>
                <button onClick={() => handleDelete(reward._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Rewards;
```

##### 2.3.6. فروشگاه (🛒)
###### توضیح:
این بخش برای مدیریت محصولات فروشگاه (مانند Wallet Lock، Voice Booster) طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول محصولات با ستون‌های نام، قیمت (سی‌کوین/کریستال)، شانس سرقت، و دوره.
- **ایجاد:** اضافه کردن محصول جدید.
- **ویرایش:** تغییر قیمت، شانس‌ها، یا دوره.
- **حذف:** حذف محصول.
- **خرید:** خرید محصول برای کاربر.

###### کد پیاده‌سازی:
```javascript
// server/routes/shop.js
const Product = mongoose.model('Product', new mongoose.Schema({
  name: String,
  priceCcoin: Number,
  priceCrystal: Number,
  robberyChance: Number,
  period: Number,
  description: String,
}));

router.get('/', async (req, res) => {
  try {
    const products = await Product.find();
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت محصولات' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { name, priceCcoin, priceCrystal, robberyChance, period, description } = req.body;
    const product = new Product({ name, priceCcoin, priceCrystal, robberyChance, period, description });
    await product.save();
    res.json({ message: 'محصول ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد محصول' });
  }
});

router.put('/:id', async (req, res) => {
  try {
    const { name, priceCcoin, priceCrystal, robberyChance, period, description } = req.body;
    await Product.findByIdAndUpdate(req.params.id, { name, priceCcoin, priceCrystal, robberyChance, period, description });
    res.json({ message: 'محصول به‌روزرسانی شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در به‌روزرسانی محصول' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Product.findByIdAndDelete(req.params.id);
    res.json({ message: 'محصول حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف محصول' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Shop = () => {
  const [products, setProducts] = useState([]);
  const [newProduct, setNewProduct] = useState({
    name: '',
    priceCcoin: 0,
    priceCrystal: 0,
    robberyChance: 0,
    period: 0,
    description: '',
  });

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get('/api/shop');
        setProducts(response.data);
      } catch (error) {
        console.error('Error fetching products:', error);
      }
    };
    fetchProducts();
  }, []);

  const handleAddProduct = async () => {
    try {
      await axios.post('/api/shop', newProduct);
      setProducts([...products, newProduct]);
      setNewProduct({ name: '', priceCcoin: 0, priceCrystal: 0, robberyChance: 0, period: 0, description: '' });
    } catch (error) {
      console.error('Error adding product:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این محصول را حذف کنید؟')) {
      try {
        await axios.delete(`/api/shop/${id}`);
        setProducts(products.filter(product => product._id !== id));
      } catch (error) {
        console.error('Error deleting product:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🛒 فروشگاه</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="نام محصول"
          value={newProduct.name}
          onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="قیمت (سی‌کوین)"
          value={newProduct.priceCcoin}
          onChange={(e) => setNewProduct({ ...newProduct, priceCcoin: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="قیمت (کریستال)"
          value={newProduct.priceCrystal}
          onChange={(e) => setNewProduct({ ...newProduct, priceCrystal: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="شانس سرقت (%)"
          value={newProduct.robberyChance}
          onChange={(e) => setNewProduct({ ...newProduct, robberyChance: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="number"
          placeholder="دوره (ساعت)"
          value={newProduct.period}
          onChange={(e) => setNewProduct({ ...newProduct, period: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <input
          type="text"
          placeholder="توضیحات"
          value={newProduct.description}
          onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}
          className="p-2 rounded bg-gray-800 text-white mr-2"
        />
        <button onClick={handleAddProduct} className="bg-blue-500 text-white p-2 rounded">
          افزودن محصول
        </button>
      </div>
      <table className="w-full text-left">
        <thead>
          <tr>
            <th>نام</th>
            <th>قیمت (سی‌کوین)</th>
            <th>قیمت (کریستال)</th>
            <th>شانس سرقت</th>
            <th>دوره</th>
            <th>توضیحات</th>
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {products.map(product => (
            <tr key={product._id}>
              <td>{product.name}</td>
              <td>{product.priceCcoin}</td>
              <td>{product.priceCrystal}</td>
              <td>{product.robberyChance}%</td>
              <td>{product.period}</td>
              <td>{product.description}</td>
              <td>
                <button onClick={() => handleDelete(product._id)} className="text-red-500">
                  حذف
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default Shop;
```

#### 2.4. دسته‌بندی اجتماعی

##### 2.4.1. سیستم دوستی (🤝)
###### توضیح:
این بخش برای مدیریت سیستم دوستی بین کاربران طراحی شده است.

###### نحوه مدیریت:
- **نمایش:** جدول دوستی‌ها با ستون‌های کاربر، دوست، و تاریخ دوستی.
- **ایجاد:** اضافه کردن دوستی جدید.
- **حذف:** حذف دوستی.

###### کد پیاده‌سازی:
```javascript
// server/routes/friends.js
const Friendship = mongoose.model('Friendship', new mongoose.Schema({
  userId: String,
  friendId: String,
  date: { type: Date, default: Date.now },
}));

router.get('/', async (req, res) => {
  try {
    const friendships = await Friendship.find().populate('userId friendId', 'name');
    res.json(friendships);
  } catch (error) {
    res.status(500).json({ error: 'خطا در دریافت دوستی‌ها' });
  }
});

router.post('/', async (req, res) => {
  try {
    const { userId, friendId } = req.body;
    const friendship = new Friendship({ userId, friendId });
    await friendship.save();
    res.json({ message: 'دوستی ایجاد شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در ایجاد دوستی' });
  }
});

router.delete('/:id', async (req, res) => {
  try {
    await Friendship.findByIdAndDelete(req.params.id);
    res.json({ message: 'دوستی حذف شد' });
  } catch (error) {
    res.status(500).json({ error: 'خطا در حذف دوستی' });
  }
});

// فرانت‌اند (React)
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const Friends = () => {
  const [friendships, setFriendships] = useState([]);
  const [newFriendship, setNewFriendship] = useState({ userId: '', friendId: '' });

  useEffect(() => {
    const fetchFriendships = async () => {
      try {
        const response = await axios.get('/api/friends');
        setFriendships(response.data);
      } catch (error) {
        console.error('Error fetching friendships:', error);
      }
    };
    fetchFriendships();
  }, []);

  const handleAddFriendship = async () => {
    try {
      await axios.post('/api/friends', newFriendship);
      setFriendships([...friendships, newFriendship]);
      setNewFriendship({ userId: '', friendId: '' });
    } catch (error) {
      console.error('Error adding friendship:', error);
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm('آیا مطمئن هستید که می‌خواهید این دوستی را حذف کنید؟')) {
      try {
        await axios.delete(`/api/friends/${id}`);
        setFriendships(friendships.filter(friendship => friendship._id !== id));
      } catch (error) {
        console.error('Error deleting friendship:', error);
      }
    }
  };

  return (
    <div className="p-6">
      <h1 className="text-3xl font-bold mb-6">🤝 سیستم دوستی</h1>
      <div className="mb-4">
        <input
          type="text"
          placeholder="آیدی کاربر"
          value={newFriendship.userId}
          onChange={(e) => setNewFriendship({ ...newFriendship, userId: e.target.value })}
