### مستند جامع و پیشرفته برای ارتقاء پنل ادمین تحت وب ربات دیسکورد Ccoin

#### مقدمه
این مستند با هدف ارتقاء و گسترش پنل ادمین تحت وب ربات دیسکورد Ccoin طراحی شده است تا تمام بخش‌ها و قابلیت‌های ربات، که در منوی اصلی دیسکورد و تصاویر ارائه‌شده نمایش داده شده‌اند، به طور کامل در پنل ادمین تحت کنترل و مدیریت قرار گیرند. در این مستند، بخش‌های جدید از تصاویر اخیر (مانند محصولات فروشگاه، سیستم لاتاری، و نقش‌ها) با بخش‌های قبلی ادغام شده و یک پنل ادمین جامع، پیشرفته، و کاربرپسند ارائه می‌شود. این پنل به ادمین امکان می‌دهد تمام جنبه‌های ربات از جمله اقتصاد، کلن‌ها، کوئست‌ها، محصولات، نقش‌ها، لاتاری، فعالیت‌ها، بازی‌ها، و لاگ‌ها را تحت نظارت و کنترل داشته باشد و بتواند هر چیزی را تغییر دهد.

---

### 1. تحلیل و ادغام بخش‌های جدید با بخش‌های قبلی

#### 1.1. تحلیل بخش‌های قبلی (از درخواست اول)
در درخواست قبلی، بخش‌های زیر در منوی ربات دیسکورد و پنل ادمین شناسایی شدند:
- **اقتصاد:** نمایش موجودی، بانک، پول نقد، رتبه‌بندی، سرقت، و انتقال.
- **کلن‌ها:** مدیریت کلن‌ها (ایجاد، ویرایش، حذف).
- **کوئست‌ها:** نمایش و مدیریت کوئست‌ها.
- **محصولات:** نمایش و مدیریت محصولات (مانند Wallet Lock، Voice Booster).
- **فعالیت‌ها:** نمایش فعالیت‌های کاربر.
- **بازی‌ها:** بازی‌های ربات (مانند حدس عدد).
- **جایزه‌ها:** دریافت جایزه‌ها (مانند جایزه روزانه).
- **مدیریت:** دستورات ادمین (تغییر موجودی، تنظیمات).
- **سایر قابلیت‌ها:** راهنما، پینگ، رأی دادن، دعوت ربات.

#### 1.2. تحلیل بخش‌های جدید (از تصاویر اخیر)
با بررسی تصاویر جدید، بخش‌ها و قابلیت‌های زیر شناسایی شدند:
- **محصولات فروشگاه (Shop):**
  - **Legendary Role:** افزایش 10% شانس سرقت، 10% تخفیف فروشگاه، قیمت 1000 سی‌کوین.
  - **Voice Booster:** افکت صوتی ویژه برای 24 ساعت، قیمت 700 سی‌کوین.
  - **Wallet Lock:** محافظت از کیف پول در برابر سرقت برای 24 ساعت، قیمت 200 سی‌کوین.
  - **Lottery Ticket:** بلیط لاتاری برای قرعه‌کشی بزرگ، قیمت 500 سی‌کوین.
  - **Mystery Box Key:** کلید جعبه مرموز با جوایز تصادفی، قیمت 300 سی‌کوین.
  - **Special Role:** افزایش 5% شانس سرقت، 5% تخفیف فروشگاه، قیمت 168 سی‌کوین.
- **لاتاری (Lottery):**
  - قرعه‌کشی با بلیط لاتاری (500 سی‌کوین).
  - جوایز احتمالی: 200 سی‌کوین (40% شانس)، 500 سی‌کوین (14% شانس)، 1000 سی‌کوین (7% شانس)، 10,000 سی‌کوین (5% شانس).
- **نقش‌ها (Roles):**
  - نقش‌های ویژه مانند Legendary Role، Special Role با مزایای مختلف (شانس سرقت، تخفیف).
  - نقش‌های کلن: Leader، Co-Leader، Elder، Member.
- **جایزه‌ها (Rewards):**
  - جوایز لاتاری (مانند 200، 500، 1000، یا 10,000 سی‌کوین).
  - جایزه‌های کلن (مانند 500 سی‌کوین برای ایجاد کلن).
- **فعالیت‌ها (Activity):**
  - نمایش فعالیت‌های کاربر (مانند تعداد پیام‌ها، فعالیت در کلن).
- **رتبه‌بندی (Top):**
  - رتبه‌بندی بر اساس سی‌کوین، کریستال، پیام‌ها، و فعالیت‌ها.
- **سیستم قفل (Lock System):**
  - قفل کیف پول برای جلوگیری از سرقت (Wallet Lock).
- **جعبه مرموز (Mystery Box):**
  - جعبه با جوایز تصادفی (نیاز به کلید Mystery Box Key).

#### 1.3. ادغام بخش‌ها
با ادغام بخش‌های قبلی و جدید، منوی پنل ادمین تحت وب به صورت زیر طراحی می‌شود تا تمام قابلیت‌ها پوشش داده شوند:
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال، کوئست‌ها، فعالیت‌ها، لاتاری‌ها، محصولات).
- **👥 کاربرها:** مدیریت کاربرها (نمایش، ویرایش، حذف، اضافه کردن، تغییر موجودی، رتبه‌بندی).
- **💰 اقتصاد:** مدیریت اقتصاد (نمایش تراکنش‌ها، تغییر موجودی، تنظیم نرخ تبدیل، مدیریت سرقت و انتقال).
- **🏰 کلن‌ها:** مدیریت کلن‌ها (نمایش، ایجاد، ویرایش، حذف، نقش‌ها).
- **🎯 کوئست‌ها:** مدیریت کوئست‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🛒 محصولات:** مدیریت محصولات فروشگاه (نمایش، ایجاد، ویرایش، حذف، خرید).
- **🎰 لاتاری:** مدیریت سیستم لاتاری (نمایش قرعه‌کشی‌ها، ایجاد، ویرایش، حذف، تنظیم جوایز).
- **🎭 نقش‌ها:** مدیریت نقش‌ها (نمایش، ایجاد، ویرایش، حذف، تخصیص).
- **🎮 بازی‌ها:** مدیریت بازی‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎁 جایزه‌ها:** مدیریت جایزه‌ها (نمایش، ایجاد، ویرایش، حذف، تخصیص).
- **📜 لاگ‌ها:** نمایش لاگ فعالیت‌ها (فعالیت‌های کاربرها، ادمین‌ها، و ربات).
- **⚙️ تنظیمات:** تنظیمات ربات (نرخ تبدیل، تنظیمات سرقت، تنظیمات لاتاری، تنظیمات نقش‌ها، تم).
- **🚪 خروج:** خروج از پنل.

---

### 2. طراحی و قابلیت‌های جدید پنل ادمین

#### 2.1. قابلیت‌های پیشرفته در هر بخش
- **کاربرها:**
  - نمایش لیست کاربرها با جزئیات (نام، آیدی، سی‌کوین، کریستال، رتبه، پیام‌ها، فعالیت‌ها).
  - قابلیت جستجو و فیلتر (بر اساس نام، آیدی، رتبه، یا فعالیت).
  - ویرایش اطلاعات کاربر (تغییر سی‌کوین، کریستال، رتبه، نقش‌ها).
  - حذف کاربر.
  - اضافه کردن کاربر جدید.
  - نمایش رتبه‌بندی (Top 10 کاربر بر اساس سی‌کوین، کریستال، پیام‌ها).
  - تخصیص نقش به کاربر (مانند Legendary Role، Special Role).
- **اقتصاد:**
  - نمایش تراکنش‌ها (سرقت، انتقال، خرید، لاتاری).
  - تغییر موجودی کاربر (سی‌کوین، کریستال، پول نقد، بانک).
  - تنظیم نرخ تبدیل (سی‌کوین به کریستال و بالعکس).
  - مدیریت سرقت (تغییر شانس سرقت، فعال/غیرفعال کردن).
  - مدیریت انتقال (تغییر محدودیت‌ها، فعال/غیرفعال کردن).
  - مدیریت قفل کیف پول (Wallet Lock) و تنظیمات آن.
- **کلن‌ها:**
  - نمایش لیست کلن‌ها با جزئیات (نام، آیدی، اعضا، سی‌کوین کلن، نقش‌ها).
  - ایجاد کلن جدید (با هزینه 500 سی‌کوین).
  - ویرایش کلن (تغییر نام، اعضا، سی‌کوین، نقش‌ها).
  - حذف کلن.
  - مدیریت نقش‌های کلن (Leader، Co-Leader، Elder، Member).
- **کوئست‌ها:**
  - نمایش لیست کوئست‌ها با جزئیات (نام، توضیحات، جایزه، وضعیت).
  - ایجاد کوئست جدید.
  - ویرایش کوئست (تغییر جایزه، توضیحات).
  - حذف کوئست.
- **محصولات:**
  - نمایش لیست محصولات با جزئیات (نام، قیمت، توضیحات، شانس‌ها، دوره).
  - ایجاد محصول جدید (مانند Legendary Role، Lottery Ticket).
  - ویرایش محصول (تغییر قیمت، توضیحات، شانس‌ها).
  - حذف محصول.
  - خرید محصول برای کاربر.
  - مدیریت جعبه مرموز (Mystery Box) و جوایز تصادفی آن.
- **لاتاری:**
  - نمایش لیست قرعه‌کشی‌ها (فعلی و گذشته).
  - ایجاد قرعه‌کشی جدید (تنظیم جوایز، شانس‌ها، قیمت بلیط).
  - ویرایش قرعه‌کشی (تغییر جوایز، شانس‌ها).
  - حذف قرعه‌کشی.
  - نمایش شرکت‌کنندگان و برندگان.
  - تنظیم شانس جوایز (مانند 40% برای 200 سی‌کوین، 5% برای 10,000 سی‌کوین).
- **نقش‌ها:**
  - نمایش لیست نقش‌ها (مانند Legendary Role، Special Role، Leader).
  - ایجاد نقش جدید (با مزایا مانند شانس سرقت، تخفیف).
  - ویرایش نقش (تغییر مزایا، قیمت).
  - حذف نقش.
  - تخصیص نقش به کاربر یا کلن.
- **بازی‌ها:**
  - نمایش لیست بازی‌ها (مانند حدس عدد).
  - ایجاد بازی جدید.
  - ویرایش بازی (تغییر جایزه، قوانین).
  - حذف بازی.
- **جایزه‌ها:**
  - نمایش لیست جایزه‌ها (مانند جایزه روزانه، جوایز لاتاری، جوایز کلن).
  - ایجاد جایزه جدید.
  - ویرایش جایزه (تغییر مقدار، دوره).
  - حذف جایزه.
  - تخصیص جایزه به کاربر (مانند جایزه لاتاری).
- **لاگ‌ها:**
  - نمایش لاگ فعالیت‌ها (ورود/خروج ادمین، تغییرات کاربرها، تراکنش‌ها، خرید محصولات، شرکت در لاتاری).
  - فیلتر بر اساس تاریخ، نوع فعالیت، یا کاربر.
- **تنظیمات:**
  - تنظیمات اقتصاد (نرخ تبدیل، شانس سرقت، قفل کیف پول).
  - تنظیمات لاتاری (شانس جوایز، قیمت بلیط).
  - تنظیمات نقش‌ها (مزایای نقش‌ها، قیمت).
  - تنظیمات بازی‌ها (فعال/غیرفعال کردن، تغییر جوایز).
  - تنظیمات جایزه‌ها (دوره، مقدار).
  - تنظیمات ربات (وضعیت، آپتایم، مصرف حافظه).
  - تغییر تم (Dark/Light).

#### 2.2. بهبود طراحی UI/UX
- **تم پیشرفته:** استفاده از تم تیره با افکت شیشه‌ای (Glassmorphism) و انیمیشن‌های نرم (Hover Effects).
- **نوار کناری (Sidebar):** منوی ثابت در سمت راست با آیکون‌های جذاب و نام بخش‌ها.
- **هدر (Header):** نمایش نام ادمین، آواتار، دکمه تغییر تم، دکمه خروج.
- **کارت‌های آماری:** نمایش آمار در کارت‌های شیشه‌ای با آیکون‌های مرتبط (مثلاً 📈 برای اقتصاد، 🎰 برای لاتاری).
- **جداول تعاملی:** جداول با قابلیت جستجو، فیلتر، مرتب‌سازی، و ویرایش/حذف.
- **فرم‌های پیشرفته:** فرم‌های پویا برای ایجاد/ویرایش (مانند فرم ایجاد نقش جدید).
- **نمودارها:** نمایش آمار (مانند تراکنش‌ها، فعالیت‌ها، شرکت‌کنندگان لاتاری) با استفاده از Chart.js.

#### 2.3. نمونه طراحی منو
ساختار متنی منوی جدید:

```
[Sidebar]
- Logo: Ccoin Bot
- Admin: whysiks
- 📊 داشبورد
- 👥 کاربرها
- 💰 اقتصاد
- 🏰 کلن‌ها
- 🎯 کوئست‌ها
- 🛒 محصولات
- 🎰 لاتاری
- 🎭 نقش‌ها
- 🎮 بازی‌ها
- 🎁 جایزه‌ها
- 📜 لاگ‌ها
- ⚙️ تنظیمات
- 🚪 خروج

[Header]
- whysiks (Avatar) | 🌙 تم تیره | خروج
```

---

### 3. پیاده‌سازی کد پیشرفته

#### 3.1. نصب پکیج‌های مورد نیاز
پکیج‌های زیر برای گسترش پنل نصب می‌شوند:

```bash
# برای بک‌اند
npm install express express-session discord-oauth2 sqlite3 discord.js

# برای فرانت‌اند (توی پوشه client)
cd client
npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons react-router-dom framer-motion
```

#### 3.2. ساختار پروژه
ساختار پروژه به صورت زیر تنظیم می‌شود:

```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های API
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   └── bot.ts          # ربات دیسکورد
├── client/
│   ├── src/
│   │   ├── assets/
│   │   │   ├── theme/
│   │   │   │   ├── colors.js
│   │   │   │   └── typography.js
│   │   ├── components/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── GlassCard.tsx
│   │   │   ├── DataTable.tsx
│   │   │   ├── ChartComponent.tsx
│   │   │   └── ModalForm.tsx
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Users.tsx
│   │   │   ├── Economy.tsx
│   │   │   ├── Clans.tsx
│   │   │   ├── Quests.tsx
│   │   │   ├── Products.tsx
│   │   │   ├── Lottery.tsx
│   │   │   ├── Roles.tsx
│   │   │   ├── Games.tsx
│   │   │   ├── Rewards.tsx
│   │   │   ├── Logs.tsx
│   │   │   └── Settings.tsx
│   │   ├── App.tsx
│   │   ├── index.tsx
│   │   ├── routes.tsx
│   │   └── styles.css
│   ├── package.json
│   └── vite.config.ts
├── package.json
└── .replit
```

#### 3.3. تنظیمات تم (client/src/assets/theme/colors.js)
فایل رنگ‌ها برای تم پیشرفته:

```javascript
const colors = {
  background: "#1A1F37",
  card: "rgba(255, 255, 255, 0.1)",
  text: "#FFFFFF",
  primary: "#7289DA",
  secondary: "#3B82F6",
  accent: "#10B981",
  warning: "#F59E0B",
  error: "#EF4444",
  success: "#34D399",
};

export default colors;
```

#### 3.4. استایل‌های شیشه‌ای و انیمیشن (client/src/styles.css)
استایل‌های پیشرفته با افکت شیشه‌ای و انیمیشن:

```css
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.glass:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);
}

body {
  background: #1A1F37;
  color: #FFFFFF;
  font-family: "Vazirmatn", sans-serif;
}
```

#### 3.5. کامپوننت Sidebar (client/src/components/Sidebar.tsx)
نوار کناری پیشرفته با آیکون‌ها و انیمیشن:

```tsx
import { Link, useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { FaChartBar, FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaShoppingCart, FaDice, FaUserTag, FaGamepad, FaGift, FaFileAlt, FaCog, FaSignOutAlt } from "react-icons/fa";

const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: "/dashboard", label: "داشبورد", icon: <FaChartBar /> },
    { path: "/users", label: "کاربرها", icon: <FaUsers /> },
    { path: "/economy", label: "اقتصاد", icon: <FaMoneyBillWave /> },
    { path: "/clans", label: "کلن‌ها", icon: <FaShieldAlt /> },
    { path: "/quests", label: "کوئست‌ها", icon: <FaTasks /> },
    { path: "/products", label: "محصولات", icon: <FaShoppingCart /> },
    { path: "/lottery", label: "لاتاری", icon: <FaDice /> },
    { path: "/roles", label: "نقش‌ها", icon: <FaUserTag /> },
    { path: "/games", label: "بازی‌ها", icon: <FaGamepad /> },
    { path: "/rewards", label: "جایزه‌ها", icon: <FaGift /> },
    { path: "/logs", label: "لاگ‌ها", icon: <FaFileAlt /> },
    { path: "/settings", label: "تنظیمات", icon: <FaCog /> },
    { path: "/logout", label: "خروج", icon: <FaSignOutAlt /> },
  ];

  return (
    <motion.aside
      initial={{ x: 100 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.5 }}
      className="fixed top-0 right-0 w-64 h-full glass p-4"
    >
      <div className="text-center mb-6">
        <img src="/logo.png" alt="Ccoin Bot" className="w-16 mx-auto" />
        <h2 className="text-xl font-bold mt-2">ربات سی‌کوین</h2>
        <p className="text-gray-400">ادمین: whysiks</p>
      </div>
      <nav>
        {menuItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`flex items-center space-x-2 py-2 px-4 rounded ${
              location.pathname === item.path ? "bg-primary" : "hover:bg-gray-700"
            }`}
          >
            {item.icon}
            <span>{item.label}</span>
          </Link>
        ))}
      </nav>
    </motion.aside>
  );
};

export default Sidebar;
```

#### 3.6. کامپوننت Header (client/src/components/Header.tsx)
هدر پیشرفته با انیمیشن:

```tsx
import { FaMoon, FaSignOutAlt } from "react-icons/fa";
import { motion } from "framer-motion";

const Header = () => {
  const handleLogout = async () => {
    await fetch("http://localhost:5000/api/admin/logout");
    window.location.href = "/";
  };

  return (
    <motion.header
      initial={{ y: -50 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
      className="glass p-4 flex justify-between items-center"
    >
      <div className="flex items-center space-x-4">
        <img src="https://via.placeholder.com/40" alt="Avatar" className="w-10 h-10 rounded-full" />
        <span className="font-semibold">whysiks (ادمین)</span>
      </div>
      <div className="flex space-x-4">
        <button className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2">
          <FaMoon />
          <span>تم تیره</span>
        </button>
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaSignOutAlt />
          <span>خروج</span>
        </button>
      </div>
    </motion.header>
  );
};

export default Header;
```

#### 3.7. کامپوننت DataTable (client/src/components/DataTable.tsx)
جدول تعاملی پیشرفته:

```tsx
import { useState } from "react";
import { FaEdit, FaTrash } from "react-icons/fa";
import { motion } from "framer-motion";

interface DataTableProps {
  columns: string[];
  data: any[];
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
}

const DataTable = ({ columns, data, onEdit, onDelete }: DataTableProps) => {
  const [search, setSearch] = useState("");
  const [sortColumn, setSortColumn] = useState("");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");

  const filteredData = data.filter((row) =>
    Object.values(row).some((value) =>
      value.toString().toLowerCase().includes(search.toLowerCase())
    )
  );

  const sortedData = [...filteredData].sort((a, b) => {
    if (!sortColumn) return 0;
    const valueA = a[sortColumn];
    const valueB = b[sortColumn];
    if (sortDirection === "asc") {
      return valueA > valueB ? 1 : -1;
    }
    return valueA < valueB ? 1 : -1;
  });

  const handleSort = (column: string) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="glass p-4"
    >
      <input
        type="text"
        placeholder="جستجو..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-4 p-2 rounded bg-gray-800 text-white w-full"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            {columns.map((col) => (
              <th
                key={col}
                onClick={() => handleSort(col)}
                className="cursor-pointer"
              >
                {col} {sortColumn === col && (sortDirection === "asc" ? "↑" : "↓")}
              </th>
            ))}
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row) => (
            <tr key={row.id}>
              {Object.values(row).map((value, index) => (
                <td key={index}>{value}</td>
              ))}
              <td>
                <button onClick={() => onEdit(row.id)} className="text-blue-500 mr-2">
                  <FaEdit />
                </button>
                <button onClick={() => onDelete(row.id)} className="text-red-500">
                  <FaTrash />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </motion.div>
  );
};

export default DataTable;
```

#### 3.8. کامپوننت ChartComponent (client/src/components/ChartComponent.tsx)
کامپوننت برای نمایش نمودارها:

```tsx
import { Line } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from "chart.js";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

interface ChartComponentProps {
  data: any;
  title: string;
}

const ChartComponent = ({ data, title }: ChartComponentProps) => {
  return (
    <div className="glass p-4">
      <h2 className="text-xl font-semibold mb-4">{title}</h2>
      <Line data={data} />
    </div>
  );
};

export default ChartComponent;
```

#### 3.9. کامپوننت ModalForm (client/src/components/ModalForm.tsx)
کامپوننت برای فرم‌های پویا:

```tsx
import { useState } from "react";
import { motion } from "framer-motion";

interface ModalFormProps {
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (data: any) => void;
  fields: { label: string; name: string; type: string }[];
  title: string;
}

const ModalForm = ({ isOpen, onClose, onSubmit, fields, title }: ModalFormProps) => {
  const [formData, setFormData] = useState({});

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSubmit(formData);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"
    >
      <motion.div
        initial={{ scale: 0.8 }}
        animate={{ scale: 1 }}
        className="glass p-6 rounded-lg w-96"
      >
        <h2 className="text-xl font-bold mb-4">{title}</h2>
        <form onSubmit={handleSubmit}>
          {fields.map((field) => (
            <div key={field.name} className="mb-4">
              <label className="block mb-1">{field.label}</label>
              <input
                type={field.type}
                name={field.name}
                onChange={handleChange}
                className="p-2 rounded bg-gray-800 text-white w-full"
              />
            </div>
          ))}
          <div className="flex justify-end space-x-2">
            <button
              type="button"
              onClick={onClose}
              className="bg-gray-600 hover:bg-gray-700 py-2 px-4 rounded"
            >
              لغو
            </button>
            <button
              type="submit"
              className="bg-blue-500 hover:bg-blue-600 py-2 px-4 rounded"
            >
              ذخیره
            </button>
          </div>
        </form>
      </motion.div>
    </motion.div>
  );
};

export default ModalForm;
```

#### 3.10. صفحه داشبورد (client/src/pages/Dashboard.tsx)
صفحه داشبورد با کارت‌های آماری و نمودار:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import ChartComponent from "../components/ChartComponent";
import { FaUsers, FaMoneyBillWave, FaShieldAlt, FaDice } from "react-icons/fa";
import { motion } from "framer-motion";

const Dashboard = () => {
  const [stats, setStats] = useState({
    users: 0,
    ccoin: 0,
    clans: 0,
    lotteryParticipants: 0,
  });
  const [transactionData, setTransactionData] = useState({});

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/stats");
        setStats(response.data);
      } catch (error) {
        console.error("Error fetching stats:", error);
      }
    };

    const fetchTransactionData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions/chart");
        setTransactionData({
          labels: response.data.labels,
          datasets: [
            {
              label: "تراکنش‌ها",
              data: response.data.values,
              borderColor: "#3B82F6",
              backgroundColor: "rgba(59, 130, 246, 0.2)",
            },
          ],
        });
      } catch (error) {
        console.error("Error fetching transaction data:", error);
      }
    };

    fetchStats();
    fetchTransactionData();
  }, []);

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📊 داشبورد</h1>
      <div className="grid grid-cols-4 gap-4 mb-6">
        <motion.div className="glass p-4 flex items-center space-x-4">
          <FaUsers className="text-3xl text-blue-500" />
          <div>
            <h2 className="text-lg font-semibold">کاربرها</h2>
            <p>{stats.users}</p>
          </div>
        </motion.div>
        <motion.div className="glass p-4 flex items-center space-x-4">
          <FaMoneyBillWave className="text-3xl text-green-500" />
          <div>
            <h2 className="text-lg font-semibold">سی‌کوین کل</h2>
            <p>{stats.ccoin}</p>
          </div>
        </motion.div>
        <motion.div className="glass p-4 flex items-center space-x-4">
          <FaShieldAlt className="text-3xl text-purple-500" />
          <div>
            <h2 className="text-lg font-semibold">کلن‌ها</h2>
            <p>{stats.clans}</p>
          </div>
        </motion.div>
        <motion.div className="glass p-4 flex items-center space-x-4">
          <FaDice className="text-3xl text-yellow-500" />
          <div>
            <h2 className="text-lg font-semibold">شرکت‌کنندگان لاتاری</h2>
            <p>{stats.lotteryParticipants}</p>
          </div>
        </motion.div>
      </div>
      <ChartComponent data={transactionData} title="نمودار تراکنش‌ها" />
    </div>
  );
};

export default Dashboard;
```

#### 3.11. صفحه کاربرها (client/src/pages/Users.tsx)
صفحه مدیریت کاربرها با قابلیت تخصیص نقش:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Users = () => {
  const [users, setUsers] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/users");
        setUsers(response.data);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  const handleEdit = async (id: string) => {
    const newCcoin = prompt("مقدار جدید سی‌کوین را وارد کنید:");
    if (newCcoin) {
      try {
        await axios.put(`http://localhost:5000/api/admin/users/${id}`, { ccoin: newCcoin });
        setUsers(users.map((user) => (user.id === id ? { ...user, ccoin: newCcoin } : user)));
      } catch (error) {
        console.error("Error updating user:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/users/${id}`);
        setUsers(users.filter((user) => user.id !== id));
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    }
  };

  const handleAddUser = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/users", data);
      const response = await axios.get("http://localhost:5000/api/admin/users");
      setUsers(response.data);
    } catch (error) {
      console.error("Error adding user:", error);
    }
  };

  const columns = ["نام", "آیدی", "سی‌کوین", "کریستال", "رتبه", "پیام‌ها", "نقش"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">👥 کاربرها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        افزودن کاربر جدید
      </button>
      <DataTable
        columns={columns}
        data={users.map((user) => ({
          id: user.id,
          نام: user.username,
          آیدی: user.id,
          "سی‌کوین": user.ccoin,
          کریستال: user.crystals,
          رتبه: user.rank,
          "پیام‌ها": user.messages,
          نقش: user.role || "ندارد",
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddUser}
        title="افزودن کاربر جدید"
        fields={[
          { label: "نام", name: "username", type: "text" },
          { label: "آیدی", name: "id", type: "text" },
          { label: "سی‌کوین", name: "ccoin", type: "number" },
          { label: "کریستال", name: "crystals", type: "number" },
        ]}
      />
    </div>
  );
};

export default Users;
```

#### 3.12. صفحه اقتصاد (client/src/pages/Economy.tsx)
صفحه مدیریت اقتصاد با تنظیمات قفل کیف پول:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Economy = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [settings, setSettings] = useState({ conversionRate: 0, robberyChance: 0, walletLockDuration: 24 });
  const [transactionData, setTransactionData] = useState({});

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions");
        setTransactions(response.data);
      } catch (error) {
        console.error("Error fetching transactions:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/economy/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    const fetchTransactionData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions/chart");
        setTransactionData({
          labels: response.data.labels,
          datasets: [
            {
              label: "تراکنش‌ها",
              data: response.data.values,
              borderColor: "#3B82F6",
              backgroundColor: "rgba(59, 130, 246, 0.2)",
            },
          ],
        });
      } catch (error) {
        console.error("Error fetching transaction data:", error);
      }
    };
    fetchTransactions();
    fetchSettings();
    fetchTransactionData();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/economy/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const columns = ["کاربر", "نوع", "مقدار", "تاریخ"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">💰 اقتصاد</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-3 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>مدت زمان قفل کیف پول (ساعت):</label>
            <input
              type="number"
              value={settings.walletLockDuration}
              onChange={(e) => setSettings({ ...settings, walletLockDuration: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-4"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <h2 className="text-xl font-semibold mb-4">تراکنش‌ها</h2>
      <DataTable
        columns={columns}
        data={transactions.map((tx) => ({
          id: tx.id,
          کاربر: tx.user,
          نوع: tx.type,
          مقدار: tx.amount,
          تاریخ: tx.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <ChartComponent data={transactionData} title="نمودار تراکنش‌ها" />
    </div>
  );
};

export default Economy;
```

#### 3.13. صفحه کلن‌ها (client/src/pages/Clans.tsx)
صفحه مدیریت کلن‌ها با نقش‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Clans = () => {
  const [clans, setClans] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchClans = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/clans");
        setClans(response.data);
      } catch (error) {
        console.error("Error fetching clans:", error);
      }
    };
    fetchClans();
  }, []);

  const handleEdit = async (id: string) => {
    const newName = prompt("نام جدید کلن را وارد کنید:");
    if (newName) {
      try {
        await axios.put(`http://localhost:5000/api/admin/clans/${id}`, { name: newName });
        setClans(clans.map((clan) => (clan.id === id ? { ...clan, name: newName } : clan)));
      } catch (error) {
        console.error("Error updating clan:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کلن را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/clans/${id}`);
        setClans(clans.filter((clan) => clan.id !== id));
      } catch (error) {
        console.error("Error deleting clan:", error);
      }
    }
  };

  const handleAddClan = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/clans", data);
      const response = await axios.get("http://localhost:5000/api/admin/clans");
      setClans(response.data);
    } catch (error) {
      console.error("Error adding clan:", error);
    }
  };

  const columns = ["نام", "آیدی", "اعضا", "سی‌کوین کلن", "رهبر"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🏰 کلن‌ها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        ایجاد کلن جدید
      </button>
      <DataTable
        columns={columns}
        data={clans.map((clan) => ({
          id: clan.id,
          نام: clan.name,
          آیدی: clan.id,
          اعضا: clan.members,
          "سی‌کوین کلن": clan.ccoin,
          رهبر: clan.leader,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddClan}
        title="ایجاد کلن جدید"
        fields={[
          { label: "نام کلن", name: "name", type: "text" },
          { label: "آیدی کلن", name: "id", type: "text" },
          { label: "رهبر", name: "leader", type: "text" },
          { label: "سی‌کوین اولیه", name: "ccoin", type: "number" },
        ]}
      />
    </div>
  );
};

export default Clans;
```

#### 3.14. صفحه کوئست‌ها (client/src/pages/Quests.tsx)
صفحه مدیریت کوئست‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Quests = () => {
  const [quests, setQuests] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/quests");
        setQuests(response.data);
      } catch (error) {
        console.error("Error fetching quests:", error);
      }
    };
    fetchQuests();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید کوئست را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/quests/${id}`, { reward: newReward });
        setQuests(quests.map((quest) => (quest.id === id ? { ...quest, reward: newReward } : quest)));
      } catch (error) {
        console.error("Error updating quest:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کوئست را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/quests/${id}`);
        setQuests(quests.filter((quest) => quest.id !== id));
      } catch (error) {
        console.error("Error deleting quest:", error);
      }
    }
  };

  const handleAddQuest = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/quests", data);
      const response = await axios.get("http://localhost:5000/api/admin/quests");
      setQuests(response.data);
    } catch (error) {
      console.error("Error adding quest:", error);
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎯 کوئست‌ها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        ایجاد کوئست جدید
      </button>
      <DataTable
        columns={columns}
        data={quests.map((quest) => ({
          id: quest.id,
          نام: quest.name,
          توضیحات: quest.description,
          جایزه: quest.reward,
          وضعیت: quest.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddQuest}
        title="ایجاد کوئست جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "توضیحات", name: "description", type: "text" },
          { label: "جایزه", name: "reward", type: "text" },
          { label: "وضعیت", name: "status", type: "text" },
        ]}
      />
    </div>
  );
};

export default Quests;
```

#### 3.15. صفحه محصولات (client/src/pages/Products.tsx)
صفحه مدیریت محصولات با جعبه مرموز:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";
import { FaLock, FaVolumeUp, FaUserShield, FaGift, FaKey, FaTicketAlt } from "react-icons/fa";

const Products = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrice = prompt("قیمت جدید محصول را وارد کنید:");
    if (newPrice) {
      try {
        await axios.put(`http://localhost:5000/api/admin/products/${id}`, { price: newPrice });
        setProducts(products.map((product) => (product.id === id ? { ...product, price: newPrice } : product)));
      } catch (error) {
        console.error("Error updating product:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این محصول را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/products/${id}`);
        setProducts(products.filter((product) => product.id !== id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
    }
  };

  const handleAddProduct = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/products", data);
      const response = await axios.get("http://localhost:5000/api/admin/products");
      setProducts(response.data);
    } catch (error) {
      console.error("Error adding product:", error);
    }
  };

  const icons = {
    "Wallet Lock": <FaLock />,
    "Voice Booster": <FaVolumeUp />,
    "Legendary Role": <FaUserShield />,
    "Special Role": <FaGift />,
    "Mystery Box Key": <FaKey />,
    "Lottery Ticket": <FaTicketAlt />,
  };

  const columns = ["آیکون", "نام", "وضعیت", "شانس سرقت", "شانس لجندری", "قیمت (سی‌کوین)", "دوره", "توضیحات"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🛒 محصولات</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        افزودن محصول جدید
      </button>
      <DataTable
        columns={columns}
        data={products.map((product) => ({
          id: product.id,
          آیکون: icons[product.name] || "❓",
          نام: product.name,
          وضعیت: product.status,
          "شانس سرقت": product.robberyChance,
          "شانس لجندری": product.legendaryChance,
          "قیمت (سی‌کوین)": product.price,
          دوره: product.period,
          توضیحات: product.description,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddProduct}
        title="افزودن محصول جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "وضعیت", name: "status", type: "text" },
          { label: "شانس سرقت (%)", name: "robberyChance", type: "number" },
          { label: "شانس لجندری (%)", name: "legendaryChance", type: "number" },
          { label: "قیمت (سی‌کوین)", name: "price", type: "number" },
          { label: "دوره (ساعت)", name: "period", type: "number" },
          { label: "توضیحات", name: "description", type: "text" },
        ]}
      />
    </div>
  );
};

export default Products;
```

#### 3.16. صفحه لاتاری (client/src/pages/Lottery.tsx)
صفحه مدیریت لاتاری:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";
import ChartComponent from "../components/ChartComponent";

const Lottery = () => {
  const [lotteries, setLotteries] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [lotteryData, setLotteryData] = useState({});

  useEffect(() => {
    const fetchLotteries = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/lotteries");
        setLotteries(response.data);
      } catch (error) {
        console.error("Error fetching lotteries:", error);
      }
    };
    const fetchLotteryData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/lotteries/chart");
        setLotteryData({
          labels: response.data.labels,
          datasets: [
            {
              label: "شرکت‌کنندگان",
              data: response.data.values,
              borderColor: "#F59E0B",
              backgroundColor: "rgba(245, 158, 11, 0.2)",
            },
          ],
        });
      } catch (error) {
        console.error("Error fetching lottery data:", error);
      }
    };
    fetchLotteries();
    fetchLotteryData();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrize = prompt("جایزه جدید لاتاری را وارد کنید:");
    if (newPrize) {
      try {
        await axios.put(`http://localhost:5000/api/admin/lotteries/${id}`, { prize: newPrize });
        setLotteries(lotteries.map((lottery) => (lottery.id === id ? { ...lottery, prize: newPrize } : lottery)));
      } catch (error) {
        console.error("Error updating lottery:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این لاتاری را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/lotteries/${id}`);
        setLotteries(lotteries.filter((lottery) => lottery.id !== id));
      } catch (error) {
        console.error("Error deleting lottery:", error);
      }
    }
  };

  const handleAddLottery = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/lotteries", data);
      const response = await axios.get("http://localhost:5000/api/admin/lotteries");
      setLotteries(response.data);
    } catch (error) {
      console.error("Error adding lottery:", error);
    }
  };

  const columns = ["نام", "جایزه", "شانس‌ها", "قیمت بلیط", "شرکت‌کنندگان", "برنده"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎰 لاتاری</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        ایجاد لاتاری جدید
      </button>
      <DataTable
        columns={columns}
        data={lotteries.map((lottery) => ({
          id: lottery.id,
          نام: lottery.name,
          جایزه: lottery.prize,
          "شانس‌ها": lottery.chances,
          "قیمت بلیط": lottery.ticketPrice,
          "شرکت‌کنندگان": lottery.participants,
          برنده: lottery.winner || "مشخص نشده",
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ChartComponent data={lotteryData} title="نمودار شرکت‌کنندگان لاتاری" />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddLottery}
        title="ایجاد لاتاری جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "جایزه", name: "prize", type: "text" },
          { label: "شانس‌ها (JSON)", name: "chances", type: "text" },
          { label: "قیمت بلیط", name: "ticketPrice", type: "number" },
        ]}
      />
    </div>
  );
};

export default Lottery;
```

#### 3.17. صفحه نقش‌ها (client/src/pages/Roles.tsx)
صفحه مدیریت نقش‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Roles = () => {
  const [roles, setRoles] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchRoles = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/roles");
        setRoles(response.data);
      } catch (error) {
        console.error("Error fetching roles:", error);
      }
    };
    fetchRoles();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrice = prompt("قیمت جدید نقش را وارد کنید:");
    if (newPrice) {
      try {
        await axios.put(`http://localhost:5000/api/admin/roles/${id}`, { price: newPrice });
        setRoles(roles.map((role) => (role.id === id ? { ...role, price: newPrice } : role)));
      } catch (error) {
        console.error("Error updating role:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این نقش را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/roles/${id}`);
        setRoles(roles.filter((role) => role.id !== id));
      } catch (error) {
        console.error("Error deleting role:", error);
      }
    }
  };

  const handleAddRole = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/roles", data);
      const response = await axios.get("http://localhost:5000/api/admin/roles");
      setRoles(response.data);
    } catch (error) {
      console.error("Error adding role:", error);
    }
  };

  const columns = ["نام", "مزایا", "قیمت (سی‌کوین)", "نوع"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎭 نقش‌ها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        افزودن نقش جدید
      </button>
      <DataTable
        columns={columns}
        data={roles.map((role) => ({
          id: role.id,
          نام: role.name,
          مزایا: role.benefits,
          "قیمت (سی‌کوین)": role.price,
          نوع: role.type,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddRole}
        title="افزودن نقش جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "مزایا", name: "benefits", type: "text" },
          { label: "قیمت (سی‌کوین)", name: "price", type: "number" },
          { label: "نوع (User/Clan)", name: "type", type: "text" },
        ]}
      />
    </div>
  );
};

export default Roles;
```

#### 3.18. صفحه بازی‌ها (client/src/pages/Games.tsx)
صفحه مدیریت بازی‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Games = () => {
  const [games, setGames] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchGames = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/games");
        setGames(response.data);
      } catch (error) {
        console.error("Error fetching games:", error);
      }
    };
    fetchGames();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید بازی را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/games/${id}`, { reward: newReward });
        setGames(games.map((game) => (game.id === id ? { ...game, reward: newReward } : game)));
      } catch (error) {
        console.error("Error updating game:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این بازی را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/games/${id}`);
        setGames(games.filter((game) => game.id !== id));
      } catch (error) {
        console.error("Error deleting game:", error);
      }
    }
  };

  const handleAddGame = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/games", data);
      const response = await axios.get("http://localhost:5000/api/admin/games");
      setGames(response.data);
    } catch (error) {
      console.error("Error adding game:", error);
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎮 بازی‌ها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        افزودن بازی جدید
      </button>
      <DataTable
        columns={columns}
        data={games.map((game) => ({
          id: game.id,
          نام: game.name,
          توضیحات: game.description,
          جایزه: game.reward,
          وضعیت: game.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddGame}
        title="افزودن بازی جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "توضیحات", name: "description", type: "text" },
          { label: "جایزه", name: "reward", type: "text" },
          { label: "وضعیت", name: "status", type: "text" },
        ]}
      />
    </div>
  );
};

export default Games;
```

#### 3.19. صفحه جایزه‌ها (client/src/pages/Rewards.tsx)
صفحه مدیریت جایزه‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ModalForm from "../components/ModalForm";

const Rewards = () => {
  const [rewards, setRewards] = useState<any[]>([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchRewards = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/rewards");
        setRewards(response.data);
      } catch (error) {
        console.error("Error fetching rewards:", error);
      }
    };
    fetchRewards();
  }, []);

  const handleEdit = async (id: string) => {
    const newAmount = prompt("مقدار جدید جایزه را وارد کنید:");
    if (newAmount) {
      try {
        await axios.put(`http://localhost:5000/api/admin/rewards/${id}`, { amount: newAmount });
        setRewards(rewards.map((reward) => (reward.id === id ? { ...reward, amount: newAmount } : reward)));
      } catch (error) {
        console.error("Error updating reward:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این جایزه را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/rewards/${id}`);
        setRewards(rewards.filter((reward) => reward.id !== id));
      } catch (error) {
        console.error("Error deleting reward:", error);
      }
    }
  };

  const handleAddReward = async (data: any) => {
    try {
      await axios.post("http://localhost:5000/api/admin/rewards", data);
      const response = await axios.get("http://localhost:5000/api/admin/rewards");
      setRewards(response.data);
    } catch (error) {
      console.error("Error adding reward:", error);
    }
  };

  const columns = ["نام", "مقدار", "دوره", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎁 جایزه‌ها</h1>
      <button
        onClick={() => setIsModalOpen(true)}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        افزودن جایزه جدید
      </button>
      <DataTable
        columns={columns}
        data={rewards.map((reward) => ({
          id: reward.id,
          نام: reward.name,
          مقدار: reward.amount,
          دوره: reward.period,
          وضعیت: reward.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <ModalForm
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onSubmit={handleAddReward}
        title="افزودن جایزه جدید"
        fields={[
          { label: "نام", name: "name", type: "text" },
          { label: "مقدار", name: "amount", type: "number" },
          { label: "دوره (ساعت)", name: "period", type: "number" },
          { label: "وضعیت", name: "status", type: "text" },
        ]}
      />
    </div>
  );
};

export default Rewards;
```

#### 3.20. صفحه لاگ‌ها (client/src/pages/Logs.tsx)
صفحه نمایش لاگ‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Logs = () => {
  const [logs, setLogs] = useState<any[]>([]);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/logs");
        setLogs(response.data);
      } catch (error) {
        console.error("Error fetching logs:", error);
      }
    };
    fetchLogs();
  }, []);

  const columns = ["کاربر", "فعالیت", "تاریخ"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📜 لاگ‌ها</h1>
      <DataTable
        columns={columns}
        data={logs.map((log) => ({
          id: log.id,
          کاربر: log.user,
          فعالیت: log.action,
          تاریخ: log.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </div>
  );
};

export default Logs;
```

#### 3.21. صفحه تنظیمات (client/src/pages/Settings.tsx)
صفحه تنظیمات پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";

const Settings = () => {
  const [settings, setSettings] = useState({
    conversionRate: 0,
    robberyChance: 0,
    walletLockDuration: 24,
    lotteryChances: { "200": 40, "500": 14, "1000": 7, "10000": 5 },
    gameEnabled: false,
    rewardPeriod: 0,
  });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">⚙️ تنظیمات</h1>
      <div className="glass p-4">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-3 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>مدت زمان قفل کیف پول (ساعت):</label>
            <input
              type="number"
              value={settings.walletLockDuration}
              onChange={(e) => setSettings({ ...settings, walletLockDuration: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات لاتاری</h2>
        <div className="grid grid-cols-4 gap-4">
          <div>
            <label>شانس 200 سی‌کوین (%):</label>
            <input
              type="number"
              value={settings.lotteryChances["200"]}
              onChange={(e) =>
                setSettings({
                  ...settings,
                  lotteryChances: { ...settings.lotteryChances, "200": parseInt(e.target.value) },
                })
              }
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس 500 سی‌کوین (%):</label>
            <input
              type="number"
              value={settings.lotteryChances["500"]}
              onChange={(e) =>
                setSettings({
                  ...settings,
                  lotteryChances: { ...settings.lotteryChances, "500": parseInt(e.target.value) },
                })
              }
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس 1000 سی‌کوین (%):</label>
            <input
              type="number"
              value={settings.lotteryChances["1000"]}
              onChange={(e) =>
                setSettings({
                  ...settings,
                  lotteryChances: { ...settings.lotteryChances, "1000": parseInt(e.target.value) },
                })
              }
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس 10000 سی‌کوین (%):</label>
            <input
              type="number"
              value={settings.lotteryChances["10000"]}
              onChange={(e) =>
                setSettings({
                  ...settings,
                  lotteryChances: { ...settings.lotteryChances, "10000": parseInt(e.target.value) },
                })
              }
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات بازی‌ها</h2>
        <div>
          <label>فعال کردن بازی‌ها:</label>
          <input
            type="checkbox"
            checked={settings.gameEnabled}
            onChange={(e) => setSettings({ ...settings, gameEnabled: e.target.checked })}
          />
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات جایزه‌ها</h2>
        <div>
          <label>دوره جایزه (ساعت):</label>
          <input
            type="number"
            value={settings.rewardPeriod}
            onChange={(e) => setSettings({ ...settings, rewardPeriod: parseInt(e.target.value) })}
            className="p-2 rounded bg-gray-800 text-white w-full"
          />
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-6"
        >
          ذخیره تنظیمات
        </button>
      </div>
    </div>
  );
};

export default Settings;
```

#### 3.22. بک‌اند (server/admin.ts)
روت‌های API