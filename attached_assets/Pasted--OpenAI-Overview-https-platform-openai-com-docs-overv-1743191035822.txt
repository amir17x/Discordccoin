با توجه به مطالعه‌ای که از دو صفحه مستندات OpenAI ([Overview](https://platform.openai.com/docs/overview) و [API Reference Introduction](https://platform.openai.com/docs/api-reference/introduction)) انجام دادم، حالا یه مستندسازی دقیق، کامل و جامع برای اتصال API ChatGPT (که توسط OpenAI ارائه می‌شه) به یه ربات دیسکورد آماده می‌کنم. این مستندسازی طوری طراحی شده که هر کسی با دانش اولیه پایتون بتونه به‌راحتی این کار رو انجام بده. من از کتابخونه‌های استاندارد و روش‌های امن استفاده می‌کنم و همه جزئیات رو قدم‌به‌قدم توضیح می‌دم.

---

### مستندسازی جامع: اتصال API ChatGPT (OpenAI) به ربات دیسکورد

#### هدف
هدف این مستند اینه که یه ربات دیسکورد بسازیم که بتونه با استفاده از API ChatGPT (اوپن‌ای‌آی) به پیام‌های کاربران پاسخ بده. کاربر توی دیسکورد یه پیام می‌فرسته (مثلاً با دستور `!chat`) و ربات اون پیام رو به API اوپن‌ای‌آی می‌فرسته، جواب رو می‌گیره و توی دیسکورد نمایش می‌ده.

---

#### پیش‌نیازها
برای شروع، باید یه سری ابزار و دسترسی‌ها رو آماده کنید:

1. **حساب OpenAI و کلید API:**
   - به [OpenAI Platform](https://platform.openai.com/) برید و یه حساب بسازید یا وارد حساب موجود بشید.
   - از بخش **API Keys** (توی داشبورد) یه کلید API جدید بسازید. این کلید رو کپی کنید و جایی امن نگه دارید.
   - توجه: برای استفاده از API، ممکنه نیاز به اضافه کردن اطلاعات پرداخت (Billing) داشته باشید، همون‌طور که توی درخواست‌های قبلی بحث شد.

2. **ربات دیسکورد و توکن:**
   - به [Discord Developer Portal](https://discord.com/developers/applications) برید.
   - یه اپلیکیشن جدید بسازید (مثلاً اسمش رو بذارید `ChatGPTBot`).
   - توی بخش **Bot** یه ربات جدید اضافه کنید و توکن ربات رو کپی کنید.
   - توی بخش **OAuth2 > URL Generator**، دسترسی‌های زیر رو انتخاب کنید:
     - Scopes: `bot`
     - Bot Permissions: `Send Messages`, `Read Messages/View Channels`
   - لینک تولیدشده رو کپی کنید و ربات رو به سرور دیسکورد خودتون دعوت کنید.

3. **محیط توسعه:**
   - پایتون نسخه 3.8 یا بالاتر رو نصب کنید.
   - یه IDE مثل VSCode یا PyCharm داشته باشید.
   - یه ترمینال برای اجرای دستورات.

4. **کتابخونه‌های مورد نیاز:**
   - کتابخونه‌های `discord.py` (برای ربات دیسکورد)، `openai` (برای تعامل با API اوپن‌ای‌آی) و `python-dotenv` (برای مدیریت متغیرهای محیطی) رو نصب کنید. توی ترمینال این دستور رو بزنید:
     ```bash
     pip install discord.py openai python-dotenv
     ```

---

#### ساختار پروژه
برای اینکه پروژه منظم باشه، ساختار زیر رو پیشنهاد می‌کنم:

```
chatgpt-discord-bot/
├── bot.py            # کد اصلی ربات
├── .env              # فایل برای ذخیره کلیدها (امنیت بیشتر)
└── requirements.txt  # لیست وابستگی‌ها
```

- **محتوای `requirements.txt`:**
  ```
  discord.py
  openai
  python-dotenv
  ```

- **محتوای `.env`:**
  فایل `.env` برای ذخیره کلیدهای حساس استفاده می‌شه. این فایل رو بسازید و این خطوط رو توش بنویسید:
  ```
  DISCORD_TOKEN=توکن_ربات_دیسکورد_شما
  OPENAI_API_KEY=کلید_API_اوپن_ای_آی_شما
  ```

---

#### کد ربات (bot.py)
اینجا کد اصلی ربات رو می‌نویسم که پیام‌های کاربر رو بگیره، به API اوپن‌ای‌آی بفرسته و جواب رو برگردونه:

```python
import discord
from discord.ext import commands
from openai import OpenAI
import os
from dotenv import load_dotenv

# لود کردن متغیرهای محیطی از فایل .env
load_dotenv()

# تنظیمات اولیه
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# بررسی وجود کلیدها
if not DISCORD_TOKEN or not OPENAI_API_KEY:
    raise ValueError("لطفاً DISCORD_TOKEN و OPENAI_API_KEY رو توی فایل .env وارد کنید.")

# تنظیم کلاینت اوپن‌ای‌آی
openai_client = OpenAI(api_key=OPENAI_API_KEY)

# تنظیم ربات دیسکورد
intents = discord.Intents.default()
intents.message_content = True  # دسترسی به محتوای پیام‌ها
bot = commands.Bot(command_prefix="!", intents=intents)

# رویداد آماده شدن ربات
@bot.event
async def on_ready():
    print(f"ربات {bot.user} با موفقیت آنلاین شد!")

# دستور چت با ChatGPT
@bot.command(name="chat")
async def chat(ctx, *, message):
    try:
        # نمایش پیام "در حال تایپ" برای تجربه کاربری بهتر
        async with ctx.typing():
            # ارسال درخواست به API اوپن‌ای‌آی
            response = openai_client.chat.completions.create(
                model="gpt-3.5-turbo",  # مدل مورد استفاده (می‌تونید به gpt-4 تغییر بدید اگه دسترسی دارید)
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": message}
                ],
                max_tokens=150,  # حداکثر طول پاسخ
                temperature=0.7,  # میزان خلاقیت (0 تا 1)
                top_p=1.0,  # کنترل تنوع پاسخ
                frequency_penalty=0.0,  # جریمه برای تکرار
                presence_penalty=0.0  # جریمه برای موضوعات جدید
            )

            # گرفتن پاسخ از API
            reply = response.choices[0].message.content.strip()

            # ارسال پاسخ به دیسکورد
            await ctx.send(reply)

    except Exception as e:
        # مدیریت خطاها
        await ctx.send(f"یه مشکلی پیش اومد: {str(e)}")
        print(f"خطا: {str(e)}")  # لاگ کردن خطا برای دیباگ

# اجرای ربات
bot.run(DISCORD_TOKEN)
```

---

#### توضیحات کد
1. **وارد کردن کتابخونه‌ها:**
   - `discord` و `discord.ext.commands` برای ساخت ربات دیسکورد.
   - `openai` برای تعامل با API اوپن‌ای‌آی.
   - `python-dotenv` برای لود کردن متغیرهای محیطی از فایل `.env`.

2. **مدیریت کلیدها:**
   - کلیدهای حساس (توکن دیسکورد و کلید API اوپن‌ای‌آی) توی فایل `.env` ذخیره می‌شن تا امنیت بیشتری داشته باشن.
   - کد بررسی می‌کنه که کلیدها وجود داشته باشن، وگرنه خطا می‌ده.

3. **تنظیمات ربات دیسکورد:**
   - `intents.message_content = True` برای دسترسی به محتوای پیام‌ها.
   - پیشوند دستورات `!` هست (مثلاً `!chat`).

4. **دستور `!chat`:**
   - این دستور پیام کاربر رو می‌گیره (بعد از `!chat`) و به API اوپن‌ای‌آی می‌فرسته.
   - از `ctx.typing()` استفاده شده تا ربات حالت "در حال تایپ" رو نشون بده و تجربه کاربری بهتری ایجاد بشه.

5. **درخواست به API اوپن‌ای‌آی:**
   - از endpoint `/chat/completions` استفاده می‌کنیم (طبق مستندات API Reference).
   - مدل `gpt-3.5-turbo` انتخاب شده، ولی اگه به مدل‌های پیشرفته‌تر مثل `gpt-4` دسترسی دارید، می‌تونید تغییرش بدید.
   - پارامترهای `max_tokens`، `temperature` و غیره برای کنترل پاسخ تنظیم شدن.

6. **مدیریت خطاها:**
   - اگه خطایی رخ بده (مثلاً مشکل در API یا محدودیت نرخ)، خطا به کاربر نشون داده می‌شه و توی کنسول هم لاگ می‌شه.

---

#### اجرا کردن ربات
1. فایل `bot.py` رو ذخیره کنید.
2. مطمئن بشید که فایل `.env` رو با کلیدهای درست پر کردید.
3. توی ترمینال به پوشه پروژه برید و این دستور رو بزنید:
   ```bash
   python bot.py
   ```
4. اگه همه‌چیز درست باشه، توی کنسول می‌بینید: `ربات [اسم ربات] با موفقیت آنلاین شد!`.

---

#### تست ربات
1. توی سرور دیسکوردتون برید و یه پیام با فرمت زیر بنویسید:
   ```
   !chat سلام، چطور می‌تونم یه ربات دیسکورد بسازم؟
   ```
2. ربات باید یه پاسخ از ChatGPT بگیره و به شما برگردونه، مثلاً:
   ```
   برای ساخت یه ربات دیسکورد، می‌تونی از کتابخونه discord.py استفاده کنی. اول باید...
   ```

---

#### نکات پیشرفته
1. **مدیریت تاریخچه چت:**
   - اگه بخواید ربات بتونه مکالمه مداوم داشته باشه (یعنی تاریخچه پیام‌ها رو نگه داره)، می‌تونید یه دیکشنری یا دیتابیس (مثل SQLite) برای ذخیره پیام‌ها اضافه کنید. مثلاً:
     ```python
     chat_history = {}

     @bot.command(name="chat")
     async def chat(ctx, *, message):
         user_id = ctx.author.id
         if user_id not in chat_history:
             chat_history[user_id] = [
                 {"role": "system", "content": "You are a helpful assistant."}
             ]
         chat_history[user_id].append({"role": "user", "content": message})

         response = openai_client.chat.completions.create(
             model="gpt-3.5-turbo",
             messages=chat_history[user_id],
             max_tokens=150,
             temperature=0.7
         )

         reply = response.choices[0].message.content.strip()
         chat_history[user_id].append({"role": "assistant", "content": reply})

         await ctx.send(reply)
     ```

2. **محدودیت نرخ (Rate Limiting):**
   - API اوپن‌ای‌آی محدودیت نرخ داره (طبق مستندات). اگه درخواست‌های زیادی بفرستید، خطای `429 Too Many Requests` می‌گیرید. می‌تونید تاخیر (delay) اضافه کنید:
     ```python
     import asyncio
     await asyncio.sleep(1)  # تاخیر 1 ثانیه‌ای بین درخواست‌ها
     ```

3. **پشتیبانی از مدل‌های مختلف:**
   - می‌تونید مدل رو به `gpt-4` یا مدل‌های دیگه تغییر بدید (اگه دسترسی دارید). لیست مدل‌ها رو می‌تونید با درخواست `GET /models` از API بگیرید.

4. **بهینه‌سازی تجربه کاربری:**
   - می‌تونید پاسخ‌های طولانی رو به چند پیام تقسیم کنید:
     ```python
     if len(reply) > 2000:  # محدودیت دیسکورد برای طول پیام
         parts = [reply[i:i+1900] for i in range(0, len(reply), 1900)]
         for part in parts:
             await ctx.send(part)
     else:
         await ctx.send(reply)
     ```

5. **امنیت:**
   - کلید API و توکن ربات رو هیچ‌وقت توی کد هاردکد نکنید. همیشه از فایل `.env` استفاده کنید.
   - دسترسی‌های ربات رو توی دیسکورد محدود کنید (فقط به کانال‌هایی که نیاز داره دسترسی داشته باشه).

---

#### مستندات API اوپن‌ای‌آی (بر اساس مطالعه)
طبق مستندات اوپن‌ای‌آی که مطالعه کردم:
- **پایگاه اصلی:** `https://api.openai.com/v1`
- **احراز هویت:** نیاز به سربرگ `Authorization: Bearer YOUR_API_KEY` داره (که کتابخونه `openai` این کار رو خودکار انجام می‌ده).
- **پاسخ‌ها:** به‌صورت JSON هستن و شامل فیلدهایی مثل `id`, `choices`, `usage` (برای تعداد توکن‌های مصرف‌شده) می‌شن.
- **پارامترهای مهم برای `/chat/completions`:**
  - `model`: مدل مورد استفاده (مثلاً `gpt-3.5-turbo`).
  - `messages`: لیست پیام‌ها با نقش‌های `system`, `user`, `assistant`.
  - `max_tokens`: حداکثر طول پاسخ.
  - `temperature`: کنترل خلاقیت (0 تا 1).
  - `top_p`: کنترل تنوع پاسخ.
  - `frequency_penalty` و `presence_penalty`: برای تنظیم تکرار و موضوعات جدید.

---

#### عیب‌یابی (Troubleshooting)
- **خطای 401 (Unauthorized):** کلید API اشتباهه یا منقضی شده. کلید رو توی داشبورد اوپن‌ای‌آی چک کنید.
- **خطای 429 (Too Many Requests):** تعداد درخواست‌ها از حد مجاز گذشته. تاخیر بین درخواست‌ها اضافه کنید.
- **ربات پیام‌ها رو نمی‌خونه:** مطمئن بشید که `intents.message_content` فعاله و ربات دسترسی لازم رو توی سرور داره.
- **پاسخ خالی یا ناقص:** `max_tokens` رو افزایش بدید یا مدل رو عوض کنید.

---

#### نتیجه
با این مستند، شما یه ربات دیسکورد دارید که با API ChatGPT اوپن‌ای‌آی کار می‌کنه. این ربات می‌تونه به پیام‌های کاربران پاسخ بده و قابلیت‌های پیشرفته‌تری مثل مدیریت تاریخچه چت هم بهش اضافه بشه. اگه سوالی دارید یا می‌خواید قابلیت خاصی اضافه کنید (مثلاً تولید تصویر یا چت صوتی)، بفرمایید تا براتون پیاده‌سازی کنم!