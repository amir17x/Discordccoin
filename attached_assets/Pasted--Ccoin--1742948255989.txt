### مستند جامع و پیشرفته برای ارتقاء و توسعه پنل ادمین تحت وب ربات دیسکورد Ccoin

#### مقدمه
این مستند با هدف توسعه و بهبود پنل ادمین تحت وب ربات دیسکورد Ccoin طراحی شده است. با توجه به تصاویر ارائه‌شده از منوی اصلی ربات دیسکورد و منوی فعلی پنل ادمین، هدف این است که تمام قابلیت‌ها و بخش‌های ربات در یک پنل ادمین جامع و یکپارچه تحت کنترل قرار گیرند. این پنل به ادمین امکان می‌دهد تمام جنبه‌های ربات شامل مدیریت کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، فعالیت‌ها، و تنظیمات را به‌صورت کامل مدیریت کرده و تغییرات لازم را اعمال کند. این مستند شامل تحلیل منوی فعلی، ادغام با بخش‌های جدید، طراحی UI/UX پیشرفته، و پیاده‌سازی کدهای لازم برای ایجاد یک پنل ادمین تحت وب حرفه‌ای است.

---

### 1. تحلیل منوی فعلی و بخش‌های جدید ربات دیسکورد

#### 1.1. منوی فعلی پنل ادمین
بر اساس تصویر منوی فعلی پنل ادمین، بخش‌های زیر وجود دارند:
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال).
- **👥 کاربرها:** احتمالاً برای مدیریت کاربرها.
- **🏰 کلن‌ها:** احتمالاً برای مدیریت کلن‌ها.
- **🛒 محصولات:** نمایش و مدیریت محصولات (مانند Wallet Lock، Voice Booster).
- **⚙️ تنظیمات:** احتمالاً برای تنظیمات ربات.
- **🚪 خروج:** برای خروج از پنل.

**مشکلات:**
- بخش‌های محدودی وجود دارد و بسیاری از قابلیت‌های ربات (مانند اقتصاد، کوئست‌ها، بازی‌ها، و لاگ‌ها) پوشش داده نشده‌اند.
- قابلیت‌های تعاملی (مانند ویرایش، حذف، یا اضافه کردن) به‌صورت واضح مشخص نیست.
- طراحی منو ساده است و نیاز به بهبود بصری دارد.

#### 1.2. منوی ربات دیسکورد (بر اساس تصاویر جدید)
با توجه به تصاویر جدید، بخش‌ها و قابلیت‌های زیر در ربات دیسکورد شناسایی شدند:

##### 1.2.1. اقتصاد (`/bal`, `/bank`, `/money`, `/top`, `/rob`, `/give`)
- **نمایش موجودی کاربر:**
  - سی‌کوین (Ccoin)
  - کریستال (Crystals)
  - موجودی بانک (Bank)
  - پول نقد (Money)
  - رتبه (Rank)
  - پیام‌ها (Messages)
- **رتبه‌بندی (Top):**
  - نمایش رتبه‌بندی کاربرها بر اساس سی‌کوین، کریستال، و پیام‌ها.
- **سرقت (Rob):**
  - سرقت سی‌کوین از کاربر دیگر با شانس مشخص (40% شانس موفقیت در تصویر).
  - قابلیت Wallet Lock برای جلوگیری از سرقت.
- **انتقال (Give):**
  - انتقال سی‌کوین بین کاربرها.

##### 1.2.2. کلن‌ها (`/clan`)
- ایجاد، ویرایش، و حذف کلن‌ها.
- نمایش اطلاعات کلن (اعضا، سی‌کوین کلن).
- نقش‌ها در کلن (Leader, Co-Leader, Elder, Member).
- هزینه‌ها:
  - ایجاد کلن: 10,000 سی‌کوین
  - ارتقاء کلن: 5,000 سی‌کوین

##### 1.2.3. کوئست‌ها (`/quest`)
- کوئست‌ها با جوایز مختلف:
  - پیام‌ها: 100 سی‌کوین برای 10 پیام
  - فعالیت صوتی: 200 سی‌کوین برای 5 ساعت
  - بزرگ: 10,000 سی‌کوین برای فعالیت خاص

##### 1.2.4. محصولات (`/shop`)
- **محصولات موجود:**
  - **Legendary Role:** 10% شانس سرقت بهتر، 10% تخفیف فروشگاه (قیمت: 336 کریستال)
  - **Voice Booster:** افکت صوتی خاص برای 24 ساعت (قیمت: 700 سی‌کوین)
  - **Wallet Lock:** محافظت از سرقت برای 24 ساعت (قیمت: 200 سی‌کوین)
  - **Lottery Ticket:** شرکت در قرعه‌کشی (قیمت: 500 سی‌کوین)
  - **Mystery Box Key:** باز کردن جعبه مرموز با جوایز تصادفی (قیمت: 300 سی‌کوین)
  - **Special Role:** 5% شانس سرقت بهتر، 5% تخفیف فروشگاه (قیمت: 168 کریستال)

##### 1.2.5. بازی‌ها (`/game`)
- بازی‌هایی مانند حدس عدد با جوایز سی‌کوین.

##### 1.2.6. جایزه‌ها (`/reward`)
- جایزه روزانه (Daily Reward).
- جوایز کوئست‌ها (مانند 100 سی‌کوین برای 10 پیام).

##### 1.2.7. فعالیت‌ها (`/active`)
- نمایش فعالیت‌های کاربر (پیام‌ها، فعالیت صوتی).

##### 1.2.8. مدیریت (`/admin`)
- دستورات ادمین برای تغییر موجودی، تنظیمات، و مدیریت کاربرها.

##### 1.2.9. سایر قابلیت‌ها
- **Help:** نمایش راهنما.
- **Ping:** بررسی وضعیت ربات.
- **Vote:** رأی دادن به ربات.
- **Invite:** دعوت ربات به سرور.

**نیازها:**
- تمام بخش‌های ربات دیسکورد باید در پنل ادمین تحت وب قابل مدیریت باشند.
- ادمین باید بتواند تمام جنبه‌ها (کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، فعالیت‌ها، و تنظیمات) را کنترل و تغییر دهد.
- قابلیت‌های جدید مانند مدیریت محصولات، تنظیمات سرقت، و رتبه‌بندی باید به پنل اضافه شوند.

---

### 2. ادغام و گسترش منوی پنل ادمین

برای پوشش تمام بخش‌های ربات دیسکورد و ایجاد یک پنل ادمین پیشرفته، منوی پنل ادمین به صورت زیر گسترش می‌یابد:

#### 2.1. منوی جدید پیشنهادی
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال، کوئست‌ها، فعالیت‌ها، محصولات، و وضعیت ربات).
- **👥 کاربرها:** مدیریت کاربرها (نمایش، ویرایش، حذف، اضافه کردن، تغییر موجودی، رتبه‌بندی).
- **💰 اقتصاد:** مدیریت اقتصاد (نمایش تراکنش‌ها، تغییر موجودی، تنظیم نرخ تبدیل، مدیریت سرقت و انتقال).
- **🏰 کلن‌ها:** مدیریت کلن‌ها (نمایش، ایجاد، ویرایش، حذف، مدیریت نقش‌ها).
- **🎯 کوئست‌ها:** مدیریت کوئست‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🛒 محصولات:** مدیریت محصولات (نمایش، ایجاد، ویرایش، حذف، خرید، تنظیم شانس‌ها).
- **🎮 بازی‌ها:** مدیریت بازی‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎁 جایزه‌ها:** مدیریت جایزه‌ها (نمایش، ایجاد، ویرایش، حذف، تخصیص جایزه).
- **📈 فعالیت‌ها:** نمایش و مدیریت فعالیت‌های کاربرها (پیام‌ها، فعالیت صوتی).
- **📜 لاگ‌ها:** نمایش لاگ فعالیت‌ها (فعالیت‌های کاربرها، ادمین‌ها، و ربات).
- **⚙️ تنظیمات:** تنظیمات ربات (نرخ تبدیل، تنظیمات سرقت، تنظیمات بازی‌ها، تنظیمات جایزه‌ها، تم، و وضعیت ربات).
- **🚪 خروج:** خروج از پنل.

#### 2.2. قابلیت‌های جدید و پیشرفته در هر بخش
##### 2.2.1. داشبورد
- نمایش کارت‌های آماری:
  - تعداد کاربرها (فعال/کل).
  - تعداد کلن‌ها.
  - مجموع سی‌کوین و کریستال در گردش.
  - تعداد کوئست‌های فعال.
  - تعداد محصولات فروخته‌شده.
  - فعالیت‌های اخیر (پیام‌ها، فعالیت صوتی).
- نمودارها:
  - نمودار رشد سی‌کوین و کریستال در هفته.
  - نمودار فعالیت کاربرها (پیام‌ها، فعالیت صوتی).
  - نمودار فروش محصولات.
- وضعیت ربات:
  - آپتایم ربات.
  - مصرف حافظه.
  - تعداد سرورهای متصل.

##### 2.2.2. کاربرها
- **نمایش:**
  - جدول کاربرها با ستون‌های: نام، آیدی، سی‌کوین، کریستال، موجودی بانک، پول نقد، رتبه، پیام‌ها، فعالیت صوتی.
  - قابلیت جستجو و فیلتر (بر اساس نام، آیدی، یا رتبه).
- **ویرایش:**
  - تغییر سی‌کوین، کریستال، موجودی بانک، پول نقد، رتبه.
  - تغییر نقش کاربر (Leader, Co-Leader, Elder, Member).
- **حذف و اضافه کردن:**
  - حذف کاربر.
  - اضافه کردن کاربر جدید با اطلاعات اولیه.
- **رتبه‌بندی:**
  - نمایش Top 10 کاربر بر اساس سی‌کوین، کریستال، پیام‌ها، و فعالیت صوتی.
  - قابلیت فیلتر رتبه‌بندی (روزانه، هفتگی، ماهانه).

##### 2.2.3. اقتصاد
- **نمایش تراکنش‌ها:**
  - جدول تراکنش‌ها با ستون‌های: کاربر، نوع (سرقت، انتقال، خرید)، مقدار، تاریخ.
  - قابلیت فیلتر (بر اساس نوع، کاربر، یا تاریخ).
- **تغییر موجودی:**
  - فرم برای تغییر سی‌کوین، کریستال، موجودی بانک، و پول نقد کاربر.
- **تنظیمات اقتصاد:**
  - نرخ تبدیل (سی‌کوین به کریستال و بالعکس).
  - شانس سرقت (مانند 40% در تصویر).
  - محدودیت انتقال (حداقل/حداکثر مقدار).
  - فعال/غیرفعال کردن سرقت و انتقال.
- **آمار اقتصاد:**
  - مجموع سی‌کوین و کریستال در گردش.
  - نمودار تراکنش‌ها (روزانه، هفتگی، ماهانه).

##### 2.2.4. کلن‌ها
- **نمایش:**
  - جدول کلن‌ها با ستون‌های: نام، آیدی، اعضا، سی‌کوین کلن، نقش‌ها.
  - قابلیت جستجو و فیلتر.
- **مدیریت:**
  - ایجاد کلن جدید (هزینه: 10,000 سی‌کوین).
  - ویرایش کلن (تغییر نام، اعضا، سی‌کوین، نقش‌ها).
  - حذف کلن.
- **نقش‌ها:**
  - مدیریت نقش‌ها (Leader, Co-Leader, Elder, Member).
  - ارتقاء کلن (هزینه: 5,000 سی‌کوین).

##### 2.2.5. کوئست‌ها
- **نمایش:**
  - جدول کوئست‌ها با ستون‌های: نام، توضیحات، جایزه، وضعیت (فعال/غیرفعال).
- **مدیریت:**
  - ایجاد کوئست جدید (مانند 100 سی‌کوین برای 10 پیام).
  - ویرایش کوئست (تغییر جایزه، توضیحات، وضعیت).
  - حذف کوئست.
- **آمار:**
  - تعداد کوئست‌های تکمیل‌شده.
  - نمودار پیشرفت کوئست‌ها.

##### 2.2.6. محصولات
- **نمایش:**
  - جدول محصولات با ستون‌های: نام، آیکون، قیمت (سی‌کوین/کریستال)، شانس سرقت، شانس لجندری، دوره، توضیحات.
- **مدیریت:**
  - ایجاد محصول جدید (مانند Lottery Ticket، Mystery Box Key).
  - ویرایش محصول (تغییر قیمت، شانس‌ها، دوره، توضیحات).
  - حذف محصول.
  - خرید محصول برای کاربر.
- **تنظیمات شانس‌ها:**
  - شانس سرقت (مانند 10% برای Legendary Role).
  - شانس لجندری (مانند 5% برای Special Role).
- **آمار فروش:**
  - تعداد محصولات فروخته‌شده.
  - نمودار فروش (روزانه، هفتگی، ماهانه).

##### 2.2.7. بازی‌ها
- **نمایش:**
  - جدول بازی‌ها با ستون‌های: نام، توضیحات، جایزه، وضعیت.
- **مدیریت:**
  - ایجاد بازی جدید (مانند حدس عدد).
  - ویرایش بازی (تغییر جایزه، قوانین).
  - حذف بازی.
- **آمار:**
  - تعداد بازی‌های انجام‌شده.
  - نمودار جوایز توزیع‌شده.

##### 2.2.8. جایزه‌ها
- **نمایش:**
  - جدول جایزه‌ها با ستون‌های: نام، مقدار، دوره، وضعیت.
- **مدیریت:**
  - ایجاد جایزه جدید (مانند جایزه روزانه).
  - ویرایش جایزه (تغییر مقدار، دوره).
  - حذف جایزه.
  - تخصیص جایزه به کاربر.
- **آمار:**
  - تعداد جایزه‌های توزیع‌شده.
  - نمودار توزیع جوایز.

##### 2.2.9. فعالیت‌ها
- **نمایش:**
  - جدول فعالیت‌ها با ستون‌های: کاربر، نوع (پیام، فعالیت صوتی)، مقدار، تاریخ.
  - قابلیت فیلتر (بر اساس کاربر، نوع، یا تاریخ).
- **آمار:**
  - نمودار فعالیت‌ها (پیام‌ها، فعالیت صوتی) به‌صورت روزانه، هفتگی، ماهانه.

##### 2.2.10. لاگ‌ها
- **نمایش:**
  - جدول لاگ‌ها با ستون‌های: کاربر، فعالیت (ورود/خروج، تغییرات، تراکنش‌ها)، تاریخ.
  - قابلیت فیلتر (بر اساس تاریخ، نوع فعالیت، یا کاربر).
- **دانلود:**
  - امکان دانلود لاگ‌ها به‌صورت فایل CSV.

##### 2.2.11. تنظیمات
- **تنظیمات اقتصاد:**
  - نرخ تبدیل (سی‌کوین به کریستال).
  - شانس سرقت.
  - محدودیت انتقال.
- **تنظیمات کلن‌ها:**
  - هزینه ایجاد و ارتقاء کلن.
- **تنظیمات کوئست‌ها:**
  - فعال/غیرفعال کردن کوئست‌ها.
- **تنظیمات محصولات:**
  - شانس‌های پیش‌فرض برای محصولات.
- **تنظیمات بازی‌ها:**
  - فعال/غیرفعال کردن بازی‌ها.
  - تنظیم جوایز پیش‌فرض.
- **تنظیمات جایزه‌ها:**
  - دوره و مقدار جایزه‌ها.
- **تنظیمات ربات:**
  - وضعیت ربات (روشن/خاموش).
  - آپتایم و مصرف حافظه.
- **تنظیمات تم:**
  - تغییر تم (Dark/Light).

#### 2.3. بهبود طراحی منو
- **آیکون‌ها:** اضافه کردن آیکون برای هر بخش (مانند 📊 برای داشبورد، 👥 برای کاربرها).
- **افکت شیشه‌ای (Glassmorphism):** استفاده از افکت شیشه‌ای برای منو و کارت‌ها.
- **ناوبری آسان:** منو به‌صورت ثابت در سمت راست یا چپ صفحه.
- **زبان یکپارچه:** تمام عناوین به زبان فارسی (مانند "Ccoin" به "سی‌کوین").
- **تم پیشرفته:** تم تیره با رنگ‌های جذاب (مانند بنفش و آبی دیسکورد).
- **انیمیشن‌ها:** اضافه کردن انیمیشن‌های نرم برای تعاملات (مانند هاور، کلیک).

---

### 3. طراحی جدید منوی پنل ادمین

#### 3.1. ساختار UI پیشرفته
- **نوار کناری (Sidebar):**
  - لوگوی ربات (Ccoin Bot).
  - نام ادمین (whysiks).
  - منو با آیکون‌ها: داشبورد، کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، فعالیت‌ها، لاگ‌ها، تنظیمات، خروج.
- **هدر (Header):**
  - نام ادمین و آواتار.
  - دکمه تغییر تم (Dark/Light).
  - دکمه وضعیت ربات (روشن/خاموش).
  - دکمه خروج (Logout).
- **بخش اصلی (Main Content):**
  - کارت‌های آماری با افکت شیشه‌ای.
  - جداول با قابلیت جستجو، فیلتر، و مرتب‌سازی.
  - فرم‌ها برای ویرایش و اضافه کردن.
  - نمودارهای تعاملی (با Chart.js).

#### 3.2. نمونه طراحی منو
یه نمونه متنی از منوی جدید:

```
[Sidebar]
- Logo: Ccoin Bot
- Admin: whysiks
- 📊 داشبورد
- 👥 کاربرها
- 💰 اقتصاد
- 🏰 کلن‌ها
- 🎯 کوئست‌ها
- 🛒 محصولات
- 🎮 بازی‌ها
- 🎁 جایزه‌ها
- 📈 فعالیت‌ها
- 📜 لاگ‌ها
- ⚙️ تنظیمات
- 🚪 خروج

[Header]
- whysiks (Avatar) | 🌙 تم تیره | 🟢 ربات روشن | خروج
```

#### 3.3. صفحات جدید و پیشرفته
- **داشبورد:** کارت‌های آماری (کاربرها، کلن‌ها، سی‌کوین، کریستال)، نمودارهای رشد، و وضعیت ربات.
- **کاربرها:** جدول کاربرها با قابلیت جستجو، فیلتر، ویرایش، حذف، و رتبه‌بندی.
- **اقتصاد:** نمایش تراکنش‌ها، فرم تغییر موجودی، تنظیمات نرخ تبدیل و سرقت، نمودار تراکنش‌ها.
- **کلن‌ها:** جدول کلن‌ها با قابلیت ایجاد، ویرایش، حذف، و مدیریت نقش‌ها.
- **کوئست‌ها:** جدول کوئست‌ها با قابلیت ایجاد، ویرایش، حذف، و نمودار پیشرفت.
- **محصولات:** جدول محصولات با قابلیت ایجاد، ویرایش، حذف، خرید، و تنظیم شانس‌ها.
- **بازی‌ها:** جدول بازی‌ها با قابلیت ایجاد، ویرایش، حذف، و نمودار جوایز.
- **جایزه‌ها:** جدول جایزه‌ها با قابلیت ایجاد، ویرایش، حذف، تخصیص، و نمودار توزیع.
- **فعالیت‌ها:** جدول فعالیت‌ها با فیلتر و نمودار.
- **لاگ‌ها:** جدول لاگ‌ها با فیلتر و امکان دانلود.
- **تنظیمات:** فرم‌های تنظیمات برای اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، و ربات.

---

### 4. پیاده‌سازی کد

#### 4.1. نصب پکیج‌های مورد نیاز
پکیج‌های زیر برای توسعه پنل نصب می‌شوند:

```bash
# برای بک‌اند
npm install express express-session discord-oauth2 sqlite3 discord.js

# برای فرانت‌اند (توی پوشه client)
cd client
npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons react-router-dom framer-motion
```

#### 4.2. ساختار پروژه
ساختار پروژه به صورت زیر تنظیم می‌شود:

```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های API
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   ├── bot.ts          # ربات دیسکورد
├── client/
│   ├── src/
│   │   ├── assets/
│   │   │   ├── theme/
│   │   │   │   ├── colors.js
│   │   │   │   └── typography.js
│   │   ├── components/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── GlassCard.tsx
│   │   │   ├── DataTable.tsx
│   │   │   └── ChartComponent.tsx
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Users.tsx
│   │   │   ├── Economy.tsx
│   │   │   ├── Clans.tsx
│   │   │   ├── Quests.tsx
│   │   │   ├── Products.tsx
│   │   │   ├── Games.tsx
│   │   │   ├── Rewards.tsx
│   │   │   ├── Activities.tsx
│   │   │   ├── Logs.tsx
│   │   │   └── Settings.tsx
│   │   ├── App.tsx
│   │   ├── index.tsx
│   │   ├── routes.tsx
│   │   └── styles.css
│   ├── package.json
│   └── vite.config.ts
├── package.json
└── .replit
```

#### 4.3. تنظیمات تم (client/src/assets/theme/colors.js)
فایل رنگ‌ها برای تم پیشرفته:

```javascript
const colors = {
  background: "#1A1F37",
  card: "rgba(255, 255, 255, 0.1)",
  text: "#FFFFFF",
  primary: "#7289DA",
  secondary: "#3B82F6",
  accent: "#10B981",
  warning: "#F59E0B",
  error: "#EF4444",
  success: "#34D399",
  glassBorder: "rgba(255, 255, 255, 0.2)",
};

export default colors;
```

#### 4.4. استایل‌های شیشه‌ای (client/src/styles.css)
استایل‌های شیشه‌ای برای منو و کارت‌ها:

```css
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.glass:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

body {
  background: #1A1F37;
  color: #FFFFFF;
  font-family: "Vazirmatn", sans-serif;
}
```

#### 4.5. کامپوننت Sidebar (client/src/components/Sidebar.tsx)
نوار کناری با طراحی پیشرفته:

```tsx
import { Link, useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { FaChartBar, FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaShoppingCart, FaGamepad, FaGift, FaChartLine, FaFileAlt, FaCog, FaSignOutAlt } from "react-icons/fa";

const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: "/dashboard", label: "داشبورد", icon: <FaChartBar /> },
    { path: "/users", label: "کاربرها", icon: <FaUsers /> },
    { path: "/economy", label: "اقتصاد", icon: <FaMoneyBillWave /> },
    { path: "/clans", label: "کلن‌ها", icon: <FaShieldAlt /> },
    { path: "/quests", label: "کوئست‌ها", icon: <FaTasks /> },
    { path: "/products", label: "محصولات", icon: <FaShoppingCart /> },
    { path: "/games", label: "بازی‌ها", icon: <FaGamepad /> },
    { path: "/rewards", label: "جایزه‌ها", icon: <FaGift /> },
    { path: "/activities", label: "فعالیت‌ها", icon: <FaChartLine /> },
    { path: "/logs", label: "لاگ‌ها", icon: <FaFileAlt /> },
    { path: "/settings", label: "تنظیمات", icon: <FaCog /> },
    { path: "/logout", label: "خروج", icon: <FaSignOutAlt /> },
  ];

  return (
    <motion.aside
      initial={{ x: 100 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.5 }}
      className="fixed top-0 right-0 w-64 h-full glass p-4"
    >
      <div className="text-center mb-6">
        <img src="/logo.png" alt="Ccoin Bot" className="w-16 mx-auto" />
        <h2 className="text-xl font-bold mt-2">ربات سی‌کوین</h2>
        <p className="text-gray-400">ادمین: whysiks</p>
      </div>
      <nav>
        {menuItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`flex items-center space-x-2 py-2 px-4 rounded mb-2 ${
              location.pathname === item.path ? "bg-primary" : "hover:bg-gray-700"
            }`}
          >
            {item.icon}
            <span>{item.label}</span>
          </Link>
        ))}
      </nav>
    </motion.aside>
  );
};

export default Sidebar;
```

#### 4.6. کامپوننت Header (client/src/components/Header.tsx)
هدر با طراحی پیشرفته:

```tsx
import { FaMoon, FaSignOutAlt, FaPowerOff } from "react-icons/fa";
import { motion } from "framer-motion";

const Header = () => {
  const handleLogout = async () => {
    await fetch("http://localhost:5000/api/admin/logout");
    window.location.href = "/";
  };

  const toggleBotStatus = async () => {
    await fetch("http://localhost:5000/api/admin/toggle-bot");
    // به‌روزرسانی وضعیت ربات
  };

  return (
    <motion.header
      initial={{ y: -50 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
      className="glass p-4 flex justify-between items-center"
    >
      <div className="flex items-center space-x-4">
        <img src="https://via.placeholder.com/40" alt="Avatar" className="w-10 h-10 rounded-full" />
        <span className="font-semibold">whysiks (ادمین)</span>
      </div>
      <div className="flex space-x-4">
        <button className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2">
          <FaMoon />
          <span>تم تیره</span>
        </button>
        <button
          onClick={toggleBotStatus}
          className="bg-green-500 hover:bg-green-600 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaPowerOff />
          <span>ربات روشن</span>
        </button>
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaSignOutAlt />
          <span>خروج</span>
        </button>
      </div>
    </motion.header>
  );
};

export default Header;
```

#### 4.7. کامپوننت GlassCard (client/src/components/GlassCard.tsx)
کامپوننت کارت شیشه‌ای برای نمایش آمار:

```tsx
import { motion } from "framer-motion";

interface GlassCardProps {
  title: string;
  value: string | number;
  icon: JSX.Element;
  color: string;
}

const GlassCard = ({ title, value, icon, color }: GlassCardProps) => {
  return (
    <motion.div
      whileHover={{ scale: 1.05 }}
      className={`glass p-4 flex items-center space-x-4 ${color}`}
    >
      <div className="text-3xl">{icon}</div>
      <div>
        <h3 className="text-lg font-semibold">{title}</h3>
        <p className="text-2xl">{value}</p>
      </div>
    </motion.div>
  );
};

export default GlassCard;
```

#### 4.8. کامپوننت DataTable (client/src/components/DataTable.tsx)
کامپوننت جدول پیشرفته با قابلیت جستجو، فیلتر، و مرتب‌سازی:

```tsx
import { useState } from "react";
import { FaEdit, FaTrash, FaSort } from "react-icons/fa";

interface DataTableProps {
  columns: string[];
  data: any[];
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
}

const DataTable = ({ columns, data, onEdit, onDelete }: DataTableProps) => {
  const [search, setSearch] = useState("");
  const [sortColumn, setSortColumn] = useState("");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");

  const filteredData = data.filter((row) =>
    Object.values(row).some((value) =>
      value.toString().toLowerCase().includes(search.toLowerCase())
    )
  );

  const sortedData = [...filteredData].sort((a, b) => {
    if (!sortColumn) return 0;
    const aValue = a[sortColumn];
    const bValue = b[sortColumn];
    if (sortDirection === "asc") {
      return aValue > bValue ? 1 : -1;
    }
    return aValue < bValue ? 1 : -1;
  });

  const handleSort = (column: string) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };

  return (
    <div className="glass p-4">
      <input
        type="text"
        placeholder="جستجو..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-4 p-2 rounded bg-gray-800 text-white w-full"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            {columns.map((col) => (
              <th
                key={col}
                onClick={() => handleSort(col)}
                className="cursor-pointer"
              >
                {col} {sortColumn === col && <FaSort />}
              </th>
            ))}
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {sortedData.map((row) => (
            <tr key={row.id}>
              {Object.values(row).map((value, index) => (
                <td key={index}>{value}</td>
              ))}
              <td>
                <button onClick={() => onEdit(row.id)} className="text-blue-500 mr-2">
                  <FaEdit />
                </button>
                <button onClick={() => onDelete(row.id)} className="text-red-500">
                  <FaTrash />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default DataTable;
```

#### 4.9. کامپوننت ChartComponent (client/src/components/ChartComponent.tsx)
کامپوننت نمودار برای نمایش داده‌های آماری:

```tsx
import { Line } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from "chart.js";

ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);

interface ChartComponentProps {
  labels: string[];
  data: number[];
  label: string;
  borderColor: string;
}

const ChartComponent = ({ labels, data, label, borderColor }: ChartComponentProps) => {
  const chartData = {
    labels,
    datasets: [
      {
        label,
        data,
        borderColor,
        backgroundColor: "rgba(255, 255, 255, 0.1)",
        fill: true,
      },
    ],
  };

  return (
    <div className="glass p-4">
      <Line data={chartData} />
    </div>
  );
};

export default ChartComponent;
```

#### 4.10. صفحه داشبورد (client/src/pages/Dashboard.tsx)
صفحه داشبورد با کارت‌های آماری و نمودارها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import GlassCard from "../components/GlassCard";
import ChartComponent from "../components/ChartComponent";
import { FaUsers, FaShieldAlt, FaMoneyBillWave, FaTasks, FaShoppingCart, FaChartLine } from "react-icons/fa";

const Dashboard = () => {
  const [stats, setStats] = useState({
    users: 0,
    clans: 0,
    ccoin: 0,
    crystals: 0,
    quests: 0,
    productsSold: 0,
  });

  const [chartData, setChartData] = useState({
    ccoinGrowth: { labels: [], data: [] },
    activity: { labels: [], data: [] },
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/stats");
        setStats(response.data);
      } catch (error) {
        console.error("Error fetching stats:", error);
      }
    };

    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/chart-data");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };

    fetchStats();
    fetchChartData();
  }, []);

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📊 داشبورد</h1>
      <div className="grid grid-cols-3 gap-6 mb-6">
        <GlassCard title="کاربرها" value={stats.users} icon={<FaUsers />} color="bg-blue-500" />
        <GlassCard title="کلن‌ها" value={stats.clans} icon={<FaShieldAlt />} color="bg-green-500" />
        <GlassCard title="سی‌کوین در گردش" value={stats.ccoin} icon={<FaMoneyBillWave />} color="bg-yellow-500" />
        <GlassCard title="کریستال در گردش" value={stats.crystals} icon={<FaMoneyBillWave />} color="bg-purple-500" />
        <GlassCard title="کوئست‌های فعال" value={stats.quests} icon={<FaTasks />} color="bg-orange-500" />
        <GlassCard title="محصولات فروخته‌شده" value={stats.productsSold} icon={<FaShoppingCart />} color="bg-red-500" />
      </div>
      <div className="grid grid-cols-2 gap-6">
        <ChartComponent
          labels={chartData.ccoinGrowth.labels}
          data={chartData.ccoinGrowth.data}
          label="رشد سی‌کوین"
          borderColor="#F59E0B"
        />
        <ChartComponent
          labels={chartData.activity.labels}
          data={chartData.activity.data}
          label="فعالیت کاربرها"
          borderColor="#34D399"
        />
      </div>
    </div>
  );
};

export default Dashboard;
```

#### 4.11. صفحه کاربرها (client/src/pages/Users.tsx)
صفحه مدیریت کاربرها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Users = () => {
  const [users, setUsers] = useState<any[]>([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/users");
        setUsers(response.data);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  const handleEdit = async (id: string) => {
    const newCcoin = prompt("مقدار جدید سی‌کوین را وارد کنید:");
    if (newCcoin) {
      try {
        await axios.put(`http://localhost:5000/api/admin/users/${id}`, { ccoin: newCcoin });
        setUsers(users.map((user) => (user.id === id ? { ...user, ccoin: newCcoin } : user)));
      } catch (error) {
        console.error("Error updating user:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/users/${id}`);
        setUsers(users.filter((user) => user.id !== id));
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "سی‌کوین", "کریستال", "بانک", "پول نقد", "رتبه", "پیام‌ها", "فعالیت صوتی"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">👥 کاربرها</h1>
      <DataTable
        columns={columns}
        data={users.map((user) => ({
          id: user.id,
          نام: user.username,
          آیدی: user.id,
          "سی‌کوین": user.ccoin,
          کریستال: user.crystals,
          بانک: user.bank,
          "پول نقد": user.money,
          رتبه: user.rank,
          "پیام‌ها": user.messages,
          "فعالیت صوتی": user.voiceActivity,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Users;
```

#### 4.12. صفحه اقتصاد (client/src/pages/Economy.tsx)
صفحه مدیریت اقتصاد با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Economy = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [settings, setSettings] = useState({ conversionRate: 0, robberyChance: 0 });
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions");
        setTransactions(response.data);
      } catch (error) {
        console.error("Error fetching transactions:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/economy/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/economy/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchTransactions();
    fetchSettings();
    fetchChartData();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/economy/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const columns = ["کاربر", "نوع", "مقدار", "تاریخ"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">💰 اقتصاد</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-4"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <h2 className="text-xl font-semibold mb-4">تراکنش‌ها</h2>
      <DataTable
        columns={columns}
        data={transactions.map((tx) => ({
          id: tx.id,
          کاربر: tx.user,
          نوع: tx.type,
          مقدار: tx.amount,
          تاریخ: tx.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار تراکنش‌ها</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="تراکنش‌ها"
        borderColor="#F59E0B"
      />
    </div>
  );
};

export default Economy;
```

#### 4.13. صفحه کلن‌ها (client/src/pages/Clans.tsx)
صفحه مدیریت کلن‌ها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Clans = () => {
  const [clans, setClans] = useState<any[]>([]);

  useEffect(() => {
    const fetchClans = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/clans");
        setClans(response.data);
      } catch (error) {
        console.error("Error fetching clans:", error);
      }
    };
    fetchClans();
  }, []);

  const handleEdit = async (id: string) => {
    const newName = prompt("نام جدید کلن را وارد کنید:");
    if (newName) {
      try {
        await axios.put(`http://localhost:5000/api/admin/clans/${id}`, { name: newName });
        setClans(clans.map((clan) => (clan.id === id ? { ...clan, name: newName } : clan)));
      } catch (error) {
        console.error("Error updating clan:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کلن را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/clans/${id}`);
        setClans(clans.filter((clan) => clan.id !== id));
      } catch (error) {
        console.error("Error deleting clan:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "اعضا", "سی‌کوین کلن", "نقش‌ها"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🏰 کلن‌ها</h1>
      <DataTable
        columns={columns}
        data={clans.map((clan) => ({
          id: clan.id,
          نام: clan.name,
          آیدی: clan.id,
          اعضا: clan.members,
          "سی‌کوین کلن": clan.ccoin,
          نقش‌ها: clan.roles.join(", "),
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Clans;
```

#### 4.14. صفحه کوئست‌ها (client/src/pages/Quests.tsx)
صفحه مدیریت کوئست‌ها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Quests = () => {
  const [quests, setQuests] = useState<any[]>([]);
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/quests");
        setQuests(response.data);
      } catch (error) {
        console.error("Error fetching quests:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/quests/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchQuests();
    fetchChartData();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید کوئست را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/quests/${id}`, { reward: newReward });
        setQuests(quests.map((quest) => (quest.id === id ? { ...quest, reward: newReward } : quest)));
      } catch (error) {
        console.error("Error updating quest:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کوئست را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/quests/${id}`);
        setQuests(quests.filter((quest) => quest.id !== id));
      } catch (error) {
        console.error("Error deleting quest:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎯 کوئست‌ها</h1>
      <DataTable
        columns={columns}
        data={quests.map((quest) => ({
          id: quest.id,
          نام: quest.name,
          توضیحات: quest.description,
          جایزه: quest.reward,
          وضعیت: quest.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار پیشرفت کوئست‌ها</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="پیشرفت کوئست‌ها"
        borderColor="#34D399"
      />
    </div>
  );
};

export default Quests;
```

#### 4.15. صفحه محصولات (client/src/pages/Products.tsx)
صفحه مدیریت محصولات با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";
import { FaLock, FaVolumeUp, FaUserShield, FaGift, FaKey, FaTicketAlt } from "react-icons/fa";

const Products = () => {
  const [products, setProducts] = useState<any[]>([]);
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchProducts();
    fetchChartData();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrice = prompt("قیمت جدید محصول را وارد کنید:");
    if (newPrice) {
      try {
        await axios.put(`http://localhost:5000/api/admin/products/${id}`, { price: newPrice });
        setProducts(products.map((product) => (product.id === id ? { ...product, price: newPrice } : product)));
      } catch (error) {
        console.error("Error updating product:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این محصول را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/products/${id}`);
        setProducts(products.filter((product) => product.id !== id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
    }
  };

  const icons = {
    "Wallet Lock": <FaLock />,
    "Voice Booster": <FaVolumeUp />,
    "Legendary Role": <FaUserShield />,
    "Special Role": <FaGift />,
    "Mystery Box Key": <FaKey />,
    "Lottery Ticket": <FaTicketAlt />,
  };

  const columns = ["آیکون", "نام", "قیمت (سی‌کوین)", "قیمت (کریستال)", "شانس سرقت", "شانس لجندری", "دوره", "توضیحات"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🛒 محصولات</h1>
      <DataTable
        columns={columns}
        data={products.map((product) => ({
          id: product.id,
          آیکون: icons[product.name],
          نام: product.name,
          "قیمت (سی‌کوین)": product.priceCcoin,
          "قیمت (کریستال)": product.priceCrystals,
          "شانس سرقت": product.robberyChance,
          "شانس لجندری": product.legendaryChance,
          دوره: product.period,
          توضیحات: product.description,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار فروش محصولات</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="فروش محصولات"
        borderColor="#EF4444"
      />
    </div>
  );
};

export default Products;
```

#### 4.16. صفحه بازی‌ها (client/src/pages/Games.tsx)
صفحه مدیریت بازی‌ها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Games = () => {
  const [games, setGames] = useState<any[]>([]);
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchGames = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/games");
        setGames(response.data);
      } catch (error) {
        console.error("Error fetching games:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/games/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchGames();
    fetchChartData();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید بازی را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/games/${id}`, { reward: newReward });
        setGames(games.map((game) => (game.id === id ? { ...game, reward: newReward } : game)));
      } catch (error) {
        console.error("Error updating game:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این بازی را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/games/${id}`);
        setGames(games.filter((game) => game.id !== id));
      } catch (error) {
        console.error("Error deleting game:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎮 بازی‌ها</h1>
      <DataTable
        columns={columns}
        data={games.map((game) => ({
          id: game.id,
          نام: game.name,
          توضیحات: game.description,
          جایزه: game.reward,
          وضعیت: game.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار جوایز بازی‌ها</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="جوایز توزیع‌شده"
        borderColor="#10B981"
      />
    </div>
  );
};

export default Games;
```

#### 4.17. صفحه جایزه‌ها (client/src/pages/Rewards.tsx)
صفحه مدیریت جایزه‌ها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Rewards = () => {
  const [rewards, setRewards] = useState<any[]>([]);
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchRewards = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/rewards");
        setRewards(response.data);
      } catch (error) {
        console.error("Error fetching rewards:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/rewards/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchRewards();
    fetchChartData();
  }, []);

  const handleEdit = async (id: string) => {
    const newAmount = prompt("مقدار جدید جایزه را وارد کنید:");
    if (newAmount) {
      try {
        await axios.put(`http://localhost:5000/api/admin/rewards/${id}`, { amount: newAmount });
        setRewards(rewards.map((reward) => (reward.id === id ? { ...reward, amount: newAmount } : reward)));
      } catch (error) {
        console.error("Error updating reward:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این جایزه را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/rewards/${id}`);
        setRewards(rewards.filter((reward) => reward.id !== id));
      } catch (error) {
        console.error("Error deleting reward:", error);
      }
    }
  };

  const columns = ["نام", "مقدار", "دوره", "وضعیت"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">🎁 جایزه‌ها</h1>
      <DataTable
        columns={columns}
        data={rewards.map((reward) => ({
          id: reward.id,
          نام: reward.name,
          مقدار: reward.amount,
          دوره: reward.period,
          وضعیت: reward.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار توزیع جوایز</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="توزیع جوایز"
        borderColor="#F59E0B"
      />
    </div>
  );
};

export default Rewards;
```

#### 4.18. صفحه فعالیت‌ها (client/src/pages/Activities.tsx)
صفحه نمایش و مدیریت فعالیت‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import ChartComponent from "../components/ChartComponent";

const Activities = () => {
  const [activities, setActivities] = useState<any[]>([]);
  const [chartData, setChartData] = useState({ labels: [], data: [] });

  useEffect(() => {
    const fetchActivities = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/activities");
        setActivities(response.data);
      } catch (error) {
        console.error("Error fetching activities:", error);
      }
    };
    const fetchChartData = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/activities/chart");
        setChartData(response.data);
      } catch (error) {
        console.error("Error fetching chart data:", error);
      }
    };
    fetchActivities();
    fetchChartData();
  }, []);

  const columns = ["کاربر", "نوع", "مقدار", "تاریخ"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📈 فعالیت‌ها</h1>
      <DataTable
        columns={columns}
        data={activities.map((activity) => ({
          id: activity.id,
          کاربر: activity.user,
          نوع: activity.type,
          مقدار: activity.amount,
          تاریخ: activity.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">نمودار فعالیت‌ها</h2>
      <ChartComponent
        labels={chartData.labels}
        data={chartData.data}
        label="فعالیت‌ها"
        borderColor="#34D399"
      />
    </div>
  );
};

export default Activities;
```

#### 4.19. صفحه لاگ‌ها (client/src/pages/Logs.tsx)
صفحه نمایش لاگ‌ها با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Logs = () => {
  const [logs, setLogs] = useState<any[]>([]);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/logs");
        setLogs(response.data);
      } catch (error) {
        console.error("Error fetching logs:", error);
      }
    };
    fetchLogs();
  }, []);

  const handleDownload = async () => {
    try {
      const response = await axios.get("http://localhost:5000/api/admin/logs/download", {
        responseType: "blob",
      });
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", "logs.csv");
      document.body.appendChild(link);
      link.click();
    } catch (error) {
      console.error("Error downloading logs:", error);
    }
  };

  const columns = ["کاربر", "فعالیت", "تاریخ"];

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">📜 لاگ‌ها</h1>
      <button
        onClick={handleDownload}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4"
      >
        دانلود لاگ‌ها
      </button>
      <DataTable
        columns={columns}
        data={logs.map((log) => ({
          id: log.id,
          کاربر: log.user,
          فعالیت: log.action,
          تاریخ: log.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </div>
  );
};

export default Logs;
```

#### 4.20. صفحه تنظیمات (client/src/pages/Settings.tsx)
صفحه تنظیمات با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";

const Settings = () => {
  const [settings, setSettings] = useState({
    conversionRate: 0,
    robberyChance: 0,
    clanCreationCost: 0,
    clanUpgradeCost: 0,
    gameEnabled: false,
    rewardPeriod: 0,
  });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  return (
    <div className="ml-64 p-6">
      <h1 className="text-3xl font-bold mb-6">⚙️ تنظیمات</h1>
      <div className="glass p-4">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات کلن‌ها</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>هزینه ایجاد کلن (سی‌کوین):</label>
            <input
              type="number"
              value={settings.clanCreationCost}
              onChange={(e) => setSettings({ ...settings, clanCreationCost: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>هزینه ارتقاء کلن (سی‌کوین):</label>
            <input
              type="number"
              value={settings.clanUpgradeCost}
              onChange={(e) => setSettings({ ...settings, clanUpgradeCost: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات بازی‌ها</h2>
        <div>
          <label>فعال کردن بازی‌ها:</label>
          <input
            type="checkbox"
            checked={settings.gameEnabled}
            onChange={(e) => setSettings({ ...settings, gameEnabled: e.target.checked })}
          />
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات جایزه‌ها</h2>
        <div>
          <label>دوره جایزه (ساعت):</label>
          <input
            type="number"
            value={settings.rewardPeriod}
            onChange={(e) => setSettings({ ...settings, rewardPeriod: parseInt(e.target.value) })}
            className="p-2 rounded bg-gray-800 text-white w-full"
          />
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-6"
        >
          ذخیره تنظیمات
        </button>
      </div>
    </div>
  );
};

export default Settings;
```

#### 4.21. بک‌اند (server/admin.ts)
روت‌های API برای بخش‌های جدید:

```typescript
import express from "express";
import { getUsers, updateUser, deleteUser } from "./storage";
import { getTransactions, getEconomySettings, updateEconomySettings, getEconomyChart } from "./storage";
import { getClans, updateClan, deleteClan } from "./storage";
import { getQuests, updateQuest, deleteQuest, getQuestsChart } from "./storage";
import { getProducts, updateProduct, deleteProduct, getProductsChart } from "./storage";
import { getGames, updateGame, deleteGame, getGamesChart } from "./storage";
import { getRewards, updateReward, deleteReward, getRewardsChart } from "./storage";
import { getActivities, getActivitiesChart } from "./storage";
import { getLogs, downloadLogs } from "./storage";
import { getSettings, updateSettings } from "./storage";
import { getStats, getChartData } from "./storage";

const router = express.Router();

// میدلوِر برای چک کردن ورود
const ensureAuthenticated = (req, res, next) => {
  if (!req.session.user) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const guild = req.session.guilds.find((g) => g.id === "YOUR_GUILD_ID");
  if (!guild || !guild.roles.includes("ADMIN_ROLE_ID")) {
    return res.status(403).json({ error: "Access Denied" });
  }
  next();
};

// داشبورد
router.get("/stats", ensureAuthenticated, async (req, res) => {
  const stats = await getStats();
  res.json(stats);
});

router.get("/chart-data", ensureAuthenticated, async (req, res) => {
  const chartData = await getChartData();
  res.json(chartData);
});

// کاربرها
router.get("/users", ensureAuthenticated, async (req, res) => {
  const users = await getUsers();
  res.json(users);
});

router.put("/users/:id", ensureAuthenticated, async (req, res) => {
  await updateUser(req.params.id, req.body);
  res.json({ message: "User updated" });
});

router.delete("/users/:id", ensureAuthenticated, async (req, res) => {
  await deleteUser(req.params.id);
  res.json({ message: "User deleted" });
});

// اقتصاد
router.get("/transactions", ensureAuthenticated, async (req, res) => {
  const transactions = await getTransactions();
  res.json(transactions);
});

router.get("/economy/settings", ensureAuthenticated, async (req, res) => {
  const settings = await getEconomySettings();
  res.json(settings);
});

router.put("/economy/settings", ensureAuthenticated, async (req, res) => {
  await updateEconomySettings(req.body);
  res.json({ message: "Settings updated" });
});

router.get("/economy/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getEconomyChart();
  res.json(chartData);
});

// کلن‌ها
router.get("/clans", ensureAuthenticated, async (req, res) => {
  const clans = await getClans();
  res.json(clans);
});

router.put("/clans/:id", ensureAuthenticated, async (req, res) => {
  await updateClan(req.params.id, req.body);
  res.json({ message: "Clan updated" });
});

router.delete("/clans/:id", ensureAuthenticated, async (req, res) => {
  await deleteClan(req.params.id);
  res.json({ message: "Clan deleted" });
});

// کوئست‌ها
router.get("/quests", ensureAuthenticated, async (req, res) => {
  const quests = await getQuests();
  res.json(quests);
});

router.put("/quests/:id", ensureAuthenticated, async (req, res) => {
  await updateQuest(req.params.id, req.body);
  res.json({ message: "Quest updated" });
});

router.delete("/quests/:id", ensureAuthenticated, async (req, res) => {
  await deleteQuest(req.params.id);
  res.json({ message: "Quest deleted" });
});

router.get("/quests/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getQuestsChart();
  res.json(chartData);
});

// محصولات
router.get("/products", ensureAuthenticated, async (req, res) => {
  const products = await getProducts();
  res.json(products);
});

router.put("/products/:id", ensureAuthenticated, async (req, res) => {
  await updateProduct(req.params.id, req.body);
  res.json({ message: "Product updated" });
});

router.delete("/products/:id", ensureAuthenticated, async (req, res) => {
  await deleteProduct(req.params.id);
  res.json({ message: "Product deleted" });
});

router.get("/products/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getProductsChart();
  res.json(chartData);
});

// بازی‌ها
router.get("/games", ensureAuthenticated, async (req, res) => {
  const games = await getGames();
  res.json(games);
});

router.put("/games/:id", ensureAuthenticated, async (req, res) => {
  await updateGame(req.params.id, req.body);
  res.json({ message: "Game updated" });
});

router.delete("/games/:id", ensureAuthenticated, async (req, res) => {
  await deleteGame(req.params.id);
  res.json({ message: "Game deleted" });
});

router.get("/games/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getGamesChart();
  res.json(chartData);
});

// جایزه‌ها
router.get("/rewards", ensureAuthenticated, async (req, res) => {
  const rewards = await getRewards();
  res.json(rewards);
});

router.put("/rewards/:id", ensureAuthenticated, async (req, res) => {
  await updateReward(req.params.id, req.body);
  res.json({ message: "Reward updated" });
});

router.delete("/rewards/:id", ensureAuthenticated, async (req, res) => {
  await deleteReward(req.params.id);
  res.json({ message: "Reward deleted" });
});

router.get("/rewards/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getRewardsChart();
  res.json(chartData);
});

// فعالیت‌ها
router.get("/activities", ensureAuthenticated, async (req, res) => {
  const activities = await getActivities();
  res.json(activities);
});

router.get("/activities/chart", ensureAuthenticated, async (req, res) => {
  const chartData = await getActivitiesChart();
  res.json(chartData);
});

// لاگ‌ها
router.get("/logs", ensureAuthenticated, async (req, res) => {
  const logs = await getLogs();
  res.json(logs);
});

router.get("/logs/download", ensureAuthenticated, async (req, res) => {
  const csv = await downloadLogs();
  res.setHeader("Content-Type", "text/csv");
  res.setHeader("Content-Disposition", "attachment; filename=logs.csv");
  res.send(csv);
});

// تنظیمات
router.get("/settings", ensureAuthenticated, async (req, res) => {
  const settings = await getSettings();
  res.json(settings);
});

router.put("/settings", ensureAuthenticated, async (req, res) => {
  await updateSettings(req.body);
  res.json({ message: "Settings updated" });
});

router.get("/logout", (req, res) => {
  req.session.destroy(() => {
    res.redirect("/");
  });
});

router.get("/toggle-bot", ensureAuthenticated, async (req, res) => {
  // منطق تغییر وضعیت ربات
  res.json({ message: "Bot status toggled" });
});

export default router;
```

#### 4.22. توابع دیتابیس (server/storage.ts)
توابع دیتابیس برای بخش‌های جدید:

```typescript
import { db } from "./database";
import { Parser } from "json2csv";

// داشبورد
export async function getStats() {
  return new Promise((resolve, reject) => {
    db.get(
      `SELECT 
        (SELECT COUNT(*) FROM users) as users,
        (SELECT COUNT(*) FROM clans) as clans,
        (SELECT SUM(ccoin