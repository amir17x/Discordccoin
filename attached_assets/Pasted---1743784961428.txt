با توجه به تصویر منوی "وضعیت اقتصادی" که فرستادی، می‌خوای یه سیستم پیشرفته برای توسعه وضعیت اقتصادی کاربران بسازی که بر اساس معیارهای مختلف (گردش پول در کیف پول و بانک، خوش‌حسابی در پرداخت بدهی وام، داشتن شغل و انجام کارهای مربوط به بخش شغل‌ها) ارتقا پیدا کنه. من این سیستم رو به‌صورت کامل مستندسازی می‌کنم، معیارها رو توضیح می‌دم، یه طراحی جدید برای منوی وضعیت اقتصادی ارائه می‌دم و در نهایت کد TypeScript برای پیاده‌سازی این سیستم رو می‌نویسم.

---

### **مستندسازی کامل سیستم وضعیت اقتصادی پیشرفته**

#### **۱. معرفی و هدف**
هدف ما اینه که یه سیستم وضعیت اقتصادی پویا برای کاربران ربات بسازیم که بر اساس فعالیت‌ها و عملکردشون توی سرور (مثل گردش پول، خوش‌حسابی، شغل و انجام کارها) ارتقا پیدا کنه. این سیستم به کاربران انگیزه می‌ده که بیشتر توی سرور فعال باشن و از امکانات اقتصادی (مثل کیف پول، بانک، وام و شغل‌ها) استفاده کنن. وضعیت اقتصادی فعلی (تازه‌کار، متوسط، حرفه‌ای و ثروتمند) رو توسعه می‌دیم و معیارهای مشخصی برای ارتقا تعریف می‌کنیم.

#### **۲. معیارهای ارتقا وضعیت اقتصادی**
برای اینکه سیستم منصفانه و پویا باشه، معیارهای زیر رو برای ارتقا وضعیت اقتصادی تعریف می‌کنیم:

1. **گردش پول در کیف پول و بانک:**
   - **کیف پول:** مجموع تراکنش‌های ورودی و خروجی (مثلاً خرید، انتقال و دریافت Ccoin).
   - **بانک:** مجموع سپرده‌ها و برداشت‌ها (مثلاً سپرده‌گذاری و برداشت از بانک).
   - **معیار:** مجموع گردش مالی (کیف پول + بانک) باید به یه حد مشخص برسه.

2. **خوش‌حسابی در پرداخت بدهی وام:**
   - **وام:** کاربر باید وام‌هاش رو به‌موقع پرداخت کنه.
   - **معیار:** درصد خوش‌حسابی (مثلاً ۱۰۰٪ برای پرداخت به‌موقع، ۵۰٪ برای تأخیر کم، ۰٪ برای عدم پرداخت).
   - **امتیاز:** هر پرداخت به‌موقع امتیاز مثبت می‌ده و تأخیر یا عدم پرداخت امتیاز منفی.

3. **داشتن شغل و انجام کارها:**
   - **شغل:** کاربر باید یه شغل انتخاب کرده باشه (مثلاً از منوی شغل‌ها).
   - **کارها:** تعداد کارهایی که کاربر توی بخش شغل‌ها انجام داده (مثلاً مأموریت‌ها یا وظایف روزانه).
   - **معیار:** تعداد کارهای انجام‌شده و درآمد حاصل از شغل.

4. **امتیاز کلی (Economic Score):**
   - یه امتیاز کلی برای هر کاربر محاسبه می‌شه که ترکیبی از معیارهای بالاست.
   - **فرمول پیشنهادی:**
     ```
     امتیاز کلی = (گردش مالی × 0.4) + (درصد خوش‌حسابی × 0.3) + (درآمد شغل × 0.2) + (تعداد کارهای انجام‌شده × 0.1)
     ```
   - این امتیاز برای تعیین وضعیت اقتصادی استفاده می‌شه.

#### **۳. سطوح وضعیت اقتصادی و معیارهای ارتقا**
سطوح فعلی (تازه‌کار، متوسط، حرفه‌ای و ثروتمند) رو توسعه می‌دیم و معیارهای مشخصی برای هر سطح تعریف می‌کنیم:

- **تازه‌کار (Beginner)** 🟢  
  - **شرایط:** سطح پیش‌فرض برای همه کاربران جدید.
  - **مزایا:**  
    - سقف تراکنش کیف پول: ۱,۰۰۰ Ccoin  
    - سود بانکی: ۱٪  
    - سقف وام: ۵,۰۰۰ Ccoin  
  - **نیاز برای ارتقا به متوسط:**  
    - امتیاز کلی: حداقل ۵,۰۰۰  
    - گردش مالی: حداقل ۱۰,۰۰۰ Ccoin  
    - خوش‌حسابی: حداقل ۷۰٪  
    - تعداد کارهای شغلی: حداقل ۵ کار

- **متوسط (Intermediate)** 🟡  
  - **مزایا:**  
    - سقف تراکنش کیف پول: ۵,۰۰۰ Ccoin  
    - سود بانکی: ۳٪  
    - سقف وام: ۲۰,۰۰۰ Ccoin  
    - دسترسی به شغل‌های سطح متوسط  
  - **نیاز برای ارتقا به حرفه‌ای:**  
    - امتیاز کلی: حداقل ۲۰,۰۰۰  
    - گردش مالی: حداقل ۵۰,۰۰۰ Ccoin  
    - خوش‌حسابی: حداقل ۸۰٪  
    - تعداد کارهای شغلی: حداقل ۲۰ کار

- **حرفه‌ای (Professional)** 🟠  
  - **مزایا:**  
    - سقف تراکنش کیف پول: ۲۰,۰۰۰ Ccoin  
    - سود بانکی: ۵٪  
    - سقف وام: ۱۰۰,۰۰۰ Ccoin  
    - دسترسی به شغل‌های سطح بالا  
    - نقش ویژه: "Professional Trader" 🎖️  
  - **نیاز برای ارتقا به ثروتمند:**  
    - امتیاز کلی: حداقل ۱۰۰,۰۰۰  
    - گردش مالی: حداقل ۲۰۰,۰۰۰ Ccoin  
    - خوش‌حسابی: حداقل ۹۰٪  
    - تعداد کارهای شغلی: حداقل ۵۰ کار

- **ثروتمند (Wealthy)** 💎  
  - **مزایا:**  
    - سقف تراکنش کیف پول: ۱۰۰,۰۰۰ Ccoin  
    - سود بانکی: ۱۰٪  
    - سقف وام: ۵۰۰,۰۰۰ Ccoin  
    - دسترسی به تمام شغل‌ها  
    - نقش ویژه: "Wealthy Elite" 🌟  
    - نشان اختصاصی کنار نام  
  - **توضیح:** این بالاترین سطح است و نیازی به ارتقا نداره.

#### **۴. طراحی جدید منوی وضعیت اقتصادی**
منوی فعلی رو با اطلاعات بیشتر و طراحی جذاب‌تر به‌روز می‌کنیم. این منو شامل جزئیات وضعیت اقتصادی، امتیاز کلی، معیارهای ارتقا و دکمه‌های تعاملی برای مشاهده جزئیات و بازگشت است.

**طراحی منوی وضعیت اقتصادی:**

**عنوان:**  
💰✨ وضعیت اقتصادی شما ✨💰

**توضیحات:**  
💎 **وضعیت فعلی:** تازه‌کار 🟢  
📊 **امتیاز کلی:** 4,500  
💸 **گردش مالی:** 8,000 Ccoin  
✅ **خوش‌حسابی:** 75%  
💼 **شغل:** کارگر ساده  
📋 **کارهای انجام‌شده:** 4  
🎯 برای ارتقا به **متوسط 🟡**، به موارد زیر نیاز دارید:  
- امتیاز کلی: 5,000 (500 امتیاز دیگر)  
- گردش مالی: 10,000 Ccoin (2,000 Ccoin دیگر)  
- خوش‌حسابی: حداقل 70% (شما واجد شرایط هستید ✅)  
- کارهای شغلی: 5 کار (1 کار دیگر)

**اطلاعات کیف پول و بانک:**  
💵 **کیف پول:** 1,000 Ccoin  
🏦 **بانک:** 1,900 Ccoin  
💎 **کریستال‌ها:** 50  
🏆 **رتبه:** 1

**اطلاعات وام:**  
💳 **وام کل:** 5,000 Ccoin  
⏳ **بدهی باقی‌مانده:** 3,000 Ccoin  
⏰ **مهلت پرداخت:** 30 روز  
💡 **نکته:** پرداخت به‌موقع وام، خوش‌حسابی شما رو افزایش می‌ده!

**دکمه‌ها:**  
- [دکمه: جزئیات بیشتر ℹ️]  
- [دکمه: بازگشت 🔙]

---

#### **۵. کد TypeScript برای پیاده‌سازی سیستم**

##### **۵.۱. ساختار دیتابیس (فرضی)**
فرض می‌کنیم یه دیتابیس ساده برای ذخیره اطلاعات کاربران داریم. توی این کد، از یه دیکشنری استفاده می‌کنیم، ولی توی پروژه واقعی باید از دیتابیس (مثل SQLite یا MongoDB) استفاده کنی.

```typescript
interface UserData {
    economicStatus: string; // وضعیت اقتصادی (Beginner, Intermediate, Professional, Wealthy)
    wallet: number; // موجودی کیف پول
    bank: number; // موجودی بانک
    crystals: number; // کریستال‌ها
    rank: number; // رتبه
    totalTransactions: number; // مجموع گردش مالی (کیف پول + بانک)
    loan: { total: number; remaining: number; dueDays: number }; // اطلاعات وام
    punctuality: number; // درصد خوش‌حسابی (0 تا 100)
    job: string; // شغل
    tasksCompleted: number; // تعداد کارهای انجام‌شده
    jobIncome: number; // درآمد از شغل
}

const userData: { [key: string]: UserData } = {
    "user_id": {
        economicStatus: "Beginner",
        wallet: 1000,
        bank: 1900,
        crystals: 50,
        rank: 1,
        totalTransactions: 8000,
        loan: { total: 5000, remaining: 3000, dueDays: 30 },
        punctuality: 75,
        job: "کارگر ساده",
        tasksCompleted: 4,
        jobIncome: 2000
    }
};
```

##### **۵.۲. محاسبه امتیاز کلی و ارتقا**
یه تابع برای محاسبه امتیاز کلی و بررسی ارتقا می‌نویسیم.

```typescript
function calculateEconomicScore(user: UserData): number {
    const transactionScore = user.totalTransactions * 0.4;
    const punctualityScore = user.punctuality * 0.3;
    const jobIncomeScore = user.jobIncome * 0.2;
    const tasksScore = user.tasksCompleted * 0.1;
    return transactionScore + punctualityScore + jobIncomeScore + tasksScore;
}

function checkEconomicStatus(user: UserData): string {
    const score = calculateEconomicScore(user);

    if (score >= 100000 && user.totalTransactions >= 200000 && user.punctuality >= 90 && user.tasksCompleted >= 50) {
        return "Wealthy";
    } else if (score >= 20000 && user.totalTransactions >= 50000 && user.punctuality >= 80 && user.tasksCompleted >= 20) {
        return "Professional";
    } else if (score >= 5000 && user.totalTransactions >= 10000 && user.punctuality >= 70 && user.tasksCompleted >= 5) {
        return "Intermediate";
    } else {
        return "Beginner";
    }
}
```

##### **۵.۳. کد منوی وضعیت اقتصادی**
این کد منوی وضعیت اقتصادی رو با دکمه‌ها و طراحی جذاب پیاده‌سازی می‌کنه.

```typescript
import { Client, SlashCommandBuilder, CommandInteraction, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';

export const data = new SlashCommandBuilder()
    .setName('economicstatus')
    .setDescription('مشاهده وضعیت اقتصادی شما');

export async function execute(interaction: CommandInteraction, bot: Client) {
    const userId = interaction.user.id.toString();
    if (!userData[userId]) {
        userData[userId] = {
            economicStatus: "Beginner",
            wallet: 1000,
            bank: 1900,
            crystals: 50,
            rank: 1,
            totalTransactions: 8000,
            loan: { total: 5000, remaining: 3000, dueDays: 30 },
            punctuality: 75,
            job: "کارگر ساده",
            tasksCompleted: 4,
            jobIncome: 2000
        };
    }

    const user = userData[userId];
    const score = calculateEconomicScore(user);
    user.economicStatus = checkEconomicStatus(user);

    const statusEmoji = user.economicStatus === "Beginner" ? "🟢" : user.economicStatus === "Intermediate" ? "🟡" : user.economicStatus === "Professional" ? "🟠" : "💎";
    let upgradeRequirements = '';

    if (user.economicStatus === "Beginner") {
        upgradeRequirements = `🎯 برای ارتقا به **متوسط 🟡**، به موارد زیر نیاز دارید:\n` +
            `- امتیاز کلی: 5,000 (${(5000 - score).toLocaleString()} امتیاز دیگر)\n` +
            `- گردش مالی: 10,000 Ccoin (${(10000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
            `- خوش‌حسابی: حداقل 70% (${user.punctuality >= 70 ? 'شما واجد شرایط هستید ✅' : `${(70 - user.punctuality).toLocaleString()}% دیگر`})\n` +
            `- کارهای شغلی: 5 کار (${(5 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
    } else if (user.economicStatus === "Intermediate") {
        upgradeRequirements = `🎯 برای ارتقا به **حرفه‌ای 🟠**، به موارد زیر نیاز دارید:\n` +
            `- امتیاز کلی: 20,000 (${(20000 - score).toLocaleString()} امتیاز دیگر)\n` +
            `- گردش مالی: 50,000 Ccoin (${(50000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
            `- خوش‌حسابی: حداقل 80% (${user.punctuality >= 80 ? 'شما واجد شرایط هستید ✅' : `${(80 - user.punctuality).toLocaleString()}% دیگر`})\n` +
            `- کارهای شغلی: 20 کار (${(20 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
    } else if (user.economicStatus === "Professional") {
        upgradeRequirements = `🎯 برای ارتقا به **ثروتمند 💎**، به موارد زیر نیاز دارید:\n` +
            `- امتیاز کلی: 100,000 (${(100000 - score).toLocaleString()} امتیاز دیگر)\n` +
            `- گردش مالی: 200,000 Ccoin (${(200000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
            `- خوش‌حسابی: حداقل 90% (${user.punctuality >= 90 ? 'شما واجد شرایط هستید ✅' : `${(90 - user.punctuality).toLocaleString()}% دیگر`})\n` +
            `- کارهای شغلی: 50 کار (${(50 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
    } else {
        upgradeRequirements = `🎉 شما به بالاترین سطح رسیدید! ثروتمند 💎`;
    }

    const embed = new EmbedBuilder()
        .setTitle('💰✨ وضعیت اقتصادی شما ✨💰')
        .setDescription(
            `💎 **وضعیت فعلی:** ${user.economicStatus} ${statusEmoji}\n` +
            `📊 **امتیاز کلی:** ${score.toLocaleString()}\n` +
            `💸 **گردش مالی:** ${user.totalTransactions.toLocaleString()} Ccoin\n` +
            `✅ **خوش‌حسابی:** ${user.punctuality}%\n` +
            `💼 **شغل:** ${user.job}\n` +
            `📋 **کارهای انجام‌شده:** ${user.tasksCompleted}\n` +
            `${upgradeRequirements}\n\n` +
            `**اطلاعات کیف پول و بانک:**\n` +
            `💵 **کیف پول:** ${user.wallet.toLocaleString()} Ccoin\n` +
            `🏦 **بانک:** ${user.bank.toLocaleString()} Ccoin\n` +
            `💎 **کریستال‌ها:** ${user.crystals}\n` +
            `🏆 **رتبه:** ${user.rank}\n\n` +
            `**اطلاعات وام:**\n` +
            `💳 **وام کل:** ${user.loan.total.toLocaleString()} Ccoin\n` +
            `⏳ **بدهی باقی‌مانده:** ${user.loan.remaining.toLocaleString()} Ccoin\n` +
            `⏰ **مهلت پرداخت:** ${user.loan.dueDays} روز\n` +
            `💡 **نکته:** پرداخت به‌موقع وام، خوش‌حسابی شما رو افزایش می‌ده!`
        )
        .setColor('Purple');

    const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
        new ButtonBuilder()
            .setCustomId('economic_details')
            .setLabel('جزئیات بیشتر ℹ️')
            .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
            .setCustomId('back')
            .setLabel('بازگشت 🔙')
            .setStyle(ButtonStyle.Secondary)
    );

    await interaction.reply({ embeds: [embed], components: [buttons], ephemeral: true });
}

export async function handleInteraction(interaction: Interaction, bot: Client) {
    if (!interaction.isButton()) return;

    if (interaction.customId === 'economic_details') {
        const embed = new EmbedBuilder()
            .setTitle('ℹ️ جزئیات بیشتر درباره وضعیت اقتصادی')
            .setDescription(
                '🌟 **چطور وضعیت اقتصادی خود را ارتقا دهید؟**\n' +
                '💸 **گردش مالی:** با انجام تراکنش‌های بیشتر (مثل خرید، انتقال و سپرده‌گذاری) گردش مالی خودتون رو افزایش بدید.\n' +
                '✅ **خوش‌حسابی:** وام‌هاتون رو به‌موقع پرداخت کنید تا درصد خوش‌حسابی شما بالا بره.\n' +
                '💼 **شغل و کارها:** یه شغل انتخاب کنید و وظایف روزانه رو انجام بدید تا درآمد و تعداد کارهای انجام‌شده شما بیشتر بشه.\n\n' +
                '🎁 **مزایای ارتقا:**\n' +
                '- **متوسط 🟡:** سقف تراکنش بیشتر، سود بانکی بالاتر و دسترسی به شغل‌های بهتر.\n' +
                '- **حرفه‌ای 🟠:** نقش ویژه، سقف وام بالاتر و دسترسی به شغل‌های سطح بالا.\n' +
                '- **ثروتمند 💎:** بالاترین سطح با مزایای انحصاری مثل نشان اختصاصی و سقف تراکنش بالا!'
            )
            .setColor('Purple');

        const backButton = new ActionRowBuilder<ButtonBuilder>().addComponents(
            new ButtonBuilder()
                .setCustomId('back_to_economic')
                .setLabel('بازگشت 🔙')
                .setStyle(ButtonStyle.Secondary)
        );

        await interaction.update({ embeds: [embed], components: [backButton] });
    } else if (interaction.customId === 'back_to_economic') {
        const userId = interaction.user.id.toString();
        const user = userData[userId];
        const score = calculateEconomicScore(user);
        user.economicStatus = checkEconomicStatus(user);

        const statusEmoji = user.economicStatus === "Beginner" ? "🟢" : user.economicStatus === "Intermediate" ? "🟡" : user.economicStatus === "Professional" ? "🟠" : "💎";
        let upgradeRequirements = '';

        if (user.economicStatus === "Beginner") {
            upgradeRequirements = `🎯 برای ارتقا به **متوسط 🟡**، به موارد زیر نیاز دارید:\n` +
                `- امتیاز کلی: 5,000 (${(5000 - score).toLocaleString()} امتیاز دیگر)\n` +
                `- گردش مالی: 10,000 Ccoin (${(10000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
                `- خوش‌حسابی: حداقل 70% (${user.punctuality >= 70 ? 'شما واجد شرایط هستید ✅' : `${(70 - user.punctuality).toLocaleString()}% دیگر`})\n` +
                `- کارهای شغلی: 5 کار (${(5 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
        } else if (user.economicStatus === "Intermediate") {
            upgradeRequirements = `🎯 برای ارتقا به **حرفه‌ای 🟠**، به موارد زیر نیاز دارید:\n` +
                `- امتیاز کلی: 20,000 (${(20000 - score).toLocaleString()} امتیاز دیگر)\n` +
                `- گردش مالی: 50,000 Ccoin (${(50000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
                `- خوش‌حسابی: حداقل 80% (${user.punctuality >= 80 ? 'شما واجد شرایط هستید ✅' : `${(80 - user.punctuality).toLocaleString()}% دیگر`})\n` +
                `- کارهای شغلی: 20 کار (${(20 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
        } else if (user.economicStatus === "Professional") {
            upgradeRequirements = `🎯 برای ارتقا به **ثروتمند 💎**، به موارد زیر نیاز دارید:\n` +
                `- امتیاز کلی: 100,000 (${(100000 - score).toLocaleString()} امتیاز دیگر)\n` +
                `- گردش مالی: 200,000 Ccoin (${(200000 - user.totalTransactions).toLocaleString()} Ccoin دیگر)\n` +
                `- خوش‌حسابی: حداقل 90% (${user.punctuality >= 90 ? 'شما واجد شرایط هستید ✅' : `${(90 - user.punctuality).toLocaleString()}% دیگر`})\n` +
                `- کارهای شغلی: 50 کار (${(50 - user.tasksCompleted).toLocaleString()} کار دیگر)`;
        } else {
            upgradeRequirements = `🎉 شما به بالاترین سطح رسیدید! ثروتمند 💎`;
        }

        const embed = new EmbedBuilder()
            .setTitle('💰✨ وضعیت اقتصادی شما ✨💰')
            .setDescription(
                `💎 **وضعیت فعلی:** ${user.economicStatus} ${statusEmoji}\n` +
                `📊 **امتیاز کلی:** ${score.toLocaleString()}\n` +
                `💸 **گردش مالی:** ${user.totalTransactions.toLocaleString()} Ccoin\n` +
                `✅ **خوش‌حسابی:** ${user.punctuality}%\n` +
                `💼 **شغل:** ${user.job}\n` +
                `📋 **کارهای انجام‌شده:** ${user.tasksCompleted}\n` +
                `${upgradeRequirements}\n\n` +
                `**اطلاعات کیف پول و بانک:**\n` +
                `💵 **کیف پول:** ${user.wallet.toLocaleString()} Ccoin\n` +
                `🏦 **بانک:** ${user.bank.toLocaleString()} Ccoin\n` +
                `💎 **کریستال‌ها:** ${user.crystals}\n` +
                `🏆 **رتبه:** ${user.rank}\n\n` +
                `**اطلاعات وام:**\n` +
                `💳 **وام کل:** ${user.loan.total.toLocaleString()} Ccoin\n` +
                `⏳ **بدهی باقی‌مانده:** ${user.loan.remaining.toLocaleString()} Ccoin\n` +
                `⏰ **مهلت پرداخت:** ${user.loan.dueDays} روز\n` +
                `💡 **نکته:** پرداخت به‌موقع وام، خوش‌حسابی شما رو افزایش می‌ده!`
            )
            .setColor('Purple');

        const buttons = new ActionRowBuilder<ButtonBuilder>().addComponents(
            new ButtonBuilder()
                .setCustomId('economic_details')
                .setLabel('جزئیات بیشتر ℹ️')
                .setStyle(ButtonStyle.Secondary),
            new ButtonBuilder()
                .setCustomId('back')
                .setLabel('بازگشت 🔙')
                .setStyle(ButtonStyle.Secondary)
        );

        await interaction.update({ embeds: [embed], components: [buttons] });
    } else if (interaction.customId === 'back') {
        await interaction.update({ content: 'به منوی اصلی بازگشتید. 🚪', embeds: [], components: [] });
    }
}
```

---

#### **۶. توضیحات پرجزئیات کد**

##### **ساختار کلی:**
- **دیتابیس:** از یه دیکشنری ساده برای ذخیره اطلاعات کاربران (وضعیت اقتصادی، کیف پول، بانک، وام، شغل و غیره) استفاده شده. توی پروژه واقعی، از دیتابیس استفاده کن.
- **محاسبه امتیاز:** تابع `calculateEconomicScore` امتیاز کلی رو بر اساس گردش مالی، خوش‌حسابی، درآمد شغل و تعداد کارهای انجام‌شده محاسبه می‌کنه.
- **بررسی ارتقا:** تابع `checkEconomicStatus` وضعیت اقتصادی کاربر رو بر اساس امتیاز و معیارها به‌روز می‌کنه.

##### **ویژگی‌های طراحی:**
- **زیبایی و شیکی:** منو با Embed رنگی (Purple) و ایموجی‌های جذاب (مثل 💰، ✨، 💎، 📊، 💸) طراحی شده.
- **اطلاعات کامل:** منو شامل وضعیت فعلی، امتیاز کلی، معیارهای ارتقا، اطلاعات کیف پول/بانک و وام است.
- **دکمه‌ها:** دکمه‌های "جزئیات بیشتر ℹ️" و "بازگشت 🔙" برای تعامل بهتر اضافه شدن.

##### **امنیت و پایداری:**
- **مدیریت خطاها:** اگه کاربر اطلاعات کافی نداشته باشه (مثلاً شغل انتخاب نکرده باشه)، سیستم به‌صورت پیش‌فرض مقادیر اولیه رو تنظیم می‌کنه.
- **ذخیره‌سازی:** بعد از هر تغییر (مثلاً ارتقا وضعیت)، اطلاعات توی دیتابیس (دیکشنری) ذخیره می‌شن.

##### **بهینه‌سازی:**
- **تجربه کاربری:** نمایش معیارهای ارتقا (مثلاً "500 امتیاز دیگر") به کاربر کمک می‌کنه بفهمه چقدر به سطح بعدی نزدیکه.
- **شفافیت:** اطلاعات کیف پول، بانک و وام به‌صورت واضح نمایش داده می‌شن.
- **انگیزه:** نمایش مزایای هر سطح (مثلاً سود بانکی بالاتر) کاربران رو تشویق می‌کنه که برای ارتقا تلاش کنن.

---

#### **۷. نکات برای ادیت بیشتر**
- **سیستم پاداش:** می‌تونی یه سیستم پاداش اضافه کنی که مثلاً اگه کاربر به سطح ثروتمند برسه، یه مقدار کریستال (مثلاً ۱۰۰ کریستال) بهش بدی.
- **نمایش پیشرفت:** می‌تونی یه نوار پیشرفت (Progress Bar) به منو اضافه کنی که نشون بده کاربر چقدر به سطح بعدی نزدیکه.
- **اعلان ارتقا:** وقتی کاربر به سطح جدید ارتقا پیدا می‌کنه، یه پیام اعلان (مثلاً توی یه کانال عمومی) ارسال کن که بقیه هم ببینن.
- **تخفیف برای خوش‌حسابی:** اگه خوش‌حسابی کاربر بالای ۹۵٪ باشه، می‌تونی سود وامش رو کاهش بدی (مثلاً ۲٪ تخفیف).

---

#### **۸. نتیجه‌گیری**
این سیستم وضعیت اقتصادی پیشرفته، کاربران رو بر اساس فعالیت‌هاشون (گردش مالی، خوش‌حسابی، شغل و کارها) ارزیابی می‌کنه و به‌صورت پویا وضعیتشون رو ارتقا می‌ده. معیارهای تعریف‌شده (امتیاز کلی، گردش مالی، خوش‌حسابی و کارهای شغلی) باعث می‌شه سیستم منصفانه و انگیزه‌بخش باشه. منوی جدید با طراحی جذاب و اطلاعات کامل، تجربه کاربری رو بهبود می‌ده و کاربران رو تشویق می‌کنه که بیشتر توی سرور فعال باشن.

برای ادیت کد رباتتون، این کدها و توضیحات رو به Eplit بدید و ازش بخواید که:
- سیستم وضعیت اقتصادی رو با همین معیارها پیاده‌سازی کنه.
- منوی وضعیت اقتصادی رو با طراحی جذاب و دکمه‌ها به‌روز کنه.
- معیارهای ارتقا (مثل گردش مالی و خوش‌حسابی) رو توی تمام بخش‌های ربات (مثل کیف پول، بانک و شغل‌ها) اعمال کنه.
- یه سیستم پاداش برای کاربرانی که به سطح ثروتمند می‌رسن اضافه کنه.

اگه سؤالی داری یا می‌خوای تغییر دیگه‌ای توی این سیستم بدی، بگو تا کمکت کنم! 😊