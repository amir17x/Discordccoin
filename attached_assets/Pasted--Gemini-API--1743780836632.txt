با توجه به درخواست شما، من یک مستندسازی کامل، دقیق و بسیار پرجزئیات از **Gemini API** (بر اساس اطلاعات موجود تا تاریخ ۴ آوریل ۲۰۲۵) آماده می‌کنم تا بتونید به هوش مصنوعی Eplit بدید و کد رباتتون رو به بهترین شکل برای استفاده از این API بهینه کنید. این مستندسازی شامل توضیحات کلی، نحوه احراز هویت، ساختار درخواست‌ها، پارامترها، پاسخ‌ها، قابلیت‌های چندرسانه‌ای (Multimodal)، محدودیت‌ها، نکات امنیتی و نمونه کدهای کاربردی خواهد بود. در نهایت، نکاتی برای ادغام بهینه با رباتتون هم ارائه می‌دم.

---

### **مستندسازی کامل و دقیق Gemini API**

#### **۱. معرفی Gemini API**
Gemini API یک رابط برنامه‌نویسی (API) ارائه‌شده توسط گوگل است که به توسعه‌دهندگان اجازه می‌ده به مدل‌های مولد هوش مصنوعی پیشرفته گوگل (Gemini) دسترسی پیدا کنن. این API برای ساخت برنامه‌هایی طراحی شده که می‌تونن محتوای متنی، چندرسانه‌ای (متن، تصویر، صدا و ویدیو) تولید کنن یا تحلیل‌های پیچیده انجام بدن. مدل‌های Gemini از سری مدل‌های چندوجهی (Multimodal) هستند که توسط Google DeepMind توسعه داده شدن و قابلیت‌های متنوعی مثل تولید متن، تحلیل تصویر، اجرای کد و حتی استریم داده‌های صوتی و ویدیویی رو دارن.

- **مدل‌های موجود:**
  - **Gemini 1.5 Flash:** مدل سریع و چندمنظوره برای وظایف متنوع با عملکرد بالا.
  - **Gemini 1.5 Pro:** مدل میان‌رده با قابلیت‌های پیشرفته‌تر برای استدلال و وظایف پیچیده.
  - **Gemini 2.0 Flash:** نسخه جدیدتر با عملکرد بهتر نسبت به 1.5 Pro، سرعت بالا و قابلیت‌های چندوجهی پیشرفته‌تر (مثل تولید متن، صدا و تصویر).
  - **Gemini 2.5 Pro:** پیشرفته‌ترین مدل با قابلیت استدلال عمیق و عملکرد بهبودیافته.

- **ویژگی‌های کلیدی:**
  - پشتیبانی از ورودی‌های چندوجهی (متن، تصویر، صدا و ویدیو).
  - قابلیت استریم داده (برای پاسخ‌های بلادرنگ).
  - پنجره زمینه (Context Window) بزرگ تا ۲ میلیون توکن (برای مدل‌های 1.5 Pro و Flash).
  - ابزارهای داخلی مثل جستجوی گوگل، اجرای کد و فراخوانی توابع (Function Calling).
  - قابلیت ادغام با Google AI Studio و Vertex AI.

---

#### **۲. پیش‌نیازها و احراز هویت**
برای استفاده از Gemini API، باید مراحل زیر رو طی کنید:

1. **ایجاد حساب Google Cloud:**
   - یه حساب Google Cloud بسازید (اگه ندارید). کاربران جدید ۳۰۰ دلار اعتبار رایگان برای تست دریافت می‌کنن.
   - یه پروژه جدید در Google Cloud Console بسازید.

2. **دریافت API Key:**
   - به **Google AI Studio** برید (https://aistudio.google.com/app/apikey).
   - یه API Key جدید بسازید. این کلید برای احراز هویت در درخواست‌ها استفاده می‌شه.
   - **نکته امنیتی:** API Key رو در کد منبع عمومی قرار ندید، چون ممکنه سوءاستفاده بشه و سهمیه (Quota) یا هزینه‌های اضافی براتون ایجاد کنه. بهتره از متغیرهای محیطی (Environment Variables) استفاده کنید.

3. **محدودیت‌های API Key:**
   - API Key پیش‌فرض فقط برای **Generative Language API** (generativelanguage.googleapis.com) کار می‌کنه.
   - می‌تونید محدودیت‌های اضافی در Google Cloud Console (APIs & Services > Credentials) اعمال کنید تا امنیت بیشتری داشته باشید.

4. **محدودیت‌های سهمیه (Quota):**
   - در حالت رایگان، تا ۶۰ درخواست در دقیقه می‌تونید ارسال کنید (۲۰ برابر بیشتر از سایر APIهای رایگان مشابه).
   - برای استفاده در مقیاس بزرگ‌تر (مثل برنامه‌های تولیدی)، باید از Vertex AI استفاده کنید که هزینه‌ها بر اساس تعداد کاراکترها یا تصاویر محاسبه می‌شه.

5. **محیط توسعه:**
   - SDKهای رسمی برای زبان‌های مختلف (Python، Node.js، Java، Swift، Go و غیره) وجود داره.
   - می‌تونید از REST API هم مستقیماً با ابزارهایی مثل `curl` استفاده کنید.

---

#### **۳. نصب و راه‌اندازی SDK**
برای استفاده از Gemini API، می‌تونید SDK رسمی رو نصب کنید. در اینجا نصب برای Python رو توضیح می‌دم (چون رایج‌تره):

- **نصب SDK در Python:**
  ```bash
  pip install google-generativeai
  ```
  **توجه:** SDK قدیمی `google-generativeai` فقط برای مدل‌های Gemini 1.0 و 1.5 با قابلیت‌های محدود کار می‌کنه. برای استفاده از تمام ویژگی‌های جدید (مثل Gemini 2.0 و استریم صوتی/ویدیویی)، باید از SDK جدید `google-genai` استفاده کنید:
  ```bash
  pip install google-genai
  ```

- **تنظیم API Key:**
  API Key رو به‌عنوان متغیر محیطی تنظیم کنید:
  ```bash
  export GOOGLE_API_KEY="YOUR_API_KEY"
  ```

---

#### **۴. ساختار درخواست‌ها و پاسخ‌ها**

##### **۴.۱. ساختار درخواست (Request Body)**
Gemini API از درخواست‌های JSON برای ارتباط استفاده می‌کنه. یه درخواست ساده شامل موارد زیره:

- **مدل (Model):** نام مدل موردنظر (مثلاً `gemini-1.5-flash` یا `gemini-2.0-flash-001`).
- **محتوا (Contents):** شامل نقش (Role) و بخش‌ها (Parts) که می‌تونه متن، تصویر یا داده‌های دیگه باشه.
- **پارامترهای تولید (Generation Parameters):** مثل دما (Temperature) و حداکثر توکن‌ها (Max Tokens).

**نمونه درخواست ساده (فقط متن):**
```json
{
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "سلام! چطور می‌تونی به من کمک کنی؟"
        }
      ]
    }
  ]
}
```

##### **۴.۲. درخواست چندوجهی (Multimodal)**
Gemini API از ورودی‌های چندوجهی پشتیبانی می‌کنه. می‌تونید متن و تصویر رو ترکیب کنید:

**نمونه درخواست با متن و تصویر:**
```json
{
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "این تصویر چیه؟"
        },
        {
          "inlineData": {
            "mimeType": "image/jpeg",
            "data": "BASE64_ENCODED_IMAGE_DATA"
          }
        }
      ]
    }
  ]
}
```
**توجه:** برای تصاویر بزرگ، بهتره از **File API** استفاده کنید و فایل رو آپلود کنید، سپس URI فایل رو در درخواست قرار بدید (حداکثر اندازه درخواست ۲۰ مگابایته).

##### **۴.۳. پارامترهای تولید (Generation Config)**
می‌تونید رفتار مدل رو با پارامترهای زیر تنظیم کنید:
- **temperature:** برای کنترل خلاقیت (۰ تا ۲، پیش‌فرض ۱). مقادیر پایین‌تر پاسخ‌های دقیق‌تر و مقادیر بالاتر پاسخ‌های خلاقانه‌تر می‌دن.
- **topP:** برای نمونه‌برداری تجمعی (۰ تا ۱). مقادیر پایین‌تر پاسخ‌ها رو متمرکزتر می‌کنه.
- **topK:** برای محدود کردن انتخاب توکن‌ها (۱ تا ۴۰).
- **maxOutputTokens:** حداکثر تعداد توکن‌های خروجی (مثلاً ۸۱۹۲ برای Gemini 1.5 Pro).

**نمونه با پارامترها:**
```json
{
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "یه داستان کوتاه بنویس"
        }
      ]
    }
  ],
  "generationConfig": {
    "temperature": 0.7,
    "topP": 0.8,
    "topK": 40,
    "maxOutputTokens": 1024
  }
}
```

##### **۴.۴. پاسخ (Response Body)**
پاسخ‌ها هم به‌صورت JSON برگردانده می‌شن و شامل موارد زیرن:
- **candidates:** لیستی از پاسخ‌های تولیدشده.
- **text:** متن تولیدشده (درون candidates).
- **usageMetadata:** اطلاعاتی مثل تعداد توکن‌های ورودی و خروجی.

**نمونه پاسخ:**
```json
{
  "candidates": [
    {
      "content": {
        "role": "model",
        "parts": [
          {
            "text": "سلام! من می‌تونم بهت کمک کنم تا متن بنویسی، سؤالاتت رو جواب بدم یا حتی کد بنویسم. چی نیاز داری؟"
          }
        ]
      },
      "finishReason": "STOP"
    }
  ],
  "usageMetadata": {
    "promptTokenCount": 10,
    "candidatesTokenCount": 30,
    "totalTokenCount": 40
  }
}
```

##### **۴.۵. استریم پاسخ (Streaming Response)**
برای پاسخ‌های بلادرنگ (مثلاً در چت‌ها)، می‌تونید از قابلیت استریم استفاده کنید. در این حالت، پاسخ‌ها به‌صورت تکه‌تکه (Chunk) ارسال می‌شن.

**نمونه کد استریم در Python:**
```python
from google import genai

client = genai.Client()
response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents="یه داستان کوتاه بنویس",
    stream=True
)

for chunk in response:
    print(chunk.text, end="")
```

---

#### **۵. قابلیت‌های پیشرفته**

##### **۵.۱. ورودی‌های چندوجهی (Multimodal)**
Gemini API از ورودی‌های متن، تصویر، صدا و ویدیو پشتیبانی می‌کنه:
- **تصاویر:** فرمت‌های JPEG، PNG و غیره پشتیبانی می‌شن. می‌تونید تصویر رو به‌صورت Base64 یا از طریق URI ارسال کنید.
- **صدا و ویدیو (Live API):** با Gemini 2.0، می‌تونید داده‌های صوتی و ویدیویی رو به‌صورت استریم ارسال کنید (مثلاً از میکروفون یا دوربین).
- **محدودیت:** اضافه کردن تصاویر زیاد به درخواست، تأخیر (Latency) رو افزایش می‌ده.

**نمونه کد برای ارسال تصویر:**
```python
from google import genai
from google.genai.types import Part

client = genai.Client()
response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents=[
        "این تصویر چیه؟",
        Part.from_uri(
            file_uri="gs://your-bucket/image.jpg",
            mime_type="image/jpeg"
        )
    ]
)
print(response.text)
```

##### **۵.۲. ابزارهای داخلی (Native Tools)**
Gemini 2.0 از ابزارهای داخلی مثل جستجوی گوگل و اجرای کد پشتیبانی می‌کنه:
- **جستجوی گوگل:** مدل می‌تونه به‌صورت خودکار از جستجوی گوگل برای پاسخ‌های دقیق‌تر استفاده کنه.
- **اجرای کد:** می‌تونه کد Python تولید و اجرا کنه (مثلاً برای حل مسائل ریاضی یا رسم نمودار).

**نمونه درخواست با اجرای کد:**
```json
{
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "یه کد Python بنویس که فاکتوریل یه عدد رو محاسبه کنه"
        }
      ]
    }
  ],
  "tools": [
    {
      "codeExecution": {}
    }
  ]
}
```

##### **۵.۳. فراخوانی توابع (Function Calling)**
می‌تونید توابع دلخواه خودتون رو تعریف کنید و مدل رو وادار کنید که اون‌ها رو فراخوانی کنه.

**نمونه تعریف تابع:**
```json
{
  "tools": [
    {
      "functionDeclarations": [
        {
          "name": "get_weather",
          "description": "دریافت وضعیت آب‌وهوا برای یک شهر",
          "parameters": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "description": "نام شهر"
              }
            },
            "required": ["city"]
          }
        }
      ]
    }
  ]
}
```

**پاسخ مدل:**
مدل ممکنه یه فراخوانی تابع برگردونه:
```json
{
  "candidates": [
    {
      "content": {
        "role": "model",
        "parts": [
          {
            "functionCall": {
              "name": "get_weather",
              "args": {
                "city": "تهران"
              }
            }
          }
        ]
      }
    }
  ]
}
```

##### **۵.۴. دستورات سیستمی (System Instructions)**
می‌تونید رفتار مدل رو با دستورات سیستمی تنظیم کنید (مثلاً لحن یا نقش مدل).

**نمونه:**
```json
{
  "systemInstruction": {
    "role": "system",
    "parts": [
      {
        "text": "تو یه معلم ریاضی هستی و باید با لحن ساده و صبور توضیح بدی."
      }
    ]
  },
  "contents": [
    {
      "role": "user",
      "parts": [
        {
          "text": "فاکتوریل چیه؟"
        }
      ]
    }
  ]
}
```

---

#### **۶. محدودیت‌ها و نکات امنیتی**

##### **۶.۱. محدودیت‌ها**
- **اندازه درخواست:** حداکثر اندازه درخواست ۲۰ مگابایته. برای فایل‌های بزرگ‌تر، از File API استفاده کنید.
- **پنجره زمینه:** تا ۲ میلیون توکن برای مدل‌های 1.5 Pro و Flash (بزرگ‌ترین در نوع خودش).
- **خروجی‌های غیرمنتظره:** مدل ممکنه گاهی پاسخ‌های نادرست، مغرضانه یا توهین‌آمیز تولید کنه. باید خروجی‌ها رو بررسی و فیلتر کنید.
- **پشتیبانی زبان:** Gemini از ۱۰۹ زبان (شامل فارسی) پشتیبانی می‌کنه، ولی کیفیت پاسخ‌ها در زبان‌های غیرانگلیسی ممکنه کمی پایین‌تر باشه.

##### **۶.۲. نکات امنیتی**
- **امنیت API Key:** کلید رو در کد منبع عمومی قرار ندید. از متغیرهای محیطی یا Google Cloud Secrets Manager استفاده کنید.
- **برنامه‌های تولیدی:** برای برنامه‌های تولیدی (Production)، بهتره از **Vertex AI** به جای Google AI Studio استفاده کنید، چون امنیت بیشتری داره (مثل Firebase App Check و ادغام با Cloud Storage).
- **SynthID:** در Gemini 2.0، تمام خروجی‌های صوتی و تصویری با واترمارک نامرئی SynthID علامت‌گذاری می‌شن تا از سوءاستفاده و اطلاعات نادرست جلوگیری بشه.

##### **۶.۳. مسئولانه عمل کنید**
- خروجی‌ها رو برای جلوگیری از محتوای مضر (مثل محتوای توهین‌آمیز یا نادرست) بررسی کنید.
- از **Safety Settings** استفاده کنید تا پاسخ‌های ایمن‌تری دریافت کنید (مثلاً فیلتر کردن محتوای حساس).

---

#### **۷. نمونه کدهای کاربردی**

##### **۷.۱. تولید متن ساده**
```python
from google import genai

client = genai.Client()
response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents="یه شعر کوتاه درباره بهار بنویس"
)
print(response.text)
```

##### **۷.۲. چت تعاملی با استریم**
```python
from google import genai

client = genai.Client()
chat = client.start_chat(
    model="gemini-1.5-pro",
    history=[
        {"role": "user", "parts": [{"text": "سلام! من یه برنامه‌نویسم."}]},
        {"role": "model", "parts": [{"text": "سلام برنامه‌نویس! چطور می‌تونم بهت کمک کنم؟"}]}
    ]
)

response = chat.send_message("یه کد Python برای مرتب‌سازی حبابی بنویس", stream=True)
for chunk in response:
    print(chunk.text, end="")
```

##### **۷.۳. تحلیل تصویر**
```python
from google import genai
from google.genai.types import Part

client = genai.Client()
response = client.models.generate_content(
    model="gemini-1.5-flash",
    contents=[
        "این تصویر چیه؟",
        Part.from_uri(
            file_uri="gs://your-bucket/spring.jpg",
            mime_type="image/jpeg"
        )
    ]
)
print(response.text)
```

##### **۷.۴. اجرای کد**
```python
from google import genai

client = genai.Client()
response = client.models.generate_content(
    model="gemini-2.0-flash",
    contents="یه کد Python بنویس که فاکتوریل یه عدد رو محاسبه کنه",
    tools=[{"codeExecution": {}}]
)
print(response.text)
```

---

#### **۸. بهینه‌سازی برای ربات شما**

برای اینکه ربات شما به بهترین شکل از Gemini API استفاده کنه، این نکات رو در نظر بگیرید:

1. **انتخاب مدل مناسب:**
   - برای وظایف سریع و ساده (مثل پاسخ به سؤالات کوتاه): از **Gemini 1.5 Flash** یا **Gemini 2.0 Flash** استفاده کنید.
   - برای وظایف پیچیده (مثل استدلال یا تحلیل چندوجهی): از **Gemini 1.5 Pro** یا **Gemini 2.5 Pro** استفاده کنید.

2. **مدیریت استریم:**
   - اگه ربات شما یه چت‌باته، از قابلیت استریم برای پاسخ‌های بلادرنگ استفاده کنید تا تجربه کاربری بهتری ارائه بدید.

3. **پشتیبانی از چندوجهی:**
   - اگه کاربران ربات شما ممکنه تصویر یا صدا ارسال کنن، حتماً از قابلیت‌های چندوجهی Gemini API استفاده کنید. برای تصاویر بزرگ، از File API برای آپلود و ارسال URI استفاده کنید.

4. **مدیریت خطاها:**
   - خطاهایی مثل اتمام سهمیه (Quota Exceeded) یا مشکلات شبکه رو مدیریت کنید. یه سیستم Retry با تأخیر تصاعدی (Exponential Backoff) پیاده‌سازی کنید.

5. **بهینه‌سازی مصرف توکن:**
   - از پنجره زمینه بزرگ (تا ۲ میلیون توکن) برای مکالمات طولانی استفاده کنید، اما ورودی‌ها رو بهینه کنید تا مصرف توکن‌ها کمتر بشه (مثلاً متن‌های غیرضروری رو حذف کنید).

6. **ادغام با ابزارها:**
   - اگه ربات شما نیاز به جستجوی اطلاعات یا اجرای کد داره، از ابزارهای داخلی Gemini (مثل جستجوی گوگل یا Code Execution) استفاده کنید.
   - برای وظایف خاص (مثل دریافت آب‌وهوا یا اطلاعات سهام)، توابع دلخواه خودتون رو با Function Calling تعریف کنید.

7. **امنیت و پایداری:**
   - برای ربات‌های تولیدی، از Vertex AI به جای Google AI Studio استفاده کنید، چون امنیت بیشتری داره.
   - خروجی‌ها رو برای محتوای مضر فیلتر کنید و از Safety Settings برای محدود کردن پاسخ‌های نامناسب استفاده کنید.

8. **مانیتورینگ و دیباگ:**
   - از `usageMetadata` در پاسخ‌ها برای مانیتور کردن مصرف توکن‌ها استفاده کنید.
   - درخواست‌ها و پاسخ‌ها رو لاگ کنید تا بتونید مشکلات رو دیباگ کنید.

---

#### **۹. نتیجه‌گیری**
Gemini API یه ابزار قدرتمند برای ساخت ربات‌های هوشمند و تعاملیه. با استفاده از قابلیت‌های چندوجهی، استریم، ابزارهای داخلی و پنجره زمینه بزرگ، می‌تونید رباتی بسازید که هم سریع و هم دقیق باشه. با رعایت نکات امنیتی و بهینه‌سازی‌هایی که گفتم، می‌تونید تجربه کاربری عالی‌ای برای کاربرانتون فراهم کنید.

برای ادیت کد رباتتون، این مستندسازی رو به Eplit بدید و ازش بخواید که:
- مدل مناسب (مثلاً Gemini 2.0 Flash برای سرعت یا Gemini 1.5 Pro برای استدلال) رو انتخاب کنه.
- قابلیت‌های چندوجهی و استریم رو (در صورت نیاز) پیاده‌سازی کنه.
- مدیریت خطاها و بهینه‌سازی مصرف توکن رو اعمال کنه.
- از ابزارهای داخلی (مثل جستجوی گوگل یا اجرای کد) برای وظایف خاص استفاده کنه.
- نکات امنیتی (مثل مخفی کردن API Key و فیلتر کردن خروجی‌ها) رو رعایت کنه.

اگه سؤالی داری یا نیاز به جزئیات بیشتری داری، بگو تا کمکت کنم! 😊