با توجه به درخواست شما و تصویری که از منوی ربات Ccoin ارائه دادید، می‌خوایم یه سیستم اعلانات خصوصی پویا و طنزآمیز طراحی کنیم که توی منوی اصلی ربات (در بخش مشخص‌شده با رنگ قرمز) نمایش داده بشه. این اعلانات باید بر اساس وضعیت کاربر (مثلاً موجودی، فعالیت‌ها، ماموریت‌ها، و غیره) تولید بشن و حس سرگرمی و تعامل رو به کاربر منتقل کنن. من مستندات رو با جزئیات کامل و دقیق می‌نویسم تا هوش مصنوعی Replit بتونه این بخش رو به راحتی پیاده‌سازی کنه.

---

### مستند فنی: اضافه کردن اعلانات خصوصی پویا و طنزآمیز به منوی اصلی ربات Ccoin

#### 1. مقدمه
ربات Ccoin یه ربات تعاملی مبتنی بر Discordه که یه دنیای گیمینگ کامل با ویژگی‌های متنوع (اقتصاد، بازی‌ها، کلن‌ها، ماموریت‌ها، و غیره) ارائه می‌ده. توی تصویر ارائه‌شده، منوی اصلی ربات نمایش داده شده و یه بخش با رنگ قرمز مشخص شده که قراره اعلانات خصوصی و طنزآمیز برای هر کاربر نمایش داده بشه. این اعلانات باید پویا باشن، بر اساس وضعیت کاربر تولید بشن، و حس سرگرمی و تعامل رو به کاربر منتقل کنن.

#### 2. هدف پروژه
هدف این پروژه، اضافه کردن یه بخش اعلانات خصوصی توی منوی اصلی ربات Ccoinه که:
- اعلانات پویا و طنزآمیز رو بر اساس وضعیت کاربر (مثلاً موجودی، دزدی‌ها، ماموریت‌ها، و غیره) نمایش بده.
- توی بخش مشخص‌شده (با رنگ قرمز توی تصویر) با عنوان "اعلانات:" نمایش داده بشه.
- حس سرگرمی و تعامل رو به کاربر منتقل کنه.
- مقیاس‌پذیر باشه و با هزاران کاربر همزمان کار کنه.

#### 3. نیازمندی‌ها

##### 3.1. نیازمندی‌های عملکردی
1. **نمایش اعلانات خصوصی**:
   - توی منوی اصلی، یه بخش با عنوان "اعلانات:" اضافه بشه (مشابه بخش مشخص‌شده با رنگ قرمز توی تصویر).
   - اعلانات باید پویا باشن و بر اساس وضعیت کاربر (مثلاً موجودی کیف پول، دزدی‌ها، ماموریت‌ها، وار کلن، تورنمنت‌ها، پت‌ها، و غیره) تولید بشن.
   - هر اعلان باید طنز و باحال باشه و حس سرگرمی رو به کاربر منتقل کنه.
   - مثال اعلانات:
     - "اعلانات: وار کلن شما داره تموم می‌شه! ⚔️ تنبلی نکن!"
     - "اعلانات: پت شما داره غرغر می‌کنه! 🐶 یه کم غذا بده!"
2. **پویایی اعلانات**:
   - اعلانات باید بر اساس فعالیت‌ها و وضعیت کاربر تغییر کنن.
   - حداکثر 3 اعلان همزمان نمایش داده بشه (برای جلوگیری از شلوغی).
   - اگه هیچ اعلانی وجود نداشته باشه، یه پیام پیش‌فرض طنز نمایش داده بشه:
     - "اعلانات: انگار همه چی آرومه! 😎 یه بازی کن!"
3. **اولویت‌بندی اعلانات**:
   - اعلانات باید بر اساس اهمیت اولویت‌بندی بشن:
     - اولویت 1: رویدادهای زمان‌دار (مثلاً وار کلن، تورنمنت‌ها).
     - اولویت 2: ماموریت‌ها و پاداش روزانه.
     - اولویت 3: وضعیت پت، دزدی‌ها، و سایر فعالیت‌ها.
   - اگه چند اعلان با اولویت یکسان وجود داشته باشه، جدیدترین اعلان نمایش داده بشه.

##### 3.2. نیازمندی‌های غیرعملکردی
1. **مقیاس‌پذیری**:
   - سیستم باید بتونه با هزاران کاربر همزمان کار کنه بدون اینکه کند بشه یا هنگ کنه.
   - درخواست‌ها به دیتابیس باید بهینه باشن.
2. **رابط کاربری**:
   - اعلانات باید توی بخش مشخص‌شده (با رنگ قرمز توی تصویر) با عنوان "اعلانات:" نمایش داده بشن.
   - هر اعلان باید کوتاه و جذاب باشه (حداکثر 70 کاراکتر).
   - اعلانات باید با ایموجی‌های مرتبط همراه باشن تا جذاب‌تر بشن.
3. **عملکرد**:
   - تولید اعلانات باید بدون تأخیر انجام بشه (کمتر از 1 ثانیه).
4. **پایداری**:
   - سیستم نباید باعث کرش ربات بشه.
   - اگه خطایی رخ بده (مثلاً دیتابیس در دسترس نباشه)، پیام پیش‌فرض نمایش داده بشه.
5. **امنیت**:
   - دسترسی به اطلاعات کاربر (مثلاً موجودی کیف پول) باید امن باشه و فقط برای تولید اعلانات استفاده بشه.

#### 4. طراحی سیستم

##### 4.1. معماری پیشنهادی
- **پلتفرم**: ربات روی Discord اجرا می‌شه، از API Discord و کتابخانه Discord.js استفاده می‌کنیم.
- **دیتابیس**: برای دسترسی به اطلاعات کاربران (مثلاً موجودی، دزدی‌ها، کلن‌ها، ماموریت‌ها)، از دیتابیس MongoDB استفاده می‌کنیم.
- **کش (Redis)**: برای کاهش بار روی دیتابیس، اطلاعات کاربران رو توی Redis کش می‌کنیم.
- **منوی اصلی**: اعلانات توی توضیحات منوی اصلی (در بخش مشخص‌شده با رنگ قرمز) نمایش داده می‌شن.
- **اولویت‌بندی**: اعلانات بر اساس اولویت و زمان تولید می‌شن.

##### 4.2. اعلانات پویا و طنزآمیز
اعلانات بر اساس وضعیت کاربر تولید می‌شن و با ایموجی‌های مرتبط همراه هستن:
1. **رویدادهای زمان‌دار (اولویت 1)**:
   - وار کلن: "اعلانات: وار کلن شما داره تموم می‌شه! ⚔️ تنبلی نکن!"
   - تورنمنت: "اعلانات: تورنمنت حدس عدد تا 2 ساعت دیگه تمومه! 🏆"
   - فصل: "اعلانات: فصل جاری داره تموم می‌شه! 🏆 نفر اول باش!"
2. **ماموریت‌ها و پاداش روزانه (اولویت 2)**:
   - ماموریت روزانه: "اعلانات: ماموریت روزانه رو انجام بده! 🎯 تنبل نشو!"
   - پاداش روزانه: "اعلانات: پاداش روزانه‌ات منتظرته! 🎁 چرا معطلی؟"
   - ماموریت کلن: "اعلانات: ماموریت کلن شما فعاله! 🏰 کمک کن!"
3. **وضعیت پت، دزدی‌ها، و سایر فعالیت‌ها (اولویت 3)**:
   - پت: "اعلانات: پت شما داره غرغر می‌کنه! 🐶 یه کم غذا بده!"
   - دزدی موفق: "اعلانات: دزدی اخیرت موفق بود! 🖐️ آفرین سارق!"
   - دزدی ناموفق: "اعلانات: دزدی اخیرت خراب شد! 🚨 بیشتر تمرین کن!"
   - موجودی کم: "اعلانات: کیف پولت خالیه! 😅 یه کم Ccoin جمع کن!"
   - موجودی زیاد: "اعلانات: کیف پولت پره! 🤑 برو فروشگاه خرج کن!"

##### 4.3. جریان کار (Workflow)
1. **باز کردن منوی اصلی**:
   - کاربر دستور `/menu` رو اجرا می‌کنه یا دکمه منوی اصلی رو می‌زنه.
2. **گرفتن اطلاعات کاربر**:
   - اطلاعات کاربر (مثلاً موجودی، دزدی‌ها، کلن، ماموریت‌ها) از Redis (یا دیتابیس) خونده می‌شه.
3. **تولید اعلانات**:
   - وضعیت کاربر (مثلاً وار کلن، ماموریت‌ها، تورنمنت‌ها) چک می‌شه.
   - اعلانات بر اساس اولویت (رویدادهای زمان‌دار، ماموریت‌ها، سایر فعالیت‌ها) تولید می‌شن.
   - حداکثر 3 اعلان انتخاب می‌شه.
4. **نمایش اعلانات**:
   - اعلانات توی توضیحات منوی اصلی با عنوان "اعلانات:" نمایش داده می‌شن.
   - اگه هیچ اعلانی نباشه، پیام پیش‌فرض نمایش داده می‌شه.

#### 5. رابط کاربری پیشنهادی
توی منوی اصلی (مشابه تصویر)، اعلانات توی بخش مشخص‌شده با رنگ قرمز نمایش داده می‌شن:
```
🌟 منوی اصلی Ccoin
در انتظار انتخاب گزینه توسط شما هستیم! 🌟
💰 Ccoin: 0 | 🏦 بانک: 0 | 💎 کریستال: 0 | 📊 لِوِل: 1
🎁 جایزه روزانه: فعال | 🔄 سرقت: 0 ثانیه
📢 اعلانات:
⚔️ وار کلن شما داره تموم می‌شه! تنبلی نکن!
🎯 ماموریت روزانه رو انجام بده! تنبل نشو!
🐶 پت شما داره غرغر می‌کنه! یه کم غذا بده!
```

#### 6. الگوریتم پیشنهادی
1. **گرفتن اطلاعات کاربر**:
   - اطلاعات کاربر (مثلاً موجودی، دزدی‌ها، کلن، ماموریت‌ها) رو از Redis (یا دیتابیس) بخون.
2. **تولید اعلانات**:
   - **مرحله 1: رویدادهای زمان‌دار (اولویت 1)**:
     - چک کن اگه وار کلن، تورنمنت، یا فصل فعاله، اعلان مرتبط رو تولید کن.
   - **مرحله 2: ماموریت‌ها و پاداش روزانه (اولویت 2)**:
     - چک کن اگه ماموریت روزانه، ماموریت کلن، یا پاداش روزانه ناتمومه، اعلان مرتبط رو تولید کن.
   - **مرحله 3: سایر فعالیت‌ها (اولویت 3)**:
     - وضعیت پت، دزدی‌ها، و موجودی کیف پول رو چک کن و اعلان مرتبط رو تولید کن.
   - حداکثر 3 اعلان انتخاب کن (جدیدترین‌ها در اولویت).
3. **نمایش اعلانات**:
   - اعلانات رو با عنوان "📢 اعلانات:" توی توضیحات منوی اصلی نمایش بده.
   - اگه هیچ اعلانی نبود، پیام پیش‌فرض "اعلانات: انگار همه چی آرومه! 😎 یه بازی کن!" رو نمایش بده.

#### 7. کد نویسی (پیاده‌سازی با Discord.js)

##### 7.1. پیش‌نیازها
- Node.js و npm نصب شده باشه.
- کتابخانه Discord.js نصب شده باشه:
  ```bash
  npm install discord.js
  ```
- دیتابیس MongoDB برای ذخیره اطلاعات کاربران.
- کتابخانه mongoose برای اتصال به MongoDB:
  ```bash
  npm install mongoose
  ```
- Redis برای کش کردن اطلاعات:
  ```bash
  npm install redis
  ```

##### 7.2. ساختار دیتابیس
- **جدول کاربران (Users)**:
  - `user_id`: شناسه کاربر (کلید اصلی)
  - `wallet`: موجودی کیف پول (Ccoin)
  - `last_theft`: زمان آخرین دزدی
  - `last_daily_reward`: زمان آخرین پاداش روزانه
  - `clan_id`: شناسه کلن (در صورت عضویت)

- **جدول دزدی‌ها (Thefts)**:
  - `thief_id`: شناسه سارق
  - `target_id`: شناسه هدف
  - `success`: آیا دزدی موفق بود؟ (بولین)
  - `timestamp`: زمان دزدی

- **جدول کلن‌ها (Clans)**:
  - `clan_id`: شناسه کلن (کلید اصلی)
  - `war_end_time`: زمان پایان وار کلن (در صورت فعال بودن)

- **جدول ماموریت‌ها (Quests)**:
  - `user_id`: شناسه کاربر
  - `quest_type`: نوع ماموریت (روزانه، هفتگی، ماهانه)
  - `progress`: پیشرفت ماموریت
  - `completed`: آیا ماموریت کامل شده؟

- **جدول تورنمنت‌ها (Tournaments)**:
  - `tournament_id`: شناسه تورنمنت
  - `end_time`: زمان پایان تورنمنت

- **جدول پت‌ها (Pets)**:
  - `user_id`: شناسه کاربر
  - `hunger`: میزان گرسنگی پت (0-100)

##### 7.3. کد نمونه
این کد بخش اعلانات خصوصی رو توی منوی اصلی پیاده‌سازی می‌کنه.

```javascript
const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const mongoose = require('mongoose');
const Redis = require('redis');

// ساخت کلاینت ربات
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// توکن ربات (جایگزین کن با توکن خودت)
const TOKEN = 'YOUR_BOT_TOKEN';

// اتصال به Redis
const redisClient = Redis.createClient();
redisClient.on('error', (err) => console.error('خطا در Redis:', err));
redisClient.connect();

// اتصال به دیتابیس MongoDB
mongoose.connect('mongodb://localhost/ccoin', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('به دیتابیس متصل شد!'))
  .catch(err => console.error('خطا در اتصال به دیتابیس:', err));

// مدل کاربر
const userSchema = new mongoose.Schema({
  user_id: String,
  wallet: { type: Number, default: 0 },
  last_theft: { type: Date, default: null },
  last_daily_reward: { type: Date, default: null },
  clan_id: { type: String, default: null },
});
const User = mongoose.model('User', userSchema);

// مدل دزدی
const theftSchema = new mongoose.Schema({
  thief_id: String,
  target_id: String,
  success: Boolean,
  timestamp: Date,
});
const Theft = mongoose.model('Theft', theftSchema);

// مدل کلن
const clanSchema = new mongoose.Schema({
  clan_id: String,
  war_end_time: { type: Date, default: null },
});
const Clan = mongoose.model('Clan', clanSchema);

// مدل ماموریت
const questSchema = new mongoose.Schema({
  user_id: String,
  quest_type: String,
  progress: Number,
  completed: Boolean,
});
const Quest = mongoose.model('Quest', questSchema);

// مدل تورنمنت
const tournamentSchema = new mongoose.Schema({
  tournament_id: String,
  end_time: Date,
});
const Tournament = mongoose.model('Tournament', tournamentSchema);

// مدل پت
const petSchema = new mongoose.Schema({
  user_id: String,
  hunger: { type: Number, default: 0 },
});
const Pet = mongoose.model('Pet', petSchema);

// تابع برای گرفتن اطلاعات کاربر از Redis یا دیتابیس
async function getUserData(userId) {
  const cachedData = await redisClient.get(`user:${userId}`);
  if (cachedData) {
    return JSON.parse(cachedData);
  }

  const user = await User.findOne({ user_id: userId });
  if (user) {
    await redisClient.setEx(`user:${userId}`, 3600, JSON.stringify(user)); // کش برای 1 ساعت
    return user;
  }
  return null;
}

// تابع برای تولید اعلانات پویا
async function getDynamicNotifications(userId) {
  const notifications = [];
  try {
    const user = await getUserData(userId);
    if (!user) {
      return ['اعلانات: هیچ اعلانی نداری! 🤔'];
    }

    // اولویت 1: رویدادهای زمان‌دار
    // اعلان وار کلن
    if (user.clan_id) {
      const clan = await Clan.findOne({ clan_id: user.clan_id });
      if (clan && clan.war_end_time && new Date(clan.war_end_time) > new Date()) {
        const hoursLeft = Math.ceil((new Date(clan.war_end_time) - new Date()) / (1000 * 60 * 60));
        notifications.push(`اعلانات: وار کلن شما داره تموم می‌شه! ⚔️ تنبلی نکن!`);
      }
    }

    // اعلان تورنمنت
    const activeTournament = await Tournament.findOne({ end_time: { $gt: new Date() } });
    if (activeTournament) {
      const hoursLeft = Math.ceil((new Date(activeTournament.end_time) - new Date()) / (1000 * 60 * 60));
      notifications.push(`اعلانات: تورنمنت حدس عدد تا ${hoursLeft} ساعت دیگه تمومه! 🏆`);
    }

    // اولویت 2: ماموریت‌ها و پاداش روزانه
    // اعلان ماموریت روزانه
    const dailyQuest = await Quest.findOne({ user_id: userId, quest_type: 'daily', completed: false });
    if (dailyQuest) {
      notifications.push(`اعلانات: ماموریت روزانه رو انجام بده! 🎯 تنبل نشو!`);
    }

    // اعلان پاداش روزانه
    const today = new Date().setHours(0, 0, 0, 0);
    if (!user.last_daily_reward || new Date(user.last_daily_reward).setHours(0, 0, 0, 0) < today) {
      notifications.push(`اعلانات: پاداش روزانه‌ات منتظرته! 🎁 چرا معطلی؟`);
    }

    // اولویت 3: وضعیت پت، دزدی‌ها، و سایر فعالیت‌ها
    // اعلان پت
    const pet = await Pet.findOne({ user_id: userId });
    if (pet && pet.hunger > 70) {
      notifications.push(`اعلانات: پت شما داره غرغر می‌کنه! 🐶 یه کم غذا بده!`);
    }

    // اعلان دزدی
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const recentTheft = await Theft.findOne({
      thief_id: userId,
      timestamp: { $gte: oneHourAgo },
    });
    if (recentTheft) {
      notifications.push(
        recentTheft.success
          ? `اعلانات: دزدی اخیرت موفق بود! 🖐️ آفرین سارق!`
          : `اعلانات: دزدی اخیرت خراب شد! 🚨 بیشتر تمرین کن!`
      );
    }

    // اعلان موجودی
    if (user.wallet === 0) {
      notifications.push(`اعلانات: کیف پولت خالیه! 😅 یه کم Ccoin جمع کن!`);
    } else if (user.wallet > 1000) {
      notifications.push(`اعلانات: کیف پولت پره! 🤑 برو فروشگاه خرج کن!`);
    }

    // حداکثر 3 اعلان انتخاب کن
    if (notifications.length > 3) {
      notifications.splice(3); // فقط 3 اعلان اول رو نگه دار
    }

    // اگه هیچ اعلانی نبود
    if (notifications.length === 0) {
      notifications.push(`اعلانات: انگار همه چی آرومه! 😎 یه بازی کن!`);
    }

    return notifications;
  } catch (error) {
    console.error('خطا در تولید اعلانات:', error);
    return ['اعلانات: یه مشکلی پیش اومد! 🤔'];
  }
}

// وقتی ربات آماده می‌شه
client.once('ready', async () => {
  console.log(`ربات ${client.user.tag} آماده شد!`);

  // ثبت دستور /menu
  await client.application.commands.create({
    name: 'menu',
    description: 'باز کردن منوی اصلی ربات Ccoin',
  });
});

// مدیریت دستورات (منوی اصلی)
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand() && !interaction.isButton()) return;

  // دستور /menu برای باز کردن منوی اصلی
  if (interaction.isCommand() && interaction.commandName === 'menu') {
    const userId = interaction.user.id;

    // گرفتن اطلاعات کاربر
    const user = await getUserData(userId);
    const wallet = user ? user.wallet : 0;
    const bank = user ? user.bank || 0 : 0;
    const crystals = user ? user.crystals || 0 : 0;
    const level = user ? user.level || 1 : 1;
    const dailyRewardStatus = user && (!user.last_daily_reward || new Date(user.last_daily_reward).setHours(0, 0, 0, 0) < new Date().setHours(0, 0, 0, 0)) ? 'فعال' : 'غیرفعال';
    const theftCooldown = user && user.last_theft ? Math.max(0, Math.floor((new Date() - new Date(user.last_theft)) / 1000)) : 0;

    // تولید اعلانات پویا
    const notifications = await getDynamicNotifications(userId);

    // ساخت منوی اصلی
    const embed = new EmbedBuilder()
      .setTitle('🌟 منوی اصلی Ccoin')
      .setDescription(
        `در انتظار انتخاب گزینه توسط شما هستیم! 🌟\n` +
        `💰 Ccoin: ${wallet} | 🏦 بانک: ${bank} | 💎 کریستال: ${crystals} | 📊 لِوِل: ${level}\n` +
        `🎁 جایزه روزانه: ${dailyRewardStatus} | 🔄 سرقت: ${theftCooldown} ثانیه\n` +
        `${notifications.join('\n')}`
      )
      .setColor('#FFD700');

    const row1 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('economy').setLabel('اقتصاد').setStyle(ButtonStyle.Success).setEmoji('💰'),
      new ButtonBuilder().setCustomId('games').setLabel('بازی‌ها').setStyle(ButtonStyle.Primary).setEmoji('🎮'),
      new ButtonBuilder().setCustomId('shop').setLabel('فروشگاه').setStyle(ButtonStyle.Secondary).setEmoji('🛒'),
      new ButtonBuilder().setCustomId('marketplace').setLabel('بازار').setStyle(ButtonStyle.Secondary).setEmoji('🏪'),
      new ButtonBuilder().setCustomId('inventory').setLabel('کوله‌پشتی').setStyle(ButtonStyle.Secondary).setEmoji('🎒')
    );

    const row2 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('quests').setLabel('ماموریت‌ها').setStyle(ButtonStyle.Primary).setEmoji('🎯'),
      new ButtonBuilder().setCustomId('clans').setLabel('کلن‌ها').setStyle(ButtonStyle.Danger).setEmoji('🏰'),
      new ButtonBuilder().setCustomId('tournaments').setLabel('تورنمنت‌ها').setStyle(ButtonStyle.Primary).setEmoji('🏁'),
      new ButtonBuilder().setCustomId('achievements').setLabel('دستاوردها').setStyle(ButtonStyle.Success).setEmoji('🎖️'),
      new ButtonBuilder().setCustomId('profile').setLabel('پروفایل').setStyle(ButtonStyle.Secondary).setEmoji('👤')
    );

    const row3 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('wheel').setLabel('چرخ شانس').setStyle(ButtonStyle.Primary).setEmoji('🎡'),
      new ButtonBuilder().setCustomId('seasons').setLabel('فصل‌ها').setStyle(ButtonStyle.Success).setEmoji('🏆'),
      new ButtonBuilder().setCustomId('worlds').setLabel('جهان‌های موازی').setStyle(ButtonStyle.Primary).setEmoji('🌀'),
      new ButtonBuilder().setCustomId('calendar').setLabel('تقویم').setStyle(ButtonStyle.Secondary).setEmoji('📅'),
      new ButtonBuilder().setCustomId('help').setLabel('راهنما').setStyle(ButtonStyle.Secondary).setEmoji('📜')
    );

    const row4 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('exit').setLabel('خروج').setStyle(ButtonStyle.Danger).setEmoji('🔙')
    );

    await interaction.reply({ embeds: [embed], components: [row1, row2, row3, row4], ephemeral: true });
  }
});

// ورود ربات به Discord
client.login(TOKEN);
```

##### 7.4. توضیح کد
- **کتابخانه‌ها**:
  - `discord.js`: برای تعامل با Discord.
  - `mongoose`: برای اتصال به دیتابیس MongoDB.
  - `redis`: برای کش کردن اطلاعات کاربران.
- **اتصال به Redis**:
  - از Redis برای کش کردن اطلاعات کاربران استفاده می‌کنیم تا بار روی دیتابیس کاهش پیدا کنه.
- **اتصال به دیتابیس**:
  - با `mongoose.connect` به دیتابیس متصل می‌شیم.
- **مدل‌ها**:
  - مدل‌های `User`، `Theft`، `Clan`، `Quest`، `Tournament`، و `Pet` برای مدیریت اطلاعات کاربران و فعالیت‌ها.
- **تابع `getUserData`**:
  - اطلاعات کاربر رو از Redis می‌خونه، اگه نبود از دیتابیس می‌خونه و توی Redis کش می‌کنه.
- **تابع `getDynamicNotifications`**:
  - اعلانات پویا رو بر اساس وضعیت کاربر تولید می‌کنه.
  - اعلانات رو بر اساس اولویت (رویدادهای زمان‌دار، ماموریت‌ها، سایر فعالیت‌ها) مرتب می‌کنه.
  - حداکثر 3 اعلان انتخاب می‌کنه.
- **منوی اصلی**:
  - منوی اصلی با اطلاعات کاربر (مثلاً موجودی، جایزه روزانه) و اعلانات پویا نمایش داده می‌شه.
  - اعلانات با عنوان "اعلانات:" توی بخش مشخص‌شده (مشابه تصویر) نمایش داده می‌شن.

##### 7.5. اجرا
1. توکن ربات رو توی متغیر `TOKEN` بذار (توکن رو از Discord Developer Portal بگیر).
2. MongoDB و Redis رو روی سیستم نصب کن.
3. کد رو توی یه فایل (مثلاً `bot.js`) ذخیره کن.
4. توی ترمینال، دستور زیر رو اجرا کن:
   ```bash
   node bot.js
   ```
5. ربات بالا میاد و منوی اصلی با اعلانات خصوصی نمایش داده می‌شه.

#### 8. تست سناریوها
1. **سناریو 1: کاربر با وار کلن و ماموریت روزانه**:
   - منوی اصلی:
     ```
     📢 اعلانات:
     ⚔️ وار کلن شما داره تموم می‌شه! تنبلی نکن!
     🎯 ماموریت روزانه رو انجام بده! تنبل نشو!
     ```
2. **سناریو 2: کاربر با پت گرسنه و دزدی اخیر**:
   - منوی اصلی:
     ```
     📢 اعلانات:
     🐶 پت شما داره غرغر می‌کنه! یه کم غذا بده!
     🖐️ دزدی اخیرت موفق بود! آفرین سارق!
     ```
3. **سناریو 3: کاربر بدون اعلان**:
   - منوی اصلی:
     ```
     📢 اعلانات:
     انگار همه چی آرومه! 😎 یه بازی کن!
     ```
4. **سناریو 4: مقیاس‌پذیری**:
   - 1000 کاربر همزمان منوی اصلی رو باز می‌کنن.
   - ربات بدون کندی یا هنگ کردن کار می‌کنه.

#### 9. نکات پیاده‌سازی
- **کش با Redis**: استفاده از Redis باعث می‌شه درخواست‌ها به دیتابیس به شدت کاهش پیدا کنه.
- **بهینه‌سازی دیتابیس**: از ایندکس‌گذاری مناسب توی MongoDB استفاده کنید (مثلاً روی `user_id` و `timestamp`).
- **محدودیت اعلانات**: حداکثر 3 اعلان نمایش داده می‌شه تا منو شلوغ نشه.
- **امنیت**: اطلاعات کاربر فقط برای تولید اعلانات استفاده بشه و از دسترسی غیرمجاز جلوگیری بشه.
- **پایداری**: اگه Redis یا دیتابیس در دسترس نباشه، پیام پیش‌فرض نمایش داده می‌شه.
- **دستورات اسلش**: دستور `/menu` باید ثبت بشه تا کاربران بتونن منوی اصلی رو باز کنن.

#### 10. نتیجه‌گیری
این سیستم یه بخش اعلانات خصوصی پویا و طنزآمیز توی منوی اصلی ربات Ccoin ایجاد می‌کنه که:
- اعلانات رو بر اساس وضعیت کاربر (مثلاً وار کلن، ماموریت‌ها، پت) تولید می‌کنه.
- توی بخش مشخص‌شده (با رنگ قرمز توی تصویر) با عنوان "اعلانات:" نمایش می‌ده.
- حس سرگرمی و تعامل رو به کاربر منتقل می‌کنه.
- مقیاس‌پذیره و با هزاران کاربر همزمان کار می‌کنه.

این مستند با جزئیات کامل نوشته شده تا هوش مصنوعی Replit بتونه این بخش رو به راحتی پیاده‌سازی کنه. اگه سوال دیگه‌ای داری یا نیاز به توضیح بیشتری داری، بگو تا کمکت کنم! 😊🚀