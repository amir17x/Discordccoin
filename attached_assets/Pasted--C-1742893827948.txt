با توجه به درخواست شما و تصاویر ارسالی، می‌خوایم یه مستند دقیق و جامع برای بهبود سیستم منوهای ربات Ccoin بنویسیم. هدف اینه که وقتی کاربر با منوها کار می‌کنه (مثلاً دکمه‌ها رو می‌زنه یا دکمه "بازگشت" رو انتخاب می‌کنه)، به جای ارسال منوی جدید، همون منوی فعلی ویرایش بشه. این کار باعث می‌شه چت کاربر از منوهای اضافی پر نشه (اسپم نشه) و تجربه کاربری بهتری داشته باشه، مخصوصاً وقتی دکمه "بازگشت" رو می‌زنه و انتظار داره به منوی قبلی برگرده، نه اینکه یه منوی جدید باز بشه.

---

### مستند فنی: پیاده‌سازی سیستم ویرایش منو به جای ارسال منوی جدید در ربات Ccoin

#### 1. مقدمه
ربات Ccoin یه ربات تعاملی مبتنی بر Discordه که به کاربران اجازه می‌ده فعالیت‌های مختلفی مثل مدیریت اقتصاد مجازی، بازی، دزدی، و انتقال سکه انجام بدن. منوهای ربات (که با دکمه‌های تعاملی کار می‌کنن) در حال حاضر یه مشکل دارن: هر بار که کاربر یه دکمه رو می‌زنه (مثلاً برای رفتن به یه بخش جدید یا بازگشت به منوی قبلی)، یه منوی جدید توی چت ارسال می‌شه. این باعث می‌شه:
- چت کاربر پر از منوهای مختلف بشه (اسپم).
- کاربر سردرگم بشه، مخصوصاً وقتی دکمه "بازگشت" رو می‌زنه و به جای برگشت به منوی قبلی، یه منوی جدید باز می‌شه.
- تجربه کاربری (UX) ضعیف بشه.

هدف این مستند، طراحی سیستمیه که منوهای ربات به جای ارسال جدید، ویرایش بشن و دکمه "بازگشت" به درستی کاربر رو به منوی قبلی برگردونه، بدون اینکه منوی جدیدی ارسال بشه.

---

#### 2. توضیح مشکل (با توجه به تصاویر)
در تصاویر ارسالی، می‌بینیم که:
- منوی اصلی (تصویر دوم) شامل دکمه‌های مختلفی مثل "انتقال"، "دزدی"، "فروشگاه"، و "بازگشت"ه.
- وقتی کاربر یه دکمه رو می‌زنه (مثلاً "دزدی" یا "انتقال")، یه منوی جدید ارسال می‌شه (مثل منوی دزدی توی تصویر اول یا منوی انتقال توی تصویر قبلی).
- وقتی کاربر دکمه "بازگشت" رو می‌زنه (مثلاً توی منوی دزدی یا انتقال)، به جای اینکه منوی فعلی به منوی قبلی (مثلاً منوی اصلی) برگرده، یه منوی جدید ارسال می‌شه (مثل تصویر سوم که بعد از زدن "بازگشت"، منوی اصلی دوباره ارسال شده).

این رفتار باعث مشکلات زیر می‌شه:
- **اسپم شدن چت**: هر بار که کاربر یه دکمه رو می‌زنه، یه پیام جدید با منوی جدید توی چت ارسال می‌شه. این باعث می‌شه چت شلوغ بشه و کاربر مجبور بشه برای پیدا کردن منوی فعلی اسکرول کنه.
- **سردرگمی با دکمه بازگشت**: وقتی کاربر دکمه "بازگشت" رو می‌زنه، انتظار داره به منوی قبلی برگرده، اما به جای این، یه منوی جدید باز می‌شه که باعث گیج شدن کاربر می‌شه.
- **تجربه کاربری ضعیف**: ارسال منوهای جدید به جای ویرایش منوی فعلی، حس پویایی و یکپارچگی رو از کاربر می‌گیره و باعث می‌شه تعامل با ربات خسته‌کننده بشه.

---

#### 3. هدف پروژه
هدف این پروژه، پیاده‌سازی سیستمیه که:
- منوهای ربات به جای ارسال جدید، ویرایش بشن.
- دکمه "بازگشت" به درستی کار کنه و کاربر رو به منوی قبلی برگردونه، بدون اینکه منوی جدیدی ارسال بشه.
- تجربه کاربری بهبود پیدا کنه و چت کاربر از اسپم منوها پاک بشه.

---

#### 4. نیازمندی‌ها

##### 4.1. نیازمندی‌های عملکردی
1. **ویرایش منو به جای ارسال جدید**:
   - وقتی کاربر یه دکمه رو توی منو می‌زنه (مثلاً "دزدی"، "انتقال"، یا "فروشگاه")، منوی فعلی باید ویرایش بشه و محتوای جدید (مثلاً منوی زیرمجموعه) توی همون پیام نمایش داده بشه.
   - این شامل تغییر متن پیام (Embed) و دکمه‌ها (Components) می‌شه.
2. **مدیریت دکمه بازگشت**:
   - دکمه "بازگشت" باید کاربر رو به منوی قبلی برگردونه.
   - این کار باید با ویرایش منوی فعلی انجام بشه، نه ارسال منوی جدید.
   - تاریخچه منوها (Menu History) باید ذخیره بشه تا ربات بتونه منوی قبلی رو به درستی بارگذاری کنه.
3. **جلوگیری از اسپم**:
   - فقط یه منو توی چت فعال باشه و منوهای جدید ارسال نشن.
   - اگه کاربر چندین بار دستور رو اجرا کنه (مثلاً چند بار منوی اصلی رو باز کنه)، فقط یه منو ویرایش بشه.
4. **مدیریت منوهای زیرمجموعه**:
   - وقتی کاربر به یه منوی زیرمجموعه (مثلاً منوی دزدی) می‌ره، دکمه "بازگشت" باید به منوی اصلی برگرده.
   - اگه کاربر توی یه منوی زیرمجموعه (مثلاً منوی دزدی) دکمه "انتخاب هدف" رو بزنه، منوی فعلی باید به منوی انتخاب هدف تغییر کنه و دکمه "بازگشت" به منوی دزدی برگرده.

##### 4.2. نیازمندی‌های غیرعملکردی
1. **رابط کاربری**:
   - منوها باید ساده و کاربرپسند باشن.
   - از ایموجی‌ها برای جذاب‌تر کردن منوها استفاده بشه.
   - پیام‌های منو باید واضح و صمیمی باشن.
2. **عملکرد**:
   - زمان ویرایش منو باید کمتر از 1 ثانیه باشه.
   - سیستم باید بتونه حداقل 1000 کاربر همزمان رو پشتیبانی کنه.
3. **پایداری**:
   - اگه کاربر چندین دکمه رو به سرعت بزنه، سیستم نباید کرش کنه یا رفتار غیرمنتظره‌ای نشون بده.
4. **امنیت**:
   - فقط کاربر صاحب منو بتونه با دکمه‌ها تعامل کنه (برای جلوگیری از سوءاستفاده).

---

#### 5. طراحی سیستم

##### 5.1. معماری پیشنهادی
- **پلتفرم**: ربات روی Discord اجرا می‌شه، بنابراین از API Discord و کتابخانه Discord.js استفاده می‌کنیم.
- **دیتابیس**: برای ذخیره تاریخچه منوها و وضعیت فعلی هر کاربر، از یه دیتابیس موقت (مثلاً Redis) یا یه ساختار داده‌ای در حافظه استفاده می‌کنیم.
- **لایه منطقی**:
  - یه سیستم مدیریت منو (Menu Manager) برای کنترل منوها و ویرایش اون‌ها.
  - یه سیستم تاریخچه (History Manager) برای ذخیره و بازیابی منوهای قبلی.

##### 5.2. ساختار دیتابیس
برای مدیریت منوها و تاریخچه، یه ساختار داده‌ای موقت (در حافظه یا دیتابیس) نیاز داریم:

- **جدول منوهای فعال (ActiveMenus)**:
  - `user_id`: شناسه کاربر (کلید اصلی)
  - `message_id`: شناسه پیام منوی فعلی (برای ویرایش پیام)
  - `current_menu`: نام منوی فعلی (مثلاً "MainMenu"، "TheftMenu")
  - `history`: لیست منوهای قبلی (برای دکمه بازگشت)

مثال:
```
{
  user_id: "123456789",
  message_id: "987654321",
  current_menu: "TheftMenu",
  history: ["MainMenu"]
}
```

##### 5.3. جریان کار (Workflow)
1. **شروع کار با منو**:
   - کاربر یه دستور اجرا می‌کنه (مثلاً `/menu`) و منوی اصلی نمایش داده می‌شه.
   - ربات یه پیام با منوی اصلی (شامل دکمه‌ها) ارسال می‌کنه و `message_id` این پیام رو ذخیره می‌کنه.
   - اطلاعات منو توی دیتابیس (یا حافظه) ذخیره می‌شه:
     ```
     user_id: "123456789",
     message_id: "987654321",
     current_menu: "MainMenu",
     history: []
     ```

2. **تعامل با دکمه‌ها**:
   - کاربر یه دکمه رو می‌زنه (مثلاً "دزدی").
   - ربات اطلاعات منوی فعلی رو از دیتابیس می‌خونه.
   - منوی فعلی با استفاده از `message_id` ویرایش می‌شه:
     - متن پیام (Embed) به منوی دزدی تغییر می‌کنه.
     - دکمه‌ها به دکمه‌های منوی دزدی (مثلاً "انتخاب هدف"، "بازگشت") تغییر می‌کنن.
   - تاریخچه به‌روزرسانی می‌شه:
     ```
     user_id: "123456789",
     message_id: "987654321",
     current_menu: "TheftMenu",
     history: ["MainMenu"]
     ```

3. **دکمه بازگشت**:
   - کاربر دکمه "بازگشت" رو توی منوی دزدی می‌زنه.
   - ربات تاریخچه رو چک می‌کنه و منوی قبلی (MainMenu) رو پیدا می‌کنه.
   - منوی فعلی با استفاده از `message_id` ویرایش می‌شه:
     - متن پیام به منوی اصلی برمی‌گرده.
     - دکمه‌ها به دکمه‌های منوی اصلی (مثلاً "دزدی"، "انتقال"، "فروشگاه") برمی‌گردن.
   - تاریخچه به‌روزرسانی می‌شه:
     ```
     user_id: "123456789",
     message_id: "987654321",
     current_menu: "MainMenu",
     history: []
     ```

4. **جلوگیری از اسپم**:
   - اگه کاربر دوباره دستور `/menu` رو اجرا کنه، ربات چک می‌کنه که آیا یه منوی فعال برای این کاربر وجود داره یا نه.
   - اگه وجود داشته باشه، همون منو ویرایش می‌شه و منوی جدیدی ارسال نمی‌شه.

##### 5.4. ساختار منوها
برای مدیریت منوها، یه ساختار سلسله‌مراتبی (Tree) برای منوها تعریف می‌کنیم:

- **MainMenu (منوی اصلی)**:
  - دکمه‌ها: "دزدی"، "انتقال"، "فروشگاه"، "ماموریت‌ها"، "کلن"، "سرمایه‌گذاری"، "تورنمنت"
- **TheftMenu (منوی دزدی)**:
  - دکمه‌ها: "انتخاب هدف"، "بازگشت"
- **TheftTargetMenu (منوی انتخاب هدف)**:
  - دکمه‌ها: "شروع دزدی"، "بازگشت"
- **TransferMenu (منوی انتقال)**:
  - دکمه‌ها: "ارسال فرم"، "بازگشت"
- **ShopMenu (منوی فروشگاه)**:
  - دکمه‌ها: "نقش‌ها"، "پت‌ها"، "بازگشت"

هر منو یه تابع داره که متن پیام (Embed) و دکمه‌ها (Components) رو تولید می‌کنه.

---

#### 6. رابط کاربری پیشنهادی
برای هر منو، یه پیام Embed و یه سری دکمه تعریف می‌کنیم. بیایم چند مثال از منوها رو ببینیم:

##### 6.1. منوی اصلی (MainMenu)
```
✨ منوی اصلی Ccoin ✨
با دکمه‌های زیر یه بخش رو انتخاب کن!

💰 موجودی: 500 Ccoin | 🏦 بانک: 0 Ccoin | 💎 کریستال: 0
```

دکمه‌ها:
- 🏦 بانک
- 💸 انتقال
- 🎲 بازی‌ها
- 🏬 فروشگاه
- 🎯 دزدی
- 📋 ماموریت‌ها
- 🏰 کلن
- 📈 سرمایه‌گذاری
- 🏁 تورنمنت

##### 6.2. منوی دزدی (TheftMenu)
```
🎯 منوی دزدی 🎯
شانس موفقیت: 40% | مقدار قابل دزدی: 500 Ccoin 💰
یه هدف انتخاب کن و دزدی رو شروع کن!
```

دکمه‌ها:
- 🎯 انتخاب هدف
- ⬅️ بازگشت

##### 6.3. منوی انتخاب هدف (TheftTargetMenu)
```
🎯 انتخاب هدف دزدی 🎯
هدف: کاربر X | مقدار قابل دزدی: 500 Ccoin 💰
شانس موفقیت: 40% 🎲
آماده‌ای برای دزدی؟
```

دکمه‌ها:
- 🖐️ شروع دزدی
- ⬅️ بازگشت

---

#### 7. الگوریتم پیشنهادی
1. **نمایش منوی اولیه**:
   - پیام منوی اصلی رو با `channel.send()` ارسال کن.
   - `message_id` پیام رو ذخیره کن.
   - اطلاعات منو رو توی دیتابیس ثبت کن.

2. **مدیریت تعامل با دکمه‌ها**:
   - وقتی کاربر یه دکمه رو می‌زنه، ربات `interaction.customId` رو چک می‌کنه.
   - منوی فعلی رو از دیتابیس می‌خونه.
   - منوی جدید (مثلاً TheftMenu) رو تولید می‌کنه.
   - با استفاده از `interaction.message.edit()`، پیام فعلی رو ویرایش می‌کنه.
   - تاریخچه رو به‌روزرسانی می‌کنه.

3. **مدیریت دکمه بازگشت**:
   - وقتی کاربر دکمه "بازگشت" رو می‌زنه، ربات تاریخچه رو چک می‌کنه.
   - منوی قبلی رو از تاریخچه می‌خونه.
   - منوی فعلی رو با منوی قبلی جایگزین می‌کنه (با `interaction.message.edit()`).
   - تاریخچه رو به‌روزرسانی می‌کنه.

---

#### 8. تست سناریوها
1. **سناریو 1: رفتن به منوی دزدی و بازگشت**:
   - کاربر توی منوی اصلی دکمه "دزدی" رو می‌زنه.
   - منوی فعلی به منوی دزدی تغییر می‌کنه.
   - کاربر دکمه "بازگشت" رو می‌زنه.
   - منوی فعلی به منوی اصلی برمی‌گرده.
   - نتیجه: هیچ منوی جدیدی ارسال نشده.

2. **سناریو 2: انتخاب هدف و دزدی**:
   - کاربر توی منوی دزدی دکمه "انتخاب هدف" رو می‌زنه.
   - منوی فعلی به منوی انتخاب هدف تغییر می‌کنه.
   - کاربر دکمه "شروع دزدی" رو می‌زنه.
   - نتیجه دزدی نمایش داده می‌شه و منو به منوی دزدی برمی‌گرده.
   - نتیجه: هیچ منوی جدیدی ارسال نشده.

3. **سناریو 3: اسپم دستورات**:
   - کاربر چندین بار دستور `/menu` رو اجرا می‌کنه.
   - ربات فقط منوی فعلی رو ویرایش می‌کنه و منوی جدیدی ارسال نمی‌کنه.

---

#### 9. نکات پیاده‌سازی
- **کتابخانه**: از Discord.js نسخه 14 یا بالاتر استفاده کن.
- **ویرایش پیام**: از متد `interaction.message.edit()` برای ویرایش منوها استفاده کن.
- **شناسه دکمه‌ها**: برای هر دکمه یه `customId` منحصربه‌فرد تعریف کن (مثلاً `main_theft`، `theft_target`، `back`) تا بتونی تشخیص بدی کاربر کدوم دکمه رو زده.
- **مدیریت تاریخچه**: تاریخچه رو به صورت یه لیست (Array) توی دیتابیس یا حافظه ذخیره کن.
- **جلوگیری از تعامل دیگران**: از `interaction.user.id` استفاده کن تا فقط کاربر صاحب منو بتونه با دکمه‌ها تعامل کنه.
- **تایم‌اوت**: یه تایم‌اوت (مثلاً 5 دقیقه) برای منوها تعریف کن که بعد از این مدت، دکمه‌ها غیرفعال بشن.

---

#### 10. نتیجه‌گیری
با پیاده‌سازی این سیستم، منوهای ربات Ccoin به جای ارسال جدید، ویرایش می‌شن و دکمه "بازگشت" به درستی کار می‌کنه. این باعث می‌شه چت کاربر از اسپم منوها پاک بشه و تجربه کاربری بهتری داشته باشه. این مستند شامل تمام جزئیات لازم برای توسعه‌دهندگان و هوش مصنوعی کدنویسه تا این قابلیت رو به صورت کامل و کارآمد پیاده‌سازی کنن.

---

### نکته برای کدنویس
اگه هوش مصنوعی کدنویس هستی، می‌تونی از این مستند برای نوشتن کد استفاده کنی. پیشنهاد می‌کنم از JavaScript و Discord.js استفاده کنی، چون ربات روی Discord اجرا می‌شه. یه نمونه کد ساده برای شروع:

```javascript
const { Client, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

// دیتابیس موقت (می‌تونی از Redis یا MongoDB استفاده کنی)
const activeMenus = new Map();

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;

  const userId = interaction.user.id;
  const menuData = activeMenus.get(userId);

  if (!menuData) return;

  // ویرایش منوی فعلی
  const embed = new EmbedBuilder();
  const row = new ActionRowBuilder();

  if (interaction.customId === 'main_theft') {
    // منوی دزدی
    embed.setTitle('🎯 منوی دزدی 🎯')
         .setDescription('شانس موفقیت: 40% | مقدار قابل دزدی: 500 Ccoin 💰\nیه هدف انتخاب کن و دزدی رو شروع کن!');
    row.addComponents(
      new ButtonBuilder().setCustomId('theft_target').setLabel('انتخاب هدف').setStyle(ButtonStyle.Primary).setEmoji('🎯'),
      new ButtonBuilder().setCustomId('back').setLabel('بازگشت').setStyle(ButtonStyle.Secondary).setEmoji('⬅️')
    );

    // به‌روزرسانی تاریخچه
    menuData.history.push(menuData.current_menu);
    menuData.current_menu = 'TheftMenu';
  } else if (interaction.customId === 'back') {
    // بازگشت به منوی قبلی
    const previousMenu = menuData.history.pop() || 'MainMenu';
    if (previousMenu === 'MainMenu') {
      embed.setTitle('✨ منوی اصلی Ccoin ✨')
           .setDescription('با دکمه‌های زیر یه بخش رو انتخاب کن!\n💰 موجودی: 500 Ccoin | 🏦 بانک: 0 Ccoin | 💎 کریستال: 0');
      row.addComponents(
        new ButtonBuilder().setCustomId('main_theft').setLabel('دزدی').setStyle(ButtonStyle.Danger).setEmoji('🎯'),
        // دکمه‌های دیگه...
      );
    }
    menuData.current_menu = previousMenu;
  }

  // ویرایش پیام
  await interaction.message.edit({ embeds: [embed], components: [row] });
  await interaction.deferUpdate();
});
```

اگه نیاز به توضیحات بیشتری داری یا می‌خوای بخش خاصی رو با جزئیات بیشتری بررسی کنیم، بگو تا کمکت کنم! 😊🚀