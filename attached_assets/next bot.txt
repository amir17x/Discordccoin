const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, Collection, Events, REST, Routes, SlashCommandBuilder, StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle } = require('discord.js');
require('dotenv').config();
const { QuickDB } = require('quick.db');
const cron = require('node-cron');
const db = new QuickDB();
const fs = require('fs');
const path = require('path');

// Create a new Discord client with required intents
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers
  ]
});

// اعلان کانفیگ های کلی
const CONFIG = {
  // کانفیگ‌های اصلی
  DAILY_AMOUNT: 100, // مقدار پاداش روزانه
  ROBBERY_MIN_AMOUNT: 10, // حداقل مقدار دزدی
  ROBBERY_MAX_AMOUNT: 50, // حداکثر مقدار دزدی
  ROBBERY_FAIL_CHANCE: 0.4, // 40% احتمال شکست در دزدی
  BANK_INTEREST_RATE: 0.05, // 5% سود ماهانه بانکی
  
  // کانفیگ‌های سیستم وام
  LOAN_TYPES: {
    LOW: { maxAmount: 1000, interestRate: 0.05, durationDays: 7 },
    MEDIUM: { maxAmount: 5000, interestRate: 0.10, durationDays: 14 },
    HIGH: { maxAmount: 10000, interestRate: 0.20, durationDays: 30 }
  },
  LOAN_PENALTY_RATE: 0.10, // 10% جریمه تاخیر در پرداخت وام
  
  // کانفیگ‌های بازار سیاه
  BLACK_MARKET_MIN_LEVEL: 20, // حداقل سطح برای دسترسی به بازار سیاه
  BLACK_MARKET_BUST_CHANCE: 0.10, // 10% احتمال دستگیری در بازار سیاه
  
  // کانفیگ‌های سیستم ارجاع
  REFERRAL_BONUS_REFERRER: 100, // پاداش دعوت‌کننده
  REFERRAL_BONUS_REFERRED: 50, // پاداش دعوت‌شونده
  REFERRAL_MAX_COUNT: 10, // حداکثر تعداد دعوت معتبر
  
  // کانفیگ‌های سیستم زندان
  JAIL_DURATION: {
    MIN: 24 * 60 * 60 * 1000, // حداقل 1 روز
    MAX: 7 * 24 * 60 * 60 * 1000 // حداکثر 7 روز
  },
  JAIL_FINE_RATE: 0.20, // 20% جریمه مالی برای زندانی‌ها
  
  // کانفیگ‌های سیستم لیگ
  LEAGUES: {
    BRONZE: { minLevel: 1, maxLevel: 10, weeklyBonus: 100 },
    SILVER: { minLevel: 11, maxLevel: 20, weeklyBonus: 300 },
    GOLD: { minLevel: 21, maxLevel: 30, weeklyBonus: 500 },
    DIAMOND: { minLevel: 31, maxLevel: Infinity, weeklyBonus: 1000 }
  }
};

// Main data structures
client.commands = new Collection();
client.cooldowns = new Collection();
client.buttons = new Collection();

// Read commands from commands directory
const commands = [];
const commandsPath = path.join(__dirname, 'commands');

// Create commands directory if it doesn't exist
if (!fs.existsSync(commandsPath)){
    fs.mkdirSync(commandsPath, { recursive: true });
}

// Constants
const DAILY_AMOUNT = 100; // Daily reward amount
const ROBBERY_MIN_AMOUNT = 10;
const ROBBERY_MAX_AMOUNT = 50;
const ROBBERY_FAIL_CHANCE = 0.4; // 40% chance of failure
const BANK_INTEREST_RATE = 0.05; // 5% monthly interest

// Define slash commands
const slashCommands = [
  // منوی اصلی
  new SlashCommandBuilder()
    .setName('menu')
    .setDescription('نمایش منوی اصلی ربات'),

  // اقتصاد
  new SlashCommandBuilder()
    .setName('wallet')
    .setDescription('نمایش موجودی کیف پول'),

  new SlashCommandBuilder()
    .setName('bank')
    .setDescription('نمایش موجودی حساب بانکی'),

  new SlashCommandBuilder()
    .setName('deposit')
    .setDescription('واریز سکه به حساب بانکی')
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار سکه برای واریز (all برای تمام موجودی)')
        .setRequired(true)),

  new SlashCommandBuilder()
    .setName('withdraw')
    .setDescription('برداشت سکه از حساب بانکی')
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار سکه برای برداشت (all برای تمام موجودی)')
        .setRequired(true)),

  // راه‌های کسب درآمد
  new SlashCommandBuilder()
    .setName('daily')
    .setDescription('دریافت جایزه روزانه'),

  // دستور جدید برای جیب‌زنی پیشرفته
  new SlashCommandBuilder()
    .setName('pickpocket')
    .setDescription('جیب‌زنی از کاربر دیگر با ریسک و پاداش متفاوت')
    .addUserOption(option => 
      option.setName('target')
        .setDescription('کاربر هدف برای جیب‌زنی')
        .setRequired(true))
    .addStringOption(option => 
      option.setName('type')
        .setDescription('نوع جیب‌زنی (هر کدام ریسک و پاداش متفاوتی دارد)')
        .setRequired(true)
        .addChoices(
          { name: 'سریع (ریسک کم، سود کم)', value: 'quick' },
          { name: 'حرفه‌ای (ریسک متوسط، سود متوسط)', value: 'professional' },
          { name: 'بزرگ (ریسک بالا، سود بالا)', value: 'grand' },
          { name: 'پنهانی (سطح 25+)', value: 'stealth' }
        )),

  // دستور قدیمی برای حفظ سازگاری
  new SlashCommandBuilder()
    .setName('rob')
    .setDescription('دزدی از کاربر دیگر')
    .addUserOption(option => 
      option.setName('target')
        .setDescription('کاربر هدف برای دزدی')
        .setRequired(true)),

  // بازی‌ها
  new SlashCommandBuilder()
    .setName('coinflip')
    .setDescription('بازی شیر یا خط')
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار شرط‌بندی')
        .setRequired(true))
    .addStringOption(option => 
      option.setName('choice')
        .setDescription('انتخاب شما (شیر یا خط)')
        .setRequired(true)
        .addChoices(
          { name: 'شیر', value: 'شیر' },
          { name: 'خط', value: 'خط' }
        )),

  new SlashCommandBuilder()
    .setName('dice')
    .setDescription('بازی تاس')
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار شرط‌بندی')
        .setRequired(true))
    .addIntegerOption(option => 
      option.setName('number')
        .setDescription('عدد انتخابی (1-6)')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(6)),

  // فروشگاه و موجودی
  new SlashCommandBuilder()
    .setName('shop')
    .setDescription('نمایش فروشگاه'),

  new SlashCommandBuilder()
    .setName('buy')
    .setDescription('خرید آیتم از فروشگاه')
    .addIntegerOption(option => 
      option.setName('item')
        .setDescription('شماره آیتم برای خرید')
        .setRequired(true)),

  new SlashCommandBuilder()
    .setName('inventory')
    .setDescription('نمایش موجودی کوله‌پشتی'),

  // پروفایل و رتبه‌بندی  
  new SlashCommandBuilder()
    .setName('profile')
    .setDescription('نمایش پروفایل کاربر'),

  new SlashCommandBuilder()
    .setName('leaderboard')
    .setDescription('نمایش لیدربورد ثروتمندترین کاربران'),

  // انتقال سکه
  new SlashCommandBuilder()
    .setName('transfer')
    .setDescription('انتقال سکه به کاربر دیگر')
    .addUserOption(option => 
      option.setName('target')
        .setDescription('کاربر هدف برای انتقال سکه')
        .setRequired(true))
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار سکه برای انتقال')
        .setRequired(true)),
        
  // سیستم وام
  new SlashCommandBuilder()
    .setName('loan')
    .setDescription('درخواست وام از بانک')
    .addStringOption(option => 
      option.setName('type')
        .setDescription('نوع وام (هر کدام با سود و شرایط متفاوت)')
        .setRequired(true)
        .addChoices(
          { name: 'کم‌ریسک (سود 5%، حداکثر 1000 سکه)', value: 'low' },
          { name: 'متوسط (سود 10%، حداکثر 5000 سکه)', value: 'medium' },
          { name: 'پرریسک (سود 20%، حداکثر 10000 سکه)', value: 'high' }
        ))
    .addIntegerOption(option => 
      option.setName('amount')
        .setDescription('مقدار وام درخواستی')
        .setRequired(true)),
        
  new SlashCommandBuilder()
    .setName('repay')
    .setDescription('بازپرداخت وام')
    .addStringOption(option => 
      option.setName('amount')
        .setDescription('مقدار بازپرداخت (all برای پرداخت کامل)')
        .setRequired(true)),
  
  // بازار سیاه
  new SlashCommandBuilder()
    .setName('blackmarket')
    .setDescription('دسترسی به بازار سیاه (فقط سطح 20 به بالا)'),
    
  // سیستم ارجاع
  new SlashCommandBuilder()
    .setName('referral')
    .setDescription('دریافت کد ارجاع و مشاهده پاداش‌های دعوت'),
    
  new SlashCommandBuilder()
    .setName('usecode')
    .setDescription('استفاده از کد ارجاع')
    .addStringOption(option => 
      option.setName('code')
        .setDescription('کد ارجاع')
        .setRequired(true)),
  
  // اعلام رویداد فصلی
  new SlashCommandBuilder()
    .setName('events')
    .setDescription('مشاهده رویدادهای فصلی فعال'),
    
  // دستور سیستم زندان (فقط برای ادمین‌ها)
  new SlashCommandBuilder()
    .setName('jail')
    .setDescription('زندانی کردن کاربر متخلف')
    .addUserOption(option => 
      option.setName('user')
        .setDescription('کاربر متخلف')
        .setRequired(true))
    .addStringOption(option => 
      option.setName('reason')
        .setDescription('دلیل زندانی کردن')
        .setRequired(true))
    .addIntegerOption(option => 
      option.setName('days')
        .setDescription('مدت زندان (روز)')
        .setRequired(true)
        .setMinValue(1)
        .setMaxValue(7)),
        
  // سیستم آموزشی
  new SlashCommandBuilder()
    .setName('tutorial')
    .setDescription('آموزش استفاده از ربات اقتصادی'),
    
  // سیستم املاک
  new SlashCommandBuilder()
    .setName('properties')
    .setDescription('مدیریت املاک و دارایی‌های شما'),
    
  new SlashCommandBuilder()
    .setName('buy-property')
    .setDescription('خرید ملک')
    .addIntegerOption(option => 
      option.setName('id')
        .setDescription('شماره ملک')
        .setRequired(true)),
        
  // سیستم لیگ‌ها
  new SlashCommandBuilder()
    .setName('leagues')
    .setDescription('مشاهده لیگ‌ها و رتبه‌بندی کاربران'),
];

// Register slash commands
client.once(Events.ClientReady, async () => {
  console.log(`${client.user.tag} آنلاین شد!`);
  client.user.setActivity('اقتصاد دیسکورد | /menu', { type: 'PLAYING' });

  // Register commands with Discord API
  try {
    console.log('Started refreshing application (/) commands.');

    const rest = new REST({ version: '10' }).setToken(process.env.TOKEN);

    await rest.put(
      Routes.applicationCommands(client.user.id),
      { body: slashCommands },
    );

    console.log('Successfully registered application commands.');
  } catch (error) {
    console.error(error);
  }

  // Set up recurring interest payments using cron - runs on the 1st day of each month at 00:00
  console.log('Setting up monthly bank interest using cron...');
  cron.schedule('0 0 1 * *', () => {
    console.log('Running scheduled monthly bank interest...');
    applyBankInterest();
  });
  
  // Set up daily reset for pickpocket counter - runs every day at midnight
  console.log('Setting up daily reset for pickpocket counter...');
  cron.schedule('0 0 * * *', () => {
    console.log('Running daily reset for pickpocket counter...');
    resetDailyPickpocketCounters();
  });
});


// Create a button handler function
const handleButton = async (interaction) => {
  const buttonId = interaction.customId;

  // Handle different button actions
  switch(buttonId) {
    // منوهای اصلی
    case 'economy_menu':
      await showEconomyMenu(interaction);
      break;

    case 'games_menu':
      await showGamesMenu(interaction);
      break;

    case 'shop_menu':
      await showShopMenu(interaction);
      break;

    case 'profile_menu':
      await showProfileMenu(interaction);
      break;

    case 'quests_menu':
      await showQuestsMenu(interaction);
      break;

    case 'duel_menu':
      await showDuelMenu(interaction);
      break;

    case 'jackpot_menu':
      await showJackpotMenu(interaction);
      break;

    case 'admin_menu':
      await showAdminMenu(interaction);
      break;

    case 'main_menu':
      // Return to main menu
      await showMainMenu(interaction);
      break;

    // منوهای بازی‌ها
    case 'skill_games_menu':
      await showSkillGamesMenu(interaction);
      break;

    case 'chance_games_menu':
      await showChanceGamesMenu(interaction);
      break;

    case 'competitive_games_menu':
      await showCompetitiveGamesMenu(interaction);
      break;

    // اقدامات منوی اقتصاد
    case 'check_wallet':
      await checkBalance(interaction);
      break;

    case 'show_deposit_menu':
      await showDepositMenu(interaction);
      break;

    case 'show_withdraw_menu':
      await showWithdrawMenu(interaction);
      break;

    case 'show_transfer_menu':
      await showTransferMenu(interaction);
      break;

    case 'show_investment_menu':
      await showInvestmentMenu(interaction);
      break;

    case 'invest_short':
      // به زودی اضافه می‌شود
      await showInvestmentMenu(interaction);
      break;

    case 'invest_medium':
      // به زودی اضافه می‌شود
      await showInvestmentMenu(interaction);
      break;

    case 'invest_long':
      // به زودی اضافه می‌شود
      await showInvestmentMenu(interaction);
      break;

    case 'claim_daily':
      await claimDaily(interaction);
      break;

    // اقدامات منوی بازی‌ها
    case 'show_coinflip_menu':
      await showCoinFlipMenu(interaction);
      break;

    case 'show_dice_menu':
      await showDiceMenu(interaction);
      break;

    case 'show_rps_menu':
      await showRPSMenu(interaction);
      break;

    case 'show_guess_menu':
      await showGuessNumberMenu(interaction);
      break;

    case 'show_rob_menu':
      await showRobMenu(interaction);
      break;

    case 'show_slot_menu':
      // به زودی اضافه می‌شود
      await showChanceGamesMenu(interaction);
      break;

    case 'show_shooting_menu':
      // به زودی اضافه می‌شود
      await showSkillGamesMenu(interaction);
      break;

    case 'start_race':
      // به زودی اضافه می‌شود
      await showCompetitiveGamesMenu(interaction);
      break;

    case 'start_tournament':
      // به زودی اضافه می‌شود
      await showCompetitiveGamesMenu(interaction);
      break;

    // اقدامات منوی فروشگاه
    case 'show_shop_items':
      await showShop(interaction);
      break;

    case 'show_inventory':
      await showInventory(interaction);
      break;

    case 'show_buy_menu':
      await showBuyItemMenu(interaction);
      break;

    case 'show_sell_menu':
      await showSellMenu(interaction);
      break;

    case 'show_special_items':
      await showSpecialItems(interaction);
      break;

    // اقدامات منوی پروفایل
    case 'show_profile':
      await showProfile(interaction);
      break;

    case 'show_leaderboard':
      await showLeaderboard(interaction);
      break;

    // اقدامات منوی مأموریت‌ها
    case 'show_daily_quests':
      await showDailyQuests(interaction);
      break;

    case 'show_weekly_quests':
      await showWeeklyQuests(interaction);
      break;

    case 'claim_quest_reward':
      await claimQuestReward(interaction);
      break;

    case 'refresh_quests':
      await refreshQuests(interaction);
      break;

    // اقدامات منوی دوئل
    case 'start_duel':
      await startDuel(interaction);
      break;

    case 'show_active_duels':
      await showActiveDuels(interaction);
      break;

    case 'place_bet':
      await placeBet(interaction);
      break;

    case 'show_leaderboard_duels':
      // به زودی اضافه می‌شود
      await showDuelMenu(interaction);
      break;

    case 'duel_stats':
      await showDuelStats(interaction);
      break;

    // اقدامات منوی جکپات
    case 'join_jackpot':
      await joinJackpot(interaction);
      break;

    case 'buy_ticket':
      // به زودی اضافه می‌شود
      await showJackpotMenu(interaction);
      break;

    case 'jackpot_winners':
      // به زودی اضافه می‌شود
      await showJackpotMenu(interaction);
      break;

    // اقدامات منوی مدیریت
    case 'admin_panel':
      await showAdminPanel(interaction);
      break;

    case 'manage_users':
      await showManageUsers(interaction);
      break;

    case 'economy_settings':
      await showEconomySettings(interaction);
      break;

    case 'reset_data':
      await showResetData(interaction);
      break;

    default:
      console.log(`Unknown button: ${buttonId}`);
  }
};

// Function to show main menu
async function showMainMenu(interaction) {
  // بررسی رویدادهای فصلی فعال
  const isEventActive = await checkActiveEvents();
  const eventIcon = isEventActive ? '🎄' : '🏆';
  const eventStyle = isEventActive ? ButtonStyle.Danger : ButtonStyle.Secondary;
  
  // بررسی آموزش‌های تکمیل نشده
  const hasUncompletedTutorial = await checkUncompletedTutorial(interaction.user.id);
  
  // Create the main menu embed
  const mainMenuEmbed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🤖 منوی اصلی Holi Coin')
    .setDescription('به سیستم اقتصادی Holi Coin خوش آمدید! از دکمه‌های زیر برای دسترسی به بخش‌های مختلف استفاده کنید.')
    .addFields(
      { name: '🏦 اقتصاد و بانک', value: 'مدیریت کیف پول، حساب بانکی، وام و تراکنش‌های مالی', inline: true },
      { name: '🎮 بازی‌ها', value: 'سرگرمی و شرط‌بندی برای کسب سکه', inline: true },
      { name: '🛒 فروشگاه', value: 'خرید آیتم‌ها و مدیریت موجودی', inline: true },
      { name: '🎯 مأموریت‌ها', value: 'انجام مأموریت‌های مختلف و کسب جایزه', inline: true },
      { name: '⚔️ دوئل‌ها', value: 'مبارزه با کاربران دیگر و شرط‌بندی', inline: true },
      { name: '🎰 جکپات و بخت‌آزمایی', value: 'شرکت در قرعه‌کشی‌های بزرگ', inline: true },
      { name: '👤 پروفایل', value: 'مشاهده پروفایل، رتبه‌بندی و لیگ‌ها', inline: true },
      { name: '🏘️ املاک و دارایی‌ها', value: 'خرید املاک و کسب درآمد روزانه', inline: true },
      { name: '🛠️ مدیریت', value: 'تنظیمات و مدیریت ربات (مخصوص ادمین‌ها)', inline: false }
    )
    .setFooter({ text: 'برای دسترسی به هر بخش، روی دکمه مربوطه کلیک کنید.' });

  // اضافه کردن اعلان رویداد فصلی در صورت فعال بودن
  if (isEventActive) {
    const eventInfo = await getActiveEventInfo();
    mainMenuEmbed.addFields(
      { name: '🎄 رویداد فصلی فعال!', value: `${eventInfo.name} - ${eventInfo.description}\nزمان باقی‌مانده: ${eventInfo.timeLeft}`, inline: false }
    );
  }

  // Create buttons for main menu - Row 1
  const row1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('اقتصاد و بانک')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏦'),
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازی‌ها')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🎮'),
      new ButtonBuilder()
        .setCustomId('shop_menu')
        .setLabel('فروشگاه')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🛒'),
      new ButtonBuilder()
        .setCustomId('quests_menu')
        .setLabel('مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🎯')
    );

  // Row 2
  const row2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('duel_menu')
        .setLabel('دوئل‌ها')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('⚔️'),
      new ButtonBuilder()
        .setCustomId('jackpot_menu')
        .setLabel('جکپات')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🎰'),
      new ButtonBuilder()
        .setCustomId('profile_menu')
        .setLabel('پروفایل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('👤'),
      new ButtonBuilder()
        .setCustomId('properties_menu')
        .setLabel('املاک')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏘️')
    );
    
  // Row 3 - ویژگی‌های جدید
  const row3 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('events_menu')
        .setLabel('رویدادها')
        .setStyle(eventStyle)
        .setEmoji(eventIcon),
      new ButtonBuilder()
        .setCustomId('leagues_menu')
        .setLabel('لیگ‌ها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏅'),
      new ButtonBuilder()
        .setCustomId('tutorial_menu')
        .setLabel('آموزش')
        .setStyle(hasUncompletedTutorial ? ButtonStyle.Success : ButtonStyle.Secondary)
        .setEmoji('📚'),
      new ButtonBuilder()
        .setCustomId('admin_menu')
        .setLabel('مدیریت')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🛠️')
    );

  // Check if this is a new interaction or an update
  if (interaction.replied || interaction.deferred) {
    await interaction.update({ embeds: [mainMenuEmbed], components: [row1, row2, row3] });
  } else {
    await interaction.reply({ embeds: [mainMenuEmbed], components: [row1, row2, row3] });
  }
}

// Helper function to check active events
async function checkActiveEvents() {
  const events = await db.get('seasonal_events') || [];
  const now = Date.now();
  
  return events.some(event => event.startDate <= now && event.endDate >= now);
}

// Get active event information
async function getActiveEventInfo() {
  const events = await db.get('seasonal_events') || [];
  const now = Date.now();
  
  const activeEvent = events.find(event => event.startDate <= now && event.endDate >= now);
  
  if (!activeEvent) return null;
  
  const timeLeftMs = activeEvent.endDate - now;
  const days = Math.floor(timeLeftMs / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeLeftMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  
  return {
    name: activeEvent.name,
    description: activeEvent.description,
    timeLeft: `${days} روز و ${hours} ساعت`
  };
}

// Helper function to check uncompleted tutorial for new users
async function checkUncompletedTutorial(userId) {
  const joinedAt = await db.get(`joined_at_${userId}`);
  if (!joinedAt) {
    // اگر کاربر جدید است، زمان عضویت را ثبت کن
    await db.set(`joined_at_${userId}`, Date.now());
    return true;
  }
  
  const now = Date.now();
  const threeDaysMs = 3 * 24 * 60 * 60 * 1000;
  
  // اگر کمتر از 3 روز از عضویت گذشته و آموزش تکمیل نشده
  if (now - joinedAt < threeDaysMs) {
    const tutorialCompleted = await db.get(`tutorial_completed_${userId}`);
    return !tutorialCompleted;
  }
  
  return false;
}

// Economy Menu
async function showEconomyMenu(interaction) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const bank = await db.get(`bank_${userId}`) || 0;
  
  // بررسی وام فعال
  const activeLoan = await db.get(`loan_${userId}`);
  const loanInfoText = activeLoan 
    ? `وام فعال: **${activeLoan.amount}** 🪙 (نوع: ${getReadableLoanType(activeLoan.type)})\nسررسید: ${new Date(activeLoan.dueDate).toLocaleDateString('fa-IR')}\nسود: ${(activeLoan.interestRate * 100).toFixed(0)}%`
    : 'شما وام فعالی ندارید.';
  
  // بررسی اگر کاربر رفرال داشته
  const referrals = await db.get(`referrals_${userId}`) || [];
  const referralCount = referrals.length;
  const referralBonus = referralCount > 0 ? `شما ${referralCount} نفر را دعوت کرده‌اید و ${referralCount * CONFIG.REFERRAL_BONUS_REFERRER} سکه پاداش دریافت کرده‌اید!` : '';

  const economyEmbed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🏦 منوی اقتصاد و بانک')
    .setDescription('از دکمه‌های زیر برای مدیریت اقتصاد خود استفاده کنید.')
    .addFields(
      { name: '💰 موجودی فعلی', value: `کیف پول: **${wallet}** 🪙\nبانک: **${bank}** 🪙\nمجموع: **${wallet + bank}** 🪙`, inline: false },
      { name: '💳 عملیات بانکی', value: 'واریز، برداشت و انتقال سکه', inline: true },
      { name: '📈 سرمایه‌گذاری', value: 'سرمایه‌گذاری و کسب سود', inline: true },
      { name: '🎁 جایزه روزانه', value: 'دریافت سکه رایگان روزانه', inline: true },
      { name: '📊 سود بانکی', value: `نرخ سود ماهانه: ${CONFIG.BANK_INTEREST_RATE * 100}%`, inline: true },
      { name: '🏛️ وام بانکی', value: loanInfoText, inline: false }
    )
    .setFooter({ text: 'سکه‌های خود را در بانک نگهداری کنید تا سود ماهانه دریافت کنید!' });
    
  // اضافه کردن اطلاعات رفرال اگر وجود داشت
  if (referralBonus) {
    economyEmbed.addFields({ name: '🤝 سیستم ارجاع', value: referralBonus, inline: false });
  }

  // دکمه‌های مدیریت اقتصاد
  const economyRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('check_wallet')
        .setLabel('موجودی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💰'),
      new ButtonBuilder()
        .setCustomId('show_deposit_menu')
        .setLabel('واریز به بانک')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🏦'),
      new ButtonBuilder()
        .setCustomId('show_withdraw_menu')
        .setLabel('برداشت از بانک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('💵')
    );

  const economyRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_investment_menu')
        .setLabel('سرمایه‌گذاری')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('📈'),
      new ButtonBuilder()
        .setCustomId('show_transfer_menu')
        .setLabel('انتقال سکه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔄'),
      new ButtonBuilder()
        .setCustomId('claim_daily')
        .setLabel('جایزه روزانه')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🎁')
    );
    
  // دکمه‌های وام و ارجاع
  const economyRow3 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_loan_menu')
        .setLabel(activeLoan ? 'مدیریت وام' : 'درخواست وام')
        .setStyle(activeLoan ? ButtonStyle.Danger : ButtonStyle.Primary)
        .setEmoji('🏛️'),
      new ButtonBuilder()
        .setCustomId('show_repay_menu')
        .setLabel('بازپرداخت وام')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💲')
        .setDisabled(!activeLoan),
      new ButtonBuilder()
        .setCustomId('show_referral_menu')
        .setLabel('سیستم ارجاع')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🤝')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [economyEmbed], components: [economyRow1, economyRow2, economyRow3, backRow] });
}

// Helper function to get readable loan type
function getReadableLoanType(loanType) {
  switch(loanType) {
    case 'low': return 'کم‌ریسک';
    case 'medium': return 'متوسط';
    case 'high': return 'پرریسک';
    default: return loanType;
  }
}

// Investment Menu
async function showInvestmentMenu(interaction) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const investments = await db.get(`investments_${userId}`) || [];
  const economyState = await db.get('economy_state') || 'normal'; // وضعیت اقتصادی: normal, boom, recession
  
  let investmentsList = '';
  let totalInvestment = 0;
  
  if (investments.length > 0) {
    investmentsList = '**سرمایه‌گذاری‌های فعلی:**\n';
    investments.forEach((inv, index) => {
      const returnDate = new Date(inv.returnDate);
      const daysLeft = Math.ceil((returnDate - Date.now()) / (1000 * 60 * 60 * 24));
      investmentsList += `${index + 1}. **${inv.amount}** 🪙 سرمایه‌گذاری **${inv.type}** - بازگشت در **${daysLeft}** روز دیگر (سود پیش‌بینی شده: **${inv.expectedProfit}** 🪙)\n`;
      totalInvestment += inv.amount;
    });
  } else {
    investmentsList = '**شما هیچ سرمایه‌گذاری فعالی ندارید.**';
  }

  // تنظیم نرخ سود بر اساس وضعیت اقتصادی
  let economyStateText = '';
  let lowRiskRate = 5, mediumRiskRate = { min: 10, max: 20 }, highRiskRate = { min: 20, max: 50 };
  let economyIcon = '📊';
  
  if (economyState === 'boom') {
    economyStateText = '🔺 رونق اقتصادی! سود سرمایه‌گذاری‌ها افزایش یافته است.';
    lowRiskRate = 7;
    mediumRiskRate = { min: 15, max: 25 };
    highRiskRate = { min: 30, max: 70 };
    economyIcon = '📈';
  } else if (economyState === 'recession') {
    economyStateText = '🔻 رکود اقتصادی! سود سرمایه‌گذاری‌ها کاهش یافته است.';
    lowRiskRate = 3;
    mediumRiskRate = { min: 7, max: 15 };
    highRiskRate = { min: 10, max: 30 };
    economyIcon = '📉';
  } else {
    economyStateText = '📊 وضعیت اقتصادی عادی';
  }

  const investmentEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('📈 منوی سرمایه‌گذاری پیشرفته')
    .setDescription('سکه‌های خود را سرمایه‌گذاری کنید و با سطوح مختلف ریسک، سود متفاوت دریافت کنید!')
    .addFields(
      { name: '💰 موجودی کیف پول', value: `**${wallet}** 🪙`, inline: true },
      { name: '📊 کل سرمایه‌گذاری', value: `**${totalInvestment}** 🪙`, inline: true },
      { name: `${economyIcon} وضعیت اقتصادی`, value: economyStateText, inline: false },
      { name: '📈 انواع سرمایه‌گذاری', value: 
        `**کم‌ریسک (امن)** - سود سالانه: **${lowRiskRate}%** (بدون ریسک)\n` +
        `  • حداقل مبلغ: **1,000** 🪙 | دوره: 7 روز\n\n` +
        `**ریسک متوسط** - سود بین **${mediumRiskRate.min}%** تا **${mediumRiskRate.max}%**\n` +
        `  • حداقل مبلغ: **5,000** 🪙 | دوره: 14 روز\n` +
        `  • ریسک: **10%** احتمال از دست دادن **5%** سرمایه\n\n` +
        `**پرریسک** - سود بین **${highRiskRate.min}%** تا **${highRiskRate.max}%**\n` +
        `  • حداقل مبلغ: **10,000** 🪙 | دوره: 30 روز\n` +
        `  • ریسک: **30%** احتمال از دست دادن **15%** سرمایه`
        , inline: false },
      { name: '\u200B', value: investmentsList, inline: false }
    )
    .setFooter({ text: 'توجه: پس از سرمایه‌گذاری، تا زمان سررسید نمی‌توانید سکه‌های خود را برداشت کنید!' });

  const investRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('invest_low_risk')
        .setLabel('سرمایه‌گذاری کم‌ریسک')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🛡️'),
      new ButtonBuilder()
        .setCustomId('invest_medium_risk')
        .setLabel('سرمایه‌گذاری با ریسک متوسط')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('⚖️')
    );
  
  const investRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('invest_high_risk')
        .setLabel('سرمایه‌گذاری پرریسک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🔥'),
      new ButtonBuilder()
        .setCustomId('check_investments')
        .setLabel('بررسی سرمایه‌گذاری‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔍')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [investmentEmbed], components: [investRow1, investRow2, backRow] });
}

// Games Menu
async function showGamesMenu(interaction) {
  const gamesEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('🎮 منوی بازی‌ها')
    .setDescription('با بازی کردن و شرط‌بندی سکه به دست آورید! از دکمه‌های زیر برای انتخاب بخش مورد نظر استفاده کنید.')
    .addFields(
      { name: '🎯 بازی‌های مهارتی', value: 'بازی‌هایی که نیاز به مهارت و تصمیم‌گیری دارند', inline: true },
      { name: '🎰 بازی‌های شانس', value: 'بازی‌هایی که بر اساس شانس کار می‌کنند', inline: true },
      { name: '🏆 بازی‌های رقابتی', value: 'بازی‌های مخصوص رقابت بین کاربران', inline: true },
      { name: '💎 جکپات', value: 'شرکت در جکپات‌های با جوایز بزرگ', inline: true },
      { name: '🎟️ بخت‌آزمایی', value: 'شرکت در قرعه‌کشی‌های ویژه', inline: true }
    )
    .setFooter({ text: 'مراقب باشید! در بازی‌ها ممکن است سکه از دست بدهید.' });

  const gamesRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('skill_games_menu')
        .setLabel('بازی‌های مهارتی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🎯'),
      new ButtonBuilder()
        .setCustomId('chance_games_menu')
        .setLabel('بازی‌های شانس')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🎰'),
      new ButtonBuilder()
        .setCustomId('competitive_games_menu')
        .setLabel('بازی‌های رقابتی')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🏆')
    );

  const gamesRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('jackpot_menu')
        .setLabel('جکپات')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💎'),
      new ButtonBuilder()
        .setCustomId('lottery_menu')
        .setLabel('بخت‌آزمایی')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🎟️')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [gamesEmbed], components: [gamesRow1, gamesRow2, backRow] });
}

// Skill Games Menu
async function showSkillGamesMenu(interaction) {
  const skillGamesEmbed = new EmbedBuilder()
    .setColor('#3498db')
    .setTitle('🎯 بازی‌های مهارتی')
    .setDescription('این بازی‌ها به مهارت و تصمیم‌گیری نیاز دارند. شانس خود را امتحان کنید!')
    .addFields(
      { name: '✂️ سنگ کاغذ قیچی', value: 'مبارزه با ربات در یک بازی کلاسیک', inline: true },
      { name: '🔢 حدس عدد', value: 'یک عدد بین 1 تا 10 حدس بزنید', inline: true },
      { name: '🎯 تیراندازی', value: 'هدف‌گیری و کسب امتیاز', inline: true }
    )
    .setFooter({ text: 'با استفاده از مهارت خود سکه‌های بیشتری به دست آورید!' });

  const skillGamesRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_rps_menu')
        .setLabel('سنگ کاغذ قیچی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('✂️'),
      new ButtonBuilder()
        .setCustomId('show_guess_menu')
        .setLabel('حدس عدد')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🔢'),
      new ButtonBuilder()
        .setCustomId('show_shooting_menu')
        .setLabel('تیراندازی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🎯')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [skillGamesEmbed], components: [skillGamesRow, backRow] });
}

// Chance Games Menu
async function showChanceGamesMenu(interaction) {
  const chanceGamesEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('🎰 بازی‌های شانس')
    .setDescription('این بازی‌ها بر اساس شانس کار می‌کنند. بخت خود را بیازمایید!')
    .addFields(
      { name: '🪙 شیر یا خط', value: 'شانس 50/50 برای دو برابر کردن سکه‌ها', inline: true },
      { name: '🎲 تاس', value: 'حدس بزنید تاس چه عددی می‌آورد (شش برابر برد)', inline: true },
      { name: '🎰 اسلات', value: 'ماشین اسلات با جوایز متنوع', inline: true },
      { name: '🕵️ دزدی', value: 'دزدی از کاربران دیگر (با ریسک دستگیری)', inline: true }
    )
    .setFooter({ text: 'مراقب باشید! در بازی‌های شانس ممکن است سکه از دست بدهید.' });

  const chanceGamesRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_coinflip_menu')
        .setLabel('شیر یا خط')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🪙'),
      new ButtonBuilder()
        .setCustomId('show_dice_menu')
        .setLabel('تاس')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🎲')
    );

  const chanceGamesRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_slot_menu')
        .setLabel('اسلات')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🎰'),
      new ButtonBuilder()
        .setCustomId('show_rob_menu')
        .setLabel('دزدی')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🕵️')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [chanceGamesEmbed], components: [chanceGamesRow1, chanceGamesRow2, backRow] });
}

// Competitive Games Menu
async function showCompetitiveGamesMenu(interaction) {
  const competitiveGamesEmbed = new EmbedBuilder()
    .setColor('#2ecc71')
    .setTitle('🏆 بازی‌های رقابتی')
    .setDescription('در این بازی‌ها با کاربران دیگر رقابت کنید و جوایز ارزشمندی به دست آورید!')
    .addFields(
      { name: '⚔️ دوئل', value: 'مبارزه یک به یک با کاربران دیگر', inline: true },
      { name: '🏁 مسابقه', value: 'شرکت در مسابقات گروهی', inline: true },
      { name: '🤼 تورنمنت', value: 'شرکت در تورنمنت‌های با جوایز بزرگ', inline: true }
    )
    .setFooter({ text: 'با شکست دادن رقبا، سکه و اعتبار بیشتری کسب کنید!' });

  const competitiveGamesRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('start_duel')
        .setLabel('دوئل')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('⚔️'),
      new ButtonBuilder()
        .setCustomId('start_race')
        .setLabel('مسابقه')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏁'),
      new ButtonBuilder()
        .setCustomId('start_tournament')
        .setLabel('تورنمنت')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🤼')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [competitiveGamesEmbed], components: [competitiveGamesRow, backRow] });
}

// Shop Menu
async function showShopMenu(interaction) {
  const shopEmbed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle('🛒 منوی فروشگاه')
    .setDescription('بهترین آیتم‌ها و امکانات ویژه در فروشگاه ما! از دکمه‌های زیر برای مدیریت خرید و فروش استفاده کنید.')
    .addFields(
      { name: '🛍️ فروشگاه', value: 'مشاهده و خرید آیتم‌های موجود', inline: true },
      { name: '🎒 کوله‌پشتی', value: 'مشاهده آیتم‌های خریداری شده', inline: true },
      { name: '🔄 خرید و فروش', value: 'خرید آیتم‌های جدید یا فروش آیتم‌های موجود', inline: true },
      { name: '🏆 آیتم‌های ویژه', value: 'آیتم‌های منحصر به فرد با قابلیت‌های خاص', inline: true }
    )
    .setFooter({ text: 'آیتم‌های خاص می‌توانند به شما مزیت‌های ویژه‌ای بدهند!' });

  const shopRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_shop_items')
        .setLabel('فروشگاه')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🛍️'),
      new ButtonBuilder()
        .setCustomId('show_inventory')
        .setLabel('کوله‌پشتی')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🎒')
    );
  
  const shopRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_buy_menu')
        .setLabel('خرید آیتم')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💰'),
      new ButtonBuilder()
        .setCustomId('show_sell_menu')
        .setLabel('فروش آیتم')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🔄'),
      new ButtonBuilder()
        .setCustomId('show_special_items')
        .setLabel('آیتم‌های ویژه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🏆')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [shopEmbed], components: [shopRow, shopRow2, backRow] });
}

// Sell Items Menu
async function showSellMenu(interaction) {
  const userId = interaction.user.id;
  const inventory = await db.get(`inventory_${userId}`) || [];
  
  let itemsList = '';
  
  if (inventory.length > 0) {
    itemsList = '**آیتم‌های موجود در کوله‌پشتی:**\n';
    inventory.forEach((item, index) => {
      const sellPrice = Math.floor(item.price * 0.7); // 70% قیمت خرید
      itemsList += `${index + 1}. ${item.icon} **${item.name}** - قیمت فروش: **${sellPrice}** 🪙\n`;
    });
  } else {
    itemsList = '**شما هیچ آیتمی برای فروش ندارید.**';
  }

  const sellEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('🔄 فروش آیتم')
    .setDescription('آیتم‌های خود را بفروشید و سکه دریافت کنید!')
    .addFields(
      { name: 'راهنمای فروش', value: 'برای فروش آیتم از دستور `/sell [شماره آیتم]` استفاده کنید.', inline: false },
      { name: '\u200B', value: itemsList, inline: false },
      { name: '⚠️ توجه', value: 'آیتم‌ها با **70%** قیمت خرید فروخته می‌شوند!', inline: false }
    )
    .setFooter({ text: 'پس از فروش، آیتم از کوله‌پشتی شما حذف می‌شود.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('shop_menu')
        .setLabel('بازگشت به منوی فروشگاه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [sellEmbed], components: [backRow] });
}

// Special Items Menu
async function showSpecialItems(interaction) {
  const specialItemsEmbed = new EmbedBuilder()
    .setColor('#f1c40f')
    .setTitle('🏆 آیتم‌های ویژه')
    .setDescription('آیتم‌های منحصر به فرد با قابلیت‌های خاص!')
    .addFields(
      { name: '👑 تاج سلطنتی', value: '**قیمت: 25,000** 🪙\nنشان ویژه در پروفایل و دسترسی به امکانات اختصاصی', inline: true },
      { name: '🛡️ سپر الماس', value: '**قیمت: 15,000** 🪙\nمحافظت کامل در برابر دزدی به مدت 7 روز', inline: true },
      { name: '🔮 توکن شانس', value: '**قیمت: 5,000** 🪙\nافزایش 2 برابری شانس برد در تمام بازی‌ها به مدت 3 روز', inline: true },
      { name: '⏱️ تسریع‌کننده زمان', value: '**قیمت: 7,500** 🪙\nکاهش 50% کولداون‌های تمام عملیات به مدت 5 روز', inline: true },
      { name: '💎 الماس جادویی', value: '**قیمت: 10,000** 🪙\nافزایش 50% تمام درآمدها به مدت 3 روز', inline: true }
    )
    .setFooter({ text: 'این آیتم‌ها فقط در مناسبت‌های خاص قابل خرید هستند!' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('shop_menu')
        .setLabel('بازگشت به منوی فروشگاه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [specialItemsEmbed], components: [backRow] });
}

// Profile Menu
async function showProfileMenu(interaction) {
  const userId = interaction.user.id;
  const userLevel = await db.get(`level_${userId}`) || 1;
  const userXP = await db.get(`xp_${userId}`) || 0;
  const userJob = await db.get(`job_${userId}`) || 'none';
  const userSkills = await db.get(`skills_${userId}`) || [];
  
  // تعیین نام شغل
  let jobDisplay = 'بدون شغل';
  if (userJob === 'thief') jobDisplay = '🦹‍♂️ دزد حرفه‌ای';
  else if (userJob === 'trader') jobDisplay = '🧙‍♂️ تاجر';
  else if (userJob === 'investor') jobDisplay = '💼 سرمایه‌گذار';
  else if (userJob === 'warrior') jobDisplay = '⚔️ جنگجو';
  else if (userJob === 'mastermind') jobDisplay = '🧠 ذهن مدبر';
  else if (userJob === 'gambler') jobDisplay = '🎲 قمارباز';
  
  const profileEmbed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('👤 منوی پروفایل')
    .setDescription('اطلاعات پروفایل خود و سایر کاربران را مشاهده کنید.')
    .addFields(
      { name: '🪪 پروفایل من', value: 'مشاهده اطلاعات و وضعیت پروفایل خود', inline: true },
      { name: '🏅 لیدربورد', value: 'مشاهده ثروتمندترین کاربران سرور', inline: true },
      { name: '📊 آمار من', value: 'آمار دقیق فعالیت‌های شما در سیستم', inline: true },
      { name: '👔 شغل فعلی', value: jobDisplay, inline: true },
      { name: '📋 سطح', value: `${userLevel} (XP: ${userXP})`, inline: true },
      { name: '🏆 دستاوردها', value: 'دستاوردهای کسب شده توسط شما', inline: true }
    )
    .setFooter({ text: 'با فعالیت بیشتر، رتبه خود را در لیدربورد بالا ببرید!' });

  const profileRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_profile')
        .setLabel('پروفایل من')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🪪'),
      new ButtonBuilder()
        .setCustomId('show_leaderboard')
        .setLabel('لیدربورد')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🏅'),
      new ButtonBuilder()
        .setCustomId('show_statistics')
        .setLabel('آمار من')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('📊')
    );
    
  const profileRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_jobs')
        .setLabel('سیستم شغل‌ها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('👔'),
      new ButtonBuilder()
        .setCustomId('show_skills')
        .setLabel('مهارت‌های من')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🧠'),
      new ButtonBuilder()
        .setCustomId('show_achievements')
        .setLabel('دستاوردها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏆')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [profileEmbed], components: [profileRow1, profileRow2, backRow] });
}

// Quests Menu
async function showQuestsMenu(interaction) {
  const questsEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('🎯 منوی مأموریت‌ها')
    .setDescription('با انجام مأموریت‌های مختلف، جوایز ارزشمندی دریافت کنید!')
    .addFields(
      { name: '📆 مأموریت‌های روزانه', value: 'مأموریت‌های ساده که هر روز تغییر می‌کنند', inline: true },
      { name: '📅 مأموریت‌های هفتگی', value: 'مأموریت‌های چالشی‌تر با جوایز بیشتر', inline: true },
      { name: '🏆 مأموریت‌های ویژه', value: 'مأموریت‌های خاص با جوایز منحصر به فرد', inline: true },
      { name: '🔄 وضعیت پیشرفت', value: 'مشاهده پیشرفت در مأموریت‌های فعلی', inline: true }
    )
    .setFooter({ text: 'مأموریت‌ها یکی از بهترین راه‌های کسب درآمد هستند!' });

  const questsRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_daily_quests')
        .setLabel('مشاهده مأموریت‌ها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('📜'),
      new ButtonBuilder()
        .setCustomId('claim_quest_reward')
        .setLabel('دریافت جوایز')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🏆'),
      new ButtonBuilder()
        .setCustomId('refresh_quests')
        .setLabel('بروزرسانی مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔄')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [questsEmbed], components: [questsRow, backRow] });
}

// Refresh Quests
async function refreshQuests(interaction) {
  const refreshQuestsEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('🔄 بروزرسانی مأموریت‌ها')
    .setDescription('مأموریت‌های جدید با موفقیت بارگذاری شدند!')
    .addFields(
      { name: '✅ انجام شد', value: 'برای مشاهده مأموریت‌های جدید، به بخش مشاهده مأموریت‌ها بروید.', inline: false }
    )
    .setFooter({ text: 'مأموریت‌های روزانه هر ۲۴ ساعت و مأموریت‌های هفتگی هر ۷ روز به طور خودکار تغییر می‌کنند.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('quests_menu')
        .setLabel('بازگشت به منوی مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [refreshQuestsEmbed], components: [backRow] });
}

// Duel Menu
async function showDuelMenu(interaction) {
  const duelEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('⚔️ منوی دوئل و رقابت‌ها')
    .setDescription('با کاربران دیگر مبارزه کنید و روی نتیجه دوئل‌ها شرط ببندید!')
    .addFields(
      { name: '⚔️ شروع دوئل', value: 'درخواست دوئل با کاربر دیگر', inline: true },
      { name: '🏅 برترین‌ها', value: 'مشاهده لیست برترین دوئل‌کنندگان', inline: true },
      { name: '🎲 شرط‌بندی روی دوئل‌ها', value: 'شرط‌بندی روی نتیجه دوئل‌های دیگران', inline: true },
      { name: '📊 آمار دوئل', value: 'مشاهده تعداد برد و باخت‌های شما', inline: true }
    )
    .setFooter({ text: 'هیجان‌انگیزترین بخش سیستم اقتصادی ما!' });

  const duelRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('start_duel')
        .setLabel('شروع دوئل')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('⚔️'),
      new ButtonBuilder()
        .setCustomId('show_leaderboard_duels')
        .setLabel('برترین‌ها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏅')
    );

  const duelRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('show_active_duels')
        .setLabel('دوئل‌های فعال')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('👁️'),
      new ButtonBuilder()
        .setCustomId('place_bet')
        .setLabel('شرط‌بندی')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🎲'),
      new ButtonBuilder()
        .setCustomId('duel_stats')
        .setLabel('آمار من')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('📊')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [duelEmbed], components: [duelRow, duelRow2, backRow] });
}

// Duel Stats
async function showDuelStats(interaction) {
  const userId = interaction.user.id;
  const wins = await db.get(`duelWins_${userId}`) || 0;
  const losses = await db.get(`duelLosses_${userId}`) || 0;
  const totalDuels = wins + losses;
  const winrate = totalDuels > 0 ? Math.floor((wins / totalDuels) * 100) : 0;
  
  const statsEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle(`📊 آمار دوئل ${interaction.user.username}`)
    .setThumbnail(interaction.user.displayAvatarURL())
    .addFields(
      { name: '🏆 تعداد برد', value: `**${wins}**`, inline: true },
      { name: '❌ تعداد باخت', value: `**${losses}**`, inline: true },
      { name: '🎮 کل دوئل‌ها', value: `**${totalDuels}**`, inline: true },
      { name: '📈 درصد برد', value: `**${winrate}%**`, inline: true },
      { name: '💰 سکه کسب شده از دوئل', value: `**${await db.get(`duelCoins_${userId}`) || 0}** 🪙`, inline: true }
    )
    .setFooter({ text: 'با شکست دادن رقبای قدرتمندتر، امتیاز و جوایز بیشتری کسب کنید!' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('duel_menu')
        .setLabel('بازگشت به منوی دوئل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [statsEmbed], components: [backRow] });
}

// Jackpot Menu
async function showJackpotMenu(interaction) {
  const jackpotEmbed = new EmbedBuilder()
    .setColor('#f1c40f')
    .setTitle('🎰 منوی جکپات و بخت‌آزمایی')
    .setDescription('شانس خود را در قرعه‌کشی‌های بزرگ امتحان کنید و جوایز هنگفت ببرید!')
    .addFields(
      { name: '💰 شرکت در جکپات', value: 'شرکت در قرعه‌کشی بزرگ و شانس بردن جایزه‌ی اصلی', inline: true },
      { name: '🎟️ خرید بلیط قرعه‌کشی', value: 'خرید بلیط برای افزایش شانس بردن جوایز ویژه', inline: true },
      { name: '🏆 برندگان اخیر', value: 'مشاهده لیست برندگان قرعه‌کشی‌های قبلی', inline: true },
      { name: '⏱ زمان باقی‌مانده', value: 'زمان باقی‌مانده تا قرعه‌کشی بعدی', inline: true }
    )
    .setFooter({ text: 'با هر بلیط، شانس برنده شدن شما افزایش می‌یابد!' });

  const jackpotRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('join_jackpot')
        .setLabel('شرکت در جکپات')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💰'),
      new ButtonBuilder()
        .setCustomId('buy_ticket')
        .setLabel('خرید بلیط قرعه‌کشی')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🎟️'),
      new ButtonBuilder()
        .setCustomId('jackpot_winners')
        .setLabel('برندگان اخیر')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🏆')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [jackpotEmbed], components: [jackpotRow, backRow] });
}

// Join Jackpot
async function joinJackpot(interaction) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const jackpotAmount = await db.get('jackpot_amount') || 10000;
  const entryFee = 500; // مقدار ورود به جکپات
  
  if (wallet < entryFee) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('❌ خطا')
      .setDescription(`شما برای شرکت در جکپات حداقل به **${entryFee}** 🪙 نیاز دارید.`);
      
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('jackpot_menu')
          .setLabel('بازگشت به منوی جکپات')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('⬅️')
      );
      
    return await interaction.update({ embeds: [errorEmbed], components: [backRow] });
  }
  
  // کم کردن هزینه ورود از کیف پول
  await db.sub(`wallet_${userId}`, entryFee);
  
  // اضافه کردن کاربر به لیست شرکت‌کنندگان
  const participants = await db.get('jackpot_participants') || [];
  participants.push(userId);
  await db.set('jackpot_participants', participants);
  
  // افزایش مبلغ جکپات
  await db.add('jackpot_amount', entryFee * 0.8); // 80% مبلغ به جکپات اضافه می‌شود
  
  const successEmbed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('✅ شرکت در جکپات')
    .setDescription(`شما با موفقیت در جکپات شرکت کردید!\nمبلغ فعلی جکپات: **${jackpotAmount + (entryFee * 0.8)}** 🪙`)
    .addFields(
      { name: '🎟️ تعداد شرکت‌کنندگان', value: `**${participants.length}** نفر`, inline: true },
      { name: '🎰 شانس برد شما', value: `**${(1 / participants.length * 100).toFixed(2)}%**`, inline: true },
      { name: '⏱ زمان باقی‌مانده', value: 'قرعه‌کشی بعدی: **24 ساعت دیگر**', inline: true }
    );
    
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('jackpot_menu')
        .setLabel('بازگشت به منوی جکپات')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
    
  await interaction.update({ embeds: [successEmbed], components: [backRow] });
}

// Admin Menu
async function showAdminMenu(interaction) {
  // بررسی دسترسی ادمین
  const isAdmin = interaction.member.permissions.has('ADMINISTRATOR');
  
  if (!isAdmin) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('❌ دسترسی محدود')
      .setDescription('شما دسترسی لازم برای استفاده از این بخش را ندارید.')
      .setFooter({ text: 'این بخش مخصوص مدیران سرور است.' });
      
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('main_menu')
          .setLabel('بازگشت به منوی اصلی')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('⬅️')
      );
      
    return await interaction.update({ embeds: [errorEmbed], components: [backRow] });
  }
  
  const adminEmbed = new EmbedBuilder()
    .setColor('#34495e')
    .setTitle('🛠️ منوی تنظیمات و مدیریت')
    .setDescription('در این بخش می‌توانید تنظیمات ربات و کاربران را مدیریت کنید.')
    .addFields(
      { name: '🔑 پنل مدیریت', value: 'دسترسی به تنظیمات اصلی ربات', inline: true },
      { name: '📊 مدیریت کاربران', value: 'مشاهده و تنظیمات مرتبط با کاربران', inline: true },
      { name: '💰 تنظیم اقتصاد', value: 'تغییر نرخ سود، مالیات و محدودیت‌های اقتصادی', inline: true },
      { name: '🔄 ریست اطلاعات', value: 'پاک‌سازی داده‌ها و بازنشانی تنظیمات', inline: true }
    )
    .setFooter({ text: 'توجه: تغییرات در این بخش بر کل سیستم اقتصادی تأثیر می‌گذارد!' });

  const adminRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_panel')
        .setLabel('پنل مدیریت')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🔑'),
      new ButtonBuilder()
        .setCustomId('manage_users')
        .setLabel('مدیریت کاربران')
        .setStyle(ButtonStyle.Secondary)

// منوی وام
async function showLoanMenu(interaction) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const bank = await db.get(`bank_${userId}`) || 0;
  const activeLoan = await db.get(`loan_${userId}`);
  const userLevel = await db.get(`level_${userId}`) || 1;
  
  // اگر وام فعال دارد، منوی مدیریت وام را نشان بده
  if (activeLoan) {
    return showActiveLoanMenu(interaction, activeLoan);
  }
  
  // بررسی حداقل سطح برای وام گرفتن
  const minLevelForLoan = 5;
  if (userLevel < minLevelForLoan) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('⚠️ سطح ناکافی')
      .setDescription(`شما باید حداقل سطح ${minLevelForLoan} باشید تا بتوانید وام دریافت کنید.`)
      .setFooter({ text: `سطح فعلی شما: ${userLevel}` });
      
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('economy_menu')
          .setLabel('بازگشت به منوی اقتصاد')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('⬅️')
      );
      
    return await interaction.update({ embeds: [errorEmbed], components: [backRow] });
  }
  
  // محاسبه حداکثر وام قابل دریافت براساس سطح کاربر و دارایی‌ها
  const maxEligibleLoan = Math.min(
    CONFIG.LOAN_TYPES.HIGH.maxAmount,
    Math.floor((wallet + bank) * 2)
  );
  
  // انواع وام
  const loanEmbed = new EmbedBuilder()
    .setColor('#1abc9c')
    .setTitle('🏛️ درخواست وام بانکی')
    .setDescription('با استفاده از سیستم وام، می‌توانید به سرعت سکه دریافت کنید، اما باید با سود مشخص بازپرداخت کنید!')
    .addFields(
      { name: '💰 موجودی فعلی', value: `کیف پول: **${wallet}** 🪙\nبانک: **${bank}** 🪙\nمجموع: **${wallet + bank}** 🪙`, inline: false },
      { name: '📝 انواع وام', value: 
        `🟢 **وام کم‌ریسک**\n` +
        `• حداکثر مقدار: **${CONFIG.LOAN_TYPES.LOW.maxAmount}** 🪙\n` +
        `• نرخ سود: **${CONFIG.LOAN_TYPES.LOW.interestRate * 100}%**\n` +
        `• مدت بازپرداخت: **${CONFIG.LOAN_TYPES.LOW.durationDays}** روز\n\n` +
        
        `🟡 **وام متوسط**\n` +
        `• حداکثر مقدار: **${CONFIG.LOAN_TYPES.MEDIUM.maxAmount}** 🪙\n` +
        `• نرخ سود: **${CONFIG.LOAN_TYPES.MEDIUM.interestRate * 100}%**\n` +
        `• مدت بازپرداخت: **${CONFIG.LOAN_TYPES.MEDIUM.durationDays}** روز\n\n` +
        
        `🔴 **وام پرریسک**\n` +
        `• حداکثر مقدار: **${CONFIG.LOAN_TYPES.HIGH.maxAmount}** 🪙\n` +
        `• نرخ سود: **${CONFIG.LOAN_TYPES.HIGH.interestRate * 100}%**\n` +
        `• مدت بازپرداخت: **${CONFIG.LOAN_TYPES.HIGH.durationDays}** روز\n`,
        inline: false 
      },
      { name: '⚠️ هشدار', value: 
        `• جریمه تأخیر: **${CONFIG.LOAN_PENALTY_RATE * 100}%** از موجودی کیف پول\n` +
        `• حداکثر وام قابل درخواست برای شما: **${maxEligibleLoan}** 🪙\n` +
        `• شما می‌توانید همیشه زودتر از موعد وام خود را بازپرداخت کنید!`,
        inline: false
      }
    )
    .setFooter({ text: 'وام فقط به حساب کیف پول شما واریز می‌شود، نه حساب بانکی!' });
  
  // ایجاد گزینه‌های انتخاب نوع وام
  const loanTypeRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('request_loan_low')
        .setLabel('وام کم‌ریسک')
        .setStyle(ButtonStyle.Success)
        .setEmoji('🟢'),
      new ButtonBuilder()
        .setCustomId('request_loan_medium')
        .setLabel('وام متوسط')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🟡'),
      new ButtonBuilder()
        .setCustomId('request_loan_high')
        .setLabel('وام پرریسک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🔴')
    );
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  await interaction.update({ embeds: [loanEmbed], components: [loanTypeRow, backRow] });
}

// نمایش منوی وام فعال
async function showActiveLoanMenu(interaction, loan) {
  const userId = interaction.user.id;
  const now = Date.now();
  const dueDate = new Date(loan.dueDate);
  const daysLeft = Math.ceil((dueDate - now) / (1000 * 60 * 60 * 24));
  
  // محاسبه مبلغ بازپرداخت با احتساب سود
  const repaymentAmount = Math.floor(loan.amount * (1 + loan.interestRate));
  
  // وضعیت وام
  let statusText = '';
  let statusColor = '#1abc9c';
  
  if (daysLeft > 5) {
    statusText = `🟢 وضعیت وام: عادی - ${daysLeft} روز تا سررسید`;
  } else if (daysLeft > 0) {
    statusText = `🟡 وضعیت وام: نزدیک به سررسید - ${daysLeft} روز مانده`;
    statusColor = '#f39c12';
  } else {
    statusText = `🔴 وضعیت وام: گذشته از سررسید - ${Math.abs(daysLeft)} روز دیرکرد`;
    statusColor = '#e74c3c';
  }
  
  const loanEmbed = new EmbedBuilder()
    .setColor(statusColor)
    .setTitle('🏛️ مدیریت وام فعال')
    .setDescription(statusText)
    .addFields(
      { name: '💰 اطلاعات وام', value: 
        `نوع وام: **${getReadableLoanType(loan.type)}**\n` +
        `مبلغ اصلی: **${loan.amount}** 🪙\n` +
        `نرخ سود: **${(loan.interestRate * 100).toFixed(0)}%**\n` +
        `مبلغ بازپرداخت: **${repaymentAmount}** 🪙\n` +
        `تاریخ دریافت: ${new Date(loan.date).toLocaleDateString('fa-IR')}\n` +
        `تاریخ سررسید: ${dueDate.toLocaleDateString('fa-IR')}`,
        inline: false 
      },
      { name: '⚠️ هشدار', value: 
        `• در صورت عدم بازپرداخت تا تاریخ سررسید، **${CONFIG.LOAN_PENALTY_RATE * 100}%** از موجودی کیف پول شما به عنوان جریمه کسر خواهد شد.\n` +
        `• پس از اعمال جریمه، مهلت جدیدی برای بازپرداخت وام به شما داده می‌شود.`,
        inline: false
      }
    )
    .setFooter({ text: 'توصیه می‌شود وام خود را قبل از سررسید بازپرداخت کنید!' });
  
  // دکمه‌های بازپرداخت
  const repaymentButtons = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('repay_loan_full')
        .setLabel(`بازپرداخت کامل (${repaymentAmount} 🪙)`)
        .setStyle(ButtonStyle.Success)
        .setEmoji('💰'),
      new ButtonBuilder()
        .setCustomId('repay_loan_partial')
        .setLabel('بازپرداخت بخشی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('💲')
    );
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  await interaction.update({ embeds: [loanEmbed], components: [repaymentButtons, backRow] });
}

// پردازش درخواست وام
async function processLoanRequest(interaction, loanType) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const bank = await db.get(`bank_${userId}`) || 0;
  const totalAssets = wallet + bank;
  
  // دریافت اطلاعات نوع وام
  const loanConfig = CONFIG.LOAN_TYPES[loanType.toUpperCase()];
  if (!loanConfig) {
    return await interaction.reply({ content: '❌ نوع وام نامعتبر است!', ephemeral: true });
  }
  
  // محاسبه حداکثر وام قابل دریافت براساس دارایی‌های کاربر
  const maxEligibleByAssets = Math.floor(totalAssets * 2);
  const maxLoanAmount = Math.min(loanConfig.maxAmount, maxEligibleByAssets);
  
  // ایجاد مودال برای وارد کردن مقدار وام
  const modal = new ModalBuilder()
    .setCustomId(`loan_modal_${loanType}`)
    .setTitle(`درخواست وام ${getReadableLoanType(loanType)}`);
  
  const amountInput = new TextInputBuilder()
    .setCustomId('loan_amount')
    .setLabel(`مقدار وام (حداکثر ${maxLoanAmount} سکه)`)
    .setPlaceholder('مقدار را وارد کنید...')
    .setMinLength(1)
    .setMaxLength(10)
    .setRequired(true)
    .setStyle(TextInputStyle.Short);
  
  const actionRow = new ActionRowBuilder().addComponents(amountInput);
  modal.addComponents(actionRow);
  
  await interaction.showModal(modal);
}

// پردازش بازپرداخت وام
async function processLoanRepayment(interaction, fullRepayment = true) {
  const userId = interaction.user.id;
  const loan = await db.get(`loan_${userId}`);
  
  if (!loan) {
    return await interaction.reply({ content: '❌ شما وام فعالی ندارید!', ephemeral: true });
  }
  
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const repaymentAmount = Math.floor(loan.amount * (1 + loan.interestRate));
  
  if (fullRepayment) {
    // بازپرداخت کامل
    if (wallet < repaymentAmount) {
      return await interaction.reply({ 
        content: `❌ موجودی کیف پول شما ناکافی است! شما به ${repaymentAmount} سکه برای بازپرداخت کامل نیاز دارید، اما فقط ${wallet} سکه دارید.`, 
        ephemeral: true 
      });
    }
    
    // کسر مبلغ از کیف پول
    await db.sub(`wallet_${userId}`, repaymentAmount);
    // حذف وام
    await db.delete(`loan_${userId}`);
    
    const successEmbed = new EmbedBuilder()
      .setColor('#00ff00')
      .setTitle('✅ بازپرداخت موفق')
      .setDescription(`وام شما به مبلغ **${repaymentAmount}** 🪙 با موفقیت بازپرداخت شد!\nاعتبار شما نزد بانک افزایش یافت.`)
      .setFooter({ text: 'اکنون می‌توانید وام جدیدی درخواست کنید.' });
    
    await interaction.reply({ embeds: [successEmbed] });
    
    // افزایش اعتبار کاربر
    await db.add(`credit_score_${userId}`, 5);
    
  } else {
    // بازپرداخت بخشی - نمایش مودال
    const modal = new ModalBuilder()
      .setCustomId('partial_repayment_modal')
      .setTitle('بازپرداخت بخشی از وام');
    
    const amountInput = new TextInputBuilder()
      .setCustomId('repayment_amount')
      .setLabel(`مقدار بازپرداخت (حداکثر ${wallet} سکه)`)
      .setPlaceholder('مقدار را وارد کنید...')
      .setMinLength(1)
      .setMaxLength(10)
      .setRequired(true)
      .setStyle(TextInputStyle.Short);
    
    const actionRow = new ActionRowBuilder().addComponents(amountInput);
    modal.addComponents(actionRow);
    
    await interaction.showModal(modal);
  }
}

// پردازش پرداخت بخشی وام
async function processPartialRepayment(interaction, amount) {
  const userId = interaction.user.id;
  const loan = await db.get(`loan_${userId}`);
  
  if (!loan) {
    return await interaction.reply({ content: '❌ شما وام فعالی ندارید!', ephemeral: true });
  }
  
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const repaymentAmount = Math.floor(loan.amount * (1 + loan.interestRate));
  const remainingDebt = repaymentAmount;
  
  // بررسی مقدار وارد شده
  if (isNaN(amount) || amount <= 0) {
    return await interaction.reply({ content: '❌ لطفاً مقدار معتبری وارد کنید!', ephemeral: true });
  }
  
  if (amount > wallet) {
    return await interaction.reply({ 
      content: `❌ موجودی کیف پول شما ناکافی است! شما فقط ${wallet} سکه دارید.`, 
      ephemeral: true 
    });
  }
  

// منوی بازار سیاه
async function showBlackMarketMenu(interaction) {
  const userId = interaction.user.id;
  const userLevel = await db.get(`level_${userId}`) || 1;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  
  // بررسی سطح کاربر برای دسترسی به بازار سیاه
  if (userLevel < CONFIG.BLACK_MARKET_MIN_LEVEL) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('⛔ دسترسی محدود')
      .setDescription(`بازار سیاه فقط برای کاربران سطح ${CONFIG.BLACK_MARKET_MIN_LEVEL}+ در دسترس است.`)
      .setFooter({ text: `سطح فعلی شما: ${userLevel}` });
      
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('shop_menu')
          .setLabel('بازگشت به فروشگاه')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('⬅️')
      );
      
    return await interaction.update({ embeds: [errorEmbed], components: [backRow] });
  }
  
  // آیتم‌های بازار سیاه
  const blackMarketItems = [
    { 
      id: 501, 
      name: '🔫 اسلحه تقلبی', 
      price: 12000, 
      description: '+20% شانس موفقیت در جیب‌زنی، اما 30% احتمال دستگیری!',
      effects: 'با استفاده از این آیتم، شانس موفقیت شما در جیب‌زنی 20% افزایش می‌یابد، اما ریسک دستگیری نیز 30% بالاتر می‌رود.',
      durability: 5
    },
    { 
      id: 502, 
      name: '💼 کیف پول جعلی', 
      price: 8000, 
      description: 'مخفی‌سازی 50% از موجودی در برابر دزدها',
      effects: 'هنگام جیب‌زنی دیگران از شما، فقط نیمی از سکه‌های شما قابل سرقت خواهد بود.',
      durability: 3
    },
    { 
      id: 503, 
      name: '🥷 لباس نینجا', 
      price: 15000, 
      description: 'امکان دزدی از بانک افراد + کاهش 40% احتمال شناسایی',
      effects: 'با این لباس می‌توانید از حساب بانکی افراد هم دزدی کنید و احتمال شناسایی شما 40% کاهش می‌یابد.',
      durability: 2
    },
    { 
      id: 504, 
      name: '🔐 قفل شکن پیشرفته', 
      price: 20000, 
      description: 'امکان دزدی از صندوق امانات بانک با شانس کم',
      effects: 'می‌توانید با ریسک بالا از صندوق امانات بانک دزدی کنید و تا 50,000 سکه به دست آورید!',
      durability: 1
    },
    { 
      id: 505, 
      name: '📦 جعبه اسرارآمیز', 
      price: 25000, 
      description: 'حاوی جوایز با ارزش یا خطرناک!',
      effects: 'جعبه‌ای شگفت‌انگیز که می‌تواند حاوی سکه‌های فراوان یا جوایز ویژه باشد، اما ممکن است خطرناک باشد!',
      durability: 1
    }
  ];
  
  // فیلتر کردن آیتم‌ها بر اساس موجودی کاربر
  const affordableItems = blackMarketItems.filter(item => item.price <= wallet);
  
  // ساخت رنگ تصادفی برای امبد
  const randomHex = () => {
    const darkColors = ['#8e44ad', '#2c3e50', '#c0392b', '#d35400', '#7f8c8d'];
    return darkColors[Math.floor(Math.random() * darkColors.length)];
  };
  
  const blackMarketEmbed = new EmbedBuilder()
    .setColor(randomHex())
    .setTitle('🏴‍☠️ بازار سیاه')
    .setDescription('خوش آمدید... آیتم‌های خاص با قابلیت‌های غیرقانونی! مراقب باشید، هر خرید ممکن است توجه پلیس را جلب کند...')
    .addFields(
      { name: '⚠️ هشدار', value: `هر خرید **${CONFIG.BLACK_MARKET_BUST_CHANCE * 100}%** شانس دستگیری و زندانی شدن دارد!`, inline: false },
      { name: '💰 موجودی شما', value: `**${wallet}** 🪙`, inline: false }
    )
    .setFooter({ text: 'خرید از بازار سیاه به منزله قبول ریسک دستگیری است!' });
  
  // اضافه کردن آیتم‌ها به امبد
  blackMarketItems.forEach(item => {
    const affordableText = wallet >= item.price ? '✅' : '❌';
    blackMarketEmbed.addFields({ 
      name: `${item.name} (${item.price} 🪙) ${affordableText}`, 
      value: `${item.description}\n**دوام:** ${item.durability} بار استفاده`, 
      inline: false 
    });
  });
  
  // ایجاد منوی انتخاب آیتم
  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('black_market_select')
    .setPlaceholder('یک آیتم برای خرید انتخاب کنید...')
    .addOptions(
      blackMarketItems.map(item => ({
        label: `${item.name} (${item.price} 🪙)`,
        value: item.id.toString(),
        description: item.description.substring(0, 100),
        emoji: item.name.split(' ')[0],
        default: false
      }))
    );
  
  // غیرفعال کردن منو اگر همه آیتم‌ها غیرقابل خرید باشند
  if (affordableItems.length === 0) {
    selectMenu.setDisabled(true);
    selectMenu.setPlaceholder('موجودی کافی برای خرید هیچ آیتمی ندارید!');
  }
  
  const selectRow = new ActionRowBuilder().addComponents(selectMenu);
  
  // دکمه‌های دیگر
  const actionRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('view_black_market_inventory')
        .setLabel('آیتم‌های بازار سیاه من')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🔍'),
      new ButtonBuilder()
        .setCustomId('black_market_info')
        .setLabel('اطلاعات بیشتر')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('ℹ️')
    );
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('shop_menu')
        .setLabel('بازگشت به فروشگاه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  await interaction.update({ embeds: [blackMarketEmbed], components: [selectRow, actionRow, backRow] });
}

// پردازش خرید از بازار سیاه
async function processBlackMarketPurchase(interaction, itemId) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;
  
  // آیتم‌های بازار سیاه
  const blackMarketItems = [
    { 
      id: 501, 
      name: '🔫 اسلحه تقلبی', 
      price: 12000, 
      description: '+20% شانس موفقیت در جیب‌زنی، اما 30% احتمال دستگیری!',
      effects: 'با استفاده از این آیتم، شانس موفقیت شما در جیب‌زنی 20% افزایش می‌یابد، اما ریسک دستگیری نیز 30% بالاتر می‌رود.',
      durability: 5
    },
    { 
      id: 502, 
      name: '💼 کیف پول جعلی', 
      price: 8000, 
      description: 'مخفی‌سازی 50% از موجودی در برابر دزدها',
      effects: 'هنگام جیب‌زنی دیگران از شما، فقط نیمی از سکه‌های شما قابل سرقت خواهد بود.',
      durability: 3
    },
    { 
      id: 503, 
      name: '🥷 لباس نینجا', 
      price: 15000, 
      description: 'امکان دزدی از بانک افراد + کاهش 40% احتمال شناسایی',
      effects: 'با این لباس می‌توانید از حساب بانکی افراد هم دزدی کنید و احتمال شناسایی شما 40% کاهش می‌یابد.',
      durability: 2
    },
    { 
      id: 504, 
      name: '🔐 قفل شکن پیشرفته', 
      price: 20000, 
      description: 'امکان دزدی از صندوق امانات بانک با شانس کم',
      effects: 'می‌توانید با ریسک بالا از صندوق امانات بانک دزدی کنید و تا 50,000 سکه به دست آورید!',
      durability: 1
    },
    { 
      id: 505, 
      name: '📦 جعبه اسرارآمیز', 
      price: 25000, 
      description: 'حاوی جوایز با ارزش یا خطرناک!',
      effects: 'جعبه‌ای شگفت‌انگیز که می‌تواند حاوی سکه‌های فراوان یا جوایز ویژه باشد، اما ممکن است خطرناک باشد!',
      durability: 1
    }
  ];
  
  // پیدا کردن آیتم مورد نظر
  const item = blackMarketItems.find(item => item.id === parseInt(itemId));
  
  if (!item) {
    return await interaction.reply({ content: '❌ آیتم مورد نظر یافت نشد!', ephemeral: true });
  }
  
  if (wallet < item.price) {
    return await interaction.reply({ content: '❌ موجودی کافی برای خرید این آیتم ندارید!', ephemeral: true });
  }
  
  // بررسی احتمال دستگیری
  const isBusted = Math.random() < CONFIG.BLACK_MARKET_BUST_CHANCE;
  
  if (isBusted) {
    // دستگیری کاربر
    const jailDuration = 2 * 60 * 60 * 1000; // 2 ساعت
    const fine = Math.floor(item.price * 0.5); // 50% جریمه
    
    // کسر جریمه از کیف پول
    await db.sub(`wallet_${userId}`, fine);
    
    // اعمال زندان
    await db.set(`jailed_${userId}`, true);
    await db.set(`jail_release_${userId}`, Date.now() + jailDuration);
    await db.set(`jail_reason_${userId}`, 'خرید از بازار سیاه');
    
    const bustEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('🚨 دستگیر شدید!')
      .setDescription('پلیس ربات شما را حین خرید از بازار سیاه دستگیر کرد!')
      .addFields(
        { name: '💰 جریمه', value: `**${fine}** 🪙`, inline: true },
        { name: '⏱️ مدت زندان', value: '2 ساعت', inline: true },
        { name: '⚠️ هشدار', value: 'در زمان زندان امکان استفاده از ویژگی‌های اقتصادی وجود ندارد!', inline: false }
      )
      .setFooter({ text: 'بار دیگر در خرید خود دقت کنید!' });
    
    return await interaction.reply({ embeds: [bustEmbed] });
  }
  
  // خرید موفق
  // کسر هزینه از کیف پول
  await db.sub(`wallet_${userId}`, item.price);
  
  // اضافه کردن آیتم به انبار بازار سیاه
  const blackMarketInventory = await db.get(`black_market_inventory_${userId}`) || [];
  blackMarketInventory.push({
    id: item.id,
    name: item.name,
    description: item.description,
    effects: item.effects,
    durability: item.durability,
    purchaseDate: Date.now()
  });
  
  await db.set(`black_market_inventory_${userId}`, blackMarketInventory);
  
  // اعمال ویژگی‌های آیتم
  switch (item.id) {
    case 501: // اسلحه تقلبی
      await db.set(`fake_gun_${userId}`, true);
      break;
    case 502: // کیف پول جعلی
      await db.set(`fake_wallet_${userId}`, true);
      break;
    case 503: // لباس نینجا
      await db.set(`ninja_suit_${userId}`, true);
      break;
    case 504: // قفل شکن پیشرفته
      await db.set(`advanced_lockpick_${userId}`, true);
      break;
    case 505: // جعبه اسرارآمیز
      // پردازش جعبه در تابع جداگانه
      return await processBlackMarketMysteryBox(interaction, userId);
  }
  
  const successEmbed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('✅ خرید موفق')
    .setDescription(`شما با موفقیت **${item.name}** را خریداری کردید!`)
    .addFields(
      { name: '💰 هزینه', value: `**${item.price}** 🪙`, inline: true },
      { name: '🔄 دوام', value: `${item.durability} بار استفاده`, inline: true },
      { name: '📝 توضیحات', value: item.effects, inline: false }
    )
    .setFooter({ text: 'آیتم به انبار بازار سیاه شما اضافه شد. از منوی انبار بازار سیاه می‌توانید آن را مشاهده کنید.' });
  
  await interaction.reply({ embeds: [successEmbed] });
}

// پردازش جعبه اسرارآمیز بازار سیاه
async function processBlackMarketMysteryBox(interaction, userId) {
  // آیتم‌های داخل جعبه اسرارآمیز
  const mysteryBoxItems = [
    { type: 'coin', min: 10000, max: 50000, chance: 0.30, description: 'سکه' },
    { type: 'item', item: { id: 506, name: '🔮 توپ پیشگویی', effects: 'می‌توانید موجودی کیف پول و بانک کاربران را ببینید!' }, chance: 0.15, description: 'توپ پیشگویی' },
    { type: 'item', item: { id: 507, name: '🧪 اکسیر دزدی', effects: '3 بار جیب‌زنی بدون محدودیت روزانه!' }, chance: 0.15, description: 'اکسیر دزدی' },
    { type: 'item', item: { id: 508, name: '🪄 عصای فرمانروایی', effects: 'سرقت 25% از درآمد روزانه همه کاربران یک سرور!' }, chance: 0.05, description: 'عصای فرمانروایی' },
    { type: 'danger', effect: 'jail', duration: 12 * 60 * 60 * 1000, chance: 0.15, description: 'زندان 12 ساعته' },
    { type: 'danger', effect: 'robbery', lossPercentage: 0.3, chance: 0.10, description: 'سرقت 30% موجودی' },
    { type: 'danger', effect: 'virus', chance: 0.10, description: 'ویروس دیجیتالی' }
  ];
  
  // انتخاب تصادفی آیتم
  const result = getRandomItem(mysteryBoxItems);
  
  // ایجاد انیمیشن انتظار
  const waitingEmbed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle('🎁 در حال باز کردن جعبه اسرارآمیز...')
    .setDescription('منتظر باشید...')
    .setFooter({ text: 'هر چیزی ممکن است داخل این جعبه باشد!' });
  
  await interaction.reply({ embeds: [waitingEmbed] });
  
  // تأخیر برای ایجاد هیجان
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  let resultEmbed;
  
  // پردازش نتیجه
  switch (result.type) {
    case 'coin':
      // دریافت سکه
      const amount = Math.floor(Math.random() * (result.max - result.min + 1) + result.min);
      await db.add(`wallet_${userId}`, amount);
      
      resultEmbed = new EmbedBuilder()
        .setColor('#00ff00')
        .setTitle('💰 گنج یافت شد!')
        .setDescription(`جعبه حاوی **${amount}** سکه بود! این سکه‌ها به کیف پول شما اضافه شد.`)
        .setFooter({ text: 'خوش شانسی بزرگی نصیب شما شد!' });
      break;
      
    case 'item':
      // دریافت آیتم ویژه
      const blackMarketInventory = await db.get(`black_market_inventory_${userId}`) || [];
      blackMarketInventory.push({
        id: result.item.id,
        name: result.item.name,
        effects: result.item.effects,
        durability: 1,
        purchaseDate: Date.now()
      });
      
      await db.set(`black_market_inventory_${userId}`, blackMarketInventory);
      
      // اعمال ویژگی‌های آیتم
      switch (result.item.id) {
        case 506: // توپ پیشگویی
          await db.set(`fortune_ball_${userId}`, true);
          break;
        case 507: // اکسیر دزدی
          await db.set(`theft_elixir_${userId}`, 3); // 3 بار استفاده
          break;
        case 508: // عصای فرمانروایی
          await db.set(`ruler_wand_${userId}`, true);
          break;
      }
      
      resultEmbed = new EmbedBuilder()
        .setColor('#9b59b6')
        .setTitle('✨ آیتم کمیاب!')
        .setDescription(`شما ${result.item.name} را پیدا کردید!`)
        .addFields({ name: '📝 قابلیت', value: result.item.effects })
        .setFooter({ text: 'این آیتم بسیار نادر و قدرتمند است!' });
      break;
      
    case 'danger':
      // نتیجه خطرناک
      switch (result.effect) {
        case 'jail':
          // زندانی شدن
          await db.set(`jailed_${userId}`, true);
          await db.set(`jail_release_${userId}`, Date.now() + result.duration);
          await db.set(`jail_reason_${userId}`, 'جعبه اسرارآمیز خطرناک');
          
          resultEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('⚠️ دام خطرناک!')
            .setDescription('جعبه حاوی یک تله بود! شما دستگیر و زندانی شدید!')
            .addFields({ name: '⏱️ مدت زندان', value: '12 ساعت', inline: true })
            .setFooter({ text: 'در زمان زندان نمی‌توانید از ویژگی‌های اقتصادی استفاده کنید!' });
          break;
          
        case 'robbery':
          // سرقت موجودی
          const wallet = await db.get(`wallet_${userId}`) || 0;
          const robbedAmount = Math.floor(wallet * result.lossPercentage);
          
          if (robbedAmount > 0) {
            await db.sub(`wallet_${userId}`, robbedAmount);
          }
          
          resultEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('💥 سرقت!')
            .setDescription(`جعبه حاوی یک سارق بود! **${robbedAmount}** سکه از کیف پول شما دزدیده شد!`)
            .setFooter({ text: 'مراقب جعبه‌های مشکوک باشید!' });
          break;
          
        case 'virus':
          // ویروس دیجیتالی
          // اثرات تصادفی مختلف
          const virusEffects = [
            { effect: 'lockInventory', duration: 24 * 60 * 60 * 1000, description: 'انبار شما قفل شد! به مدت 24 ساعت نمی‌توانید از آیتم‌های خود استفاده کنید.' },
            { effect: 'doubleRobChance', duration: 48 * 60 * 60 * 1000, description: 'احتمال دزدیده شدن از شما 2 برابر شده است! این اثر 48 ساعت طول می‌کشد.' },
            { effect: 'dailyReward', lossPercentage: 0.5, duration: 72 * 60 * 60 * 1000, description: 'جایزه روزانه شما 50% کاهش یافته است! این اثر 3 روز طول می‌کشد.' }
          ];
          
          const virusEffect = virusEffects[Math.floor(Math.random() * virusEffects.length)];
          
          // اعمال اثر ویروس
          await db.set(`virus_${userId}`, {
            type: virusEffect.effect,
            startTime: Date.now(),
            duration: virusEffect.duration,
            params: virusEffect.effect === 'dailyReward' ? { lossPercentage: virusEffect.lossPercentage } : {}
          });
          
          resultEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('🦠 ویروس دیجیتالی!')
            .setDescription(`جعبه آلوده به ویروس بود! ${virusEffect.description}`)
            .setFooter({ text: 'این ویروس توسط متخصصان بازار سیاه ساخته شده است!' });
          break;
      }
      break;
  }
  
  await interaction.editReply({ embeds: [resultEmbed] });
}

// Helper function to get random item
function getRandomItem(items) {
  let randomValue = Math.random();
  let cumulativeProbability = 0;
  
  for (const item of items) {
    cumulativeProbability += item.chance;
    
    if (randomValue <= cumulativeProbability) {
      return item;
    }
  }
  
  // اگر به هر دلیلی هیچ آیتمی انتخاب نشد، آیتم اول را برگردان
  return items[0];
}

// نمایش انبار بازار سیاه
async function showBlackMarketInventory(interaction) {
  const userId = interaction.user.id;
  const blackMarketInventory = await db.get(`black_market_inventory_${userId}`) || [];
  
  if (blackMarketInventory.length === 0) {
    const emptyEmbed = new EmbedBuilder()
      .setColor('#808080')
      .setTitle('🏴‍☠️ انبار بازار سیاه')
      .setDescription('شما هیچ آیتمی از بازار سیاه ندارید.')
      .setFooter({ text: 'می‌توانید از بازار سیاه آیتم‌های ویژه خریداری کنید.' });
      
    const backRow = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('blackmarket')
          .setLabel('بازگشت به بازار سیاه')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('⬅️')
      );
      
    return await interaction.update({ embeds: [emptyEmbed], components: [backRow] });
  }
  
  const inventoryEmbed = new EmbedBuilder()
    .setColor('#8e44ad')
    .setTitle('🏴‍☠️ انبار بازار سیاه')
    .setDescription('آیتم‌های خریداری شده از بازار سیاه:')
    .setFooter({ text: 'این آیتم‌ها صرفاً برای استفاده شخصی است و معامله مجدد آنها ممنوع است!' });
  
  // گروه‌بندی آیتم‌ها بر اساس نوع
  const groupedItems = {};
  
  blackMarketInventory.forEach(item => {
    if (!groupedItems[item.id]) {
      groupedItems[item.id] = { 
        name: item.name, 
        effects: item.effects, 
        count: 1, 
        durabilities: [item.durability]
      };
    } else {
      groupedItems[item.id].count++;
      groupedItems[item.id].durabilities.push(item.durability);
    }
  });
  
  // اضافه کردن آیتم‌ها به embed
  Object.values(groupedItems).forEach(itemGroup => {
    const totalDurability = itemGroup.durabilities.reduce((sum, cur) => sum + cur, 0);
    inventoryEmbed.addFields({ 
      name: `${itemGroup.name} (${itemGroup.count}×)`, 
      value: `${itemGroup.effects}\n**دوام کل:** ${totalDurability} بار استفاده`, 
      inline: false 
    });
  });
  
  // ایجاد منوی انتخاب آیتم برای استفاده
  const selectMenu = new StringSelectMenuBuilder()
    .setCustomId('use_black_market_item')
    .setPlaceholder('یک آیتم برای استفاده انتخاب کنید...')
    .addOptions(
      Object.entries(groupedItems).map(([id, itemGroup]) => ({
        label: itemGroup.name,
        value: id,
        description: `دوام کل: ${itemGroup.durabilities.reduce((sum, cur) => sum + cur, 0)} بار استفاده`,
        emoji: itemGroup.name.split(' ')[0],
        default: false
      }))
    );
  
  const selectRow = new ActionRowBuilder().addComponents(selectMenu);
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('blackmarket')
        .setLabel('بازگشت به بازار سیاه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  await interaction.update({ embeds: [inventoryEmbed], components: [selectRow, backRow] });
}

  if (amount >= remainingDebt) {
    // اگر مقدار بیشتر یا برابر کل بدهی است، بازپرداخت کامل
    return await processLoanRepayment(interaction, true);
  }
  
  // کسر مبلغ از کیف پول
  await db.sub(`wallet_${userId}`, amount);
  
  // محاسبه بدهی باقی‌مانده و ایجاد وام جدید
  const remainingRatio = (remainingDebt - amount) / remainingDebt;
  const newLoanAmount = Math.floor(loan.amount * remainingRatio);
  
  // آپدیت وام
  await db.set(`loan_${userId}`, {
    ...loan,
    amount: newLoanAmount,
    partialPayments: [...(loan.partialPayments || []), {
      amount: amount,
      date: Date.now()
    }]
  });
  
  const successEmbed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('✅ بازپرداخت بخشی موفق')
    .setDescription(`شما **${amount}** 🪙 از وام خود را بازپرداخت کردید!`)
    .addFields(
      { name: '💰 بدهی باقی‌مانده', value: `**${remainingDebt - amount}** 🪙`, inline: true },
      { name: '📅 سررسید', value: `${new Date(loan.dueDate).toLocaleDateString('fa-IR')}`, inline: true }
    )
    .setFooter({ text: 'با بازپرداخت به موقع، اعتبار خود را بهبود ببخشید!' });
  
  await interaction.reply({ embeds: [successEmbed] });
  
  // افزایش کمی اعتبار کاربر
  await db.add(`credit_score_${userId}`, 1);
}

// بررسی وام‌های سررسید شده و اعمال جریمه
async function checkOverdueLoanPayments() {
  const loanKeys = await db.all(`loan_*`);
  const now = Date.now();
  
  for (const key of loanKeys) {
    const userId = key.id.replace('loan_', '');
    const loan = key.value;
    
    // اگر تاریخ سررسید گذشته و وام جریمه نشده
    if (loan.dueDate < now && !loan.penaltyApplied) {
      // محاسبه جریمه
      const wallet = await db.get(`wallet_${userId}`) || 0;
      const penalty = Math.floor(wallet * CONFIG.LOAN_PENALTY_RATE);
      
      if (wallet > 0) {
        // کسر جریمه از کیف پول
        await db.sub(`wallet_${userId}`, penalty);
        
        // ثبت اطلاعات جریمه
        await db.set(`loan_${userId}`, {
          ...loan,
          penaltyApplied: true,
          penaltyAmount: penalty,
          penaltyDate: now,
          // تمدید مهلت پرداخت برای 7 روز دیگر
          dueDate: now + (7 * 24 * 60 * 60 * 1000)
        });
        
        // کاهش اعتبار کاربر
        await db.sub(`credit_score_${userId}`, 10);
        
        // ارسال پیام به کاربر در صورت امکان
        try {
          const user = await client.users.fetch(userId);
          const penaltyEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('⚠️ جریمه دیرکرد وام')
            .setDescription(`به دلیل عدم بازپرداخت به موقع وام، **${penalty}** 🪙 از کیف پول شما به عنوان جریمه کسر شد.`)
            .addFields(
              { name: '💰 بدهی باقی‌مانده', value: `**${Math.floor(loan.amount * (1 + loan.interestRate))}** 🪙`, inline: true },
              { name: '📅 مهلت جدید', value: `${new Date(now + (7 * 24 * 60 * 60 * 1000)).toLocaleDateString('fa-IR')}`, inline: true }
            )
            .setFooter({ text: 'لطفاً در اسرع وقت نسبت به بازپرداخت وام خود اقدام کنید!' });
          
          await user.send({ embeds: [penaltyEmbed] });
        } catch (error) {
          console.error(`Could not send penalty message to user ${userId}:`, error);
        }
      }
    }
  }
}

        .setEmoji('📊')
    );

  const adminRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_settings')
        .setLabel('تنظیم اقتصاد')
        .setStyle(ButtonStyle.Success)
        .setEmoji('💰'),
      new ButtonBuilder()
        .setCustomId('reset_data')
        .setLabel('ریست اطلاعات')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🔄')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('main_menu')
        .setLabel('بازگشت به منوی اصلی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [adminEmbed], components: [adminRow, adminRow2, backRow] });
}

// Admin Panel
async function showAdminPanel(interaction) {
  const adminPanelEmbed = new EmbedBuilder()
    .setColor('#34495e')
    .setTitle('🔑 پنل مدیریت')
    .setDescription('تنظیمات اصلی ربات را از این بخش مدیریت کنید.')
    .addFields(
      { name: '🤖 وضعیت ربات', value: 'آنلاین | زمان کارکرد: 12:34:56', inline: true },
      { name: '👥 تعداد کاربران', value: '152 کاربر', inline: true },
      { name: '💰 کل سکه‌های در گردش', value: '1,234,567 سکه', inline: true },
      { name: '⚙️ تنظیمات عمومی', value: 'تنظیمات کلی ربات', inline: true },
      { name: '📊 آمار ربات', value: 'مشاهده آمار و اطلاعات ربات', inline: true },
      { name: '🔔 اعلانات', value: 'ارسال اعلان به کاربران', inline: true }
    )
    .setFooter({ text: 'از دستورهای اسلش مخصوص ادمین برای تغییر تنظیمات استفاده کنید.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_menu')
        .setLabel('بازگشت به منوی مدیریت')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [adminPanelEmbed], components: [backRow] });
}

// Manage Users
async function showManageUsers(interaction) {
  const manageUsersEmbed = new EmbedBuilder()
    .setColor('#34495e')
    .setTitle('📊 مدیریت کاربران')
    .setDescription('کاربران را مدیریت کنید و تغییرات لازم را اعمال کنید.')
    .addFields(
      { name: '/give [user] [amount]', value: 'افزودن سکه به کاربر', inline: true },
      { name: '/take [user] [amount]', value: 'کم کردن سکه از کاربر', inline: true },
      { name: '/ban-economy [user]', value: 'محرومیت کاربر از سیستم اقتصادی', inline: true },
      { name: '/reset-user [user]', value: 'ریست کردن اطلاعات اقتصادی یک کاربر', inline: true },
      { name: '/set-multiplier [user] [value]', value: 'تنظیم ضریب درآمد کاربر', inline: true },
      { name: '/view-user [user]', value: 'مشاهده اطلاعات کامل کاربر', inline: true }
    )
    .setFooter({ text: 'از این دستورات با احتیاط استفاده کنید!' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_menu')
        .setLabel('بازگشت به منوی مدیریت')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [manageUsersEmbed], components: [backRow] });
}

// Economy Settings
async function showEconomySettings(interaction) {
  const economySettingsEmbed = new EmbedBuilder()
    .setColor('#34495e')
    .setTitle('💰 تنظیم اقتصاد')
    .setDescription('تنظیمات مربوط به سیستم اقتصادی را مدیریت کنید.')
    .addFields(
      { name: '/set-daily [amount]', value: 'تنظیم مقدار جایزه روزانه', inline: true },
      { name: '/set-interest-rate [percentage]', value: 'تنظیم نرخ سود بانکی', inline: true },
      { name: '/set-jackpot [amount]', value: 'تنظیم مقدار پایه جکپات', inline: true },
      { name: '/set-tax-rate [percentage]', value: 'تنظیم نرخ مالیات', inline: true },
      { name: '/set-cooldowns', value: 'تنظیم زمان انتظار کامندها', inline: true },
      { name: '/reset-economy', value: 'ریست کامل سیستم اقتصادی', inline: true }
    )
    .setFooter({ text: 'تنظیمات باید با توجه به تعداد کاربران و سرعت گردش اقتصاد تنظیم شوند.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_menu')
        .setLabel('بازگشت به منوی مدیریت')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [economySettingsEmbed], components: [backRow] });
}

// Reset Data
async function showResetData(interaction) {
  const resetDataEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('⚠️ ریست اطلاعات')
    .setDescription('**هشدار: این عملیات غیرقابل بازگشت است!**')
    .addFields(
      { name: '🔄 گزینه‌های ریست', value: 
        '• ریست کامل سیستم اقتصادی\n' +
        '• ریست اطلاعات یک کاربر\n' +
        '• ریست جکپات و قرعه‌کشی‌ها\n' +
        '• ریست آمار دوئل‌ها\n' +
        '• ریست فروشگاه\n' +
        '• ریست مأموریت‌ها', 
        inline: false 
      },
      { name: '⚠️ تذکر مهم', value: 'پیش از انجام هرگونه ریست، حتماً از داده‌ها نسخه پشتیبان تهیه کنید!', inline: false }
    )
    .setFooter({ text: 'برای انجام ریست از دستورات اسلش مدیریتی استفاده کنید.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('admin_menu')
        .setLabel('بازگشت به منوی مدیریت')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );

  await interaction.update({ embeds: [resetDataEmbed], components: [backRow] });
}

// زیرمنوها و عملیات مختلف برای هر بخش
// سیستم شغل‌ها (Job System)
async function showJobsMenu(interaction) {
  const userId = interaction.user.id;
  const currentJob = await db.get(`job_${userId}`) || 'none';
  const lastJobChange = await db.get(`lastJobChange_${userId}`) || 0;
  const now = Date.now();
  
  // بررسی آیا امکان تغییر شغل وجود دارد
  const canChangeJob = (now - lastJobChange >= 7 * 24 * 60 * 60 * 1000) || (lastJobChange === 0);
  const nextChangeDate = new Date(lastJobChange + 7 * 24 * 60 * 60 * 1000);
  
  let jobChangeText = '';
  if (!canChangeJob) {
    const daysLeft = Math.ceil((nextChangeDate - now) / (1000 * 60 * 60 * 24));
    jobChangeText = `⏱️ شما باید **${daysLeft}** روز دیگر صبر کنید تا بتوانید شغل خود را تغییر دهید.`;
  }
  
  // لیست شغل‌ها و توضیحات
  const jobs = [
    { 
      id: 'thief', 
      name: '🦹‍♂️ دزد حرفه‌ای', 
      description: '• افزایش 15% شانس موفقیت در جیب‌زنی\n• کاهش 20% جریمه‌های دستگیری\n• امکان دزدی از بانک',
      minLevel: 10
    },
    { 
      id: 'trader', 
      name: '🧙‍♂️ تاجر', 
      description: '• 10% تخفیف در خرید آیتم‌ها\n• 10% سود بیشتر در فروش آیتم‌ها\n• دسترسی به بازار سیاه',
      minLevel: 5
    },
    { 
      id: 'investor', 
      name: '💼 سرمایه‌گذار', 
      description: '• 20% سود بیشتر از بانک\n• 10% سود بیشتر در سرمایه‌گذاری‌ها\n• کاهش ریسک سرمایه‌گذاری‌های پرخطر',
      minLevel: 8
    },
    { 
      id: 'warrior', 
      name: '⚔️ جنگجو', 
      description: '• 25% پاداش بیشتر از دوئل‌ها\n• 15% شانس بیشتر برای برد در دوئل‌ها\n• توانایی چالش کشیدن کاربران سطح بالاتر',
      minLevel: 7
    },
    { 
      id: 'mastermind', 
      name: '🧠 ذهن مدبر', 
      description: '• افزایش 20% شانس موفقیت در عملیات پیچیده\n• 15% کاهش کولداون تمام فعالیت‌ها\n• توانایی برنامه‌ریزی دزدی از بانک',
      minLevel: 15
    },
    { 
      id: 'gambler', 
      name: '🎲 قمارباز', 
      description: '• 25% افزایش جایزه در بازی‌های شانس\n• 10% شانس جبران باخت‌ها\n• دسترسی به بازی‌های اختصاصی',
      minLevel: 3
    }
  ];
  
  // فیلتر کردن شغل‌های قابل دسترسی بر اساس سطح کاربر
  const userLevel = await db.get(`level_${userId}`) || 1;
  const availableJobs = jobs.filter(job => userLevel >= job.minLevel);
  
  // ساخت embed
  const jobsEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('🧰 سیستم شغل‌ها')
    .setDescription('با انتخاب شغل مناسب، قابلیت‌های ویژه و بونوس‌های مختلف دریافت کنید!')
    .addFields(
      { name: '📝 شغل فعلی', value: currentJob === 'none' ? '**بدون شغل**' : `**${jobs.find(j => j.id === currentJob)?.name || 'نامشخص'}**`, inline: false }
    );
  
  if (jobChangeText) {
    jobsEmbed.addFields({ name: '⏳ زمان تغییر شغل', value: jobChangeText, inline: false });
  }
  
  if (availableJobs.length === 0) {
    jobsEmbed.addFields({ name: '⚠️ شغل قابل دسترسی', value: `شما هنوز به سطح کافی برای هیچ شغلی نرسیده‌اید. به سطح 3 برسید تا اولین شغل را آزاد کنید.`, inline: false });
  } else {
    jobsEmbed.addFields({ name: '👔 شغل‌های قابل دسترسی', value: `شما به سطح کافی برای ${availableJobs.length} شغل رسیده‌اید:`, inline: false });
    
    // اضافه کردن هر شغل به عنوان یک فیلد جداگانه
    availableJobs.forEach(job => {
      jobsEmbed.addFields({ 
        name: `${job.name} ${currentJob === job.id ? '(فعال)' : ''}`, 
        value: job.description + `\n**سطح مورد نیاز:** ${job.minLevel}`, 
        inline: true 
      });
    });
  }
  
  jobsEmbed.setFooter({ text: 'هر کاربر می‌تواند هر 7 روز یکبار شغل خود را تغییر دهد. شغل‌های سطح بالاتر با افزایش سطح شما آزاد می‌شوند.' });
  
  // ساخت دکمه‌ها
  let jobButtons = [];
  
  // فقط شغل‌های قابل دسترسی را به دکمه‌ها اضافه کن
  if (canChangeJob) {
    const jobRows = [];
    let currentRow = new ActionRowBuilder();
    let buttonCount = 0;
    
    availableJobs.forEach((job, index) => {
      // حداکثر 3 دکمه در هر ردیف
      if (buttonCount % 3 === 0 && buttonCount > 0) {
        jobRows.push(currentRow);
        currentRow = new ActionRowBuilder();
      }
      
      currentRow.addComponents(
        new ButtonBuilder()
          .setCustomId(`select_job_${job.id}`)
          .setLabel(job.name.split(' ')[1]) // فقط نام بدون ایموجی
          .setStyle(currentJob === job.id ? ButtonStyle.Success : ButtonStyle.Primary)
          .setEmoji(job.name.split(' ')[0]) // ایموجی از نام
          .setDisabled(currentJob === job.id) // اگر شغل فعلی است، غیرفعال کن
      );
      
      buttonCount++;
    });
    
    // اضافه کردن آخرین ردیف
    if (currentRow.components.length > 0) {
      jobRows.push(currentRow);
    }
    
    // اضافه کردن ردیف‌های دکمه به لیست نهایی
    jobButtons = jobRows;
  }
  
  // دکمه بازگشت همیشه نمایش داده می‌شود
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('profile_menu')
        .setLabel('بازگشت به منوی پروفایل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  // اضافه کردن دکمه بازگشت به آرایه دکمه‌ها
  jobButtons.push(backRow);
  
  await interaction.update({ embeds: [jobsEmbed], components: jobButtons });
}

// منوی واریز
async function showDepositMenu(interaction) {
  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;

  const depositEmbed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('💱 واریز به بانک')
    .setDescription(`شما در حال حاضر **${wallet}** 🪙 در کیف پول خود دارید.\nبرای واریز به بانک، از دستور زیر استفاده کنید:`)
    .addFields(
      { name: 'دستور واریز', value: '`/deposit [مقدار]`', inline: false },
      { name: 'مثال‌ها', value: '`/deposit 100` - واریز 100 سکه\n`/deposit all` - واریز تمام موجودی', inline: false }
    )
    .setFooter({ text: 'سکه‌های شما در بانک از سود ماهانه بهره‌مند می‌شوند!' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [depositEmbed], components: [backRow] });
}

// منوی برداشت
async function showWithdrawMenu(interaction) {
  const userId = interaction.user.id;
  const bank = await db.get(`bank_${userId}`) || 0;

  const withdrawEmbed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🏧 برداشت از بانک')
    .setDescription(`شما در حال حاضر **${bank}** 🪙 در حساب بانکی خود دارید.\nبرای برداشت از بانک، از دستور زیر استفاده کنید:`)
    .addFields(
      { name: 'دستور برداشت', value: '`/withdraw [مقدار]`', inline: false },
      { name: 'مثال‌ها', value: '`/withdraw 100` - برداشت 100 سکه\n`/withdraw all` - برداشت تمام موجودی', inline: false }
    )
    .setFooter({ text: 'توجه: برداشت از بانک باعث از دست دادن سود ماهانه آن مبلغ می‌شود.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [withdrawEmbed], components: [backRow] });
}

// منوی انتقال سکه
async function showTransferMenu(interaction) {
  const transferEmbed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🔄 انتقال سکه')
    .setDescription('برای انتقال سکه به کاربر دیگر، از دستور زیر استفاده کنید:')
    .addFields(
      { name: 'دستور انتقال', value: '`/transfer @user [مقدار]`', inline: false },
      { name: 'مثال‌ها', value: '`/transfer @user 100` - انتقال 100 سکه\n`/transfer @user all` - انتقال تمام موجودی', inline: false }
    )
    .setFooter({ text: 'توجه: انتقال سکه غیرقابل بازگشت است!' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت به منوی اقتصاد')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [transferEmbed], components: [backRow] });
}

// منوی شیر یا خط
async function showCoinFlipMenu(interaction) {
  const coinflipEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('🪙 بازی شیر یا خط')
    .setDescription('شانس خود را امتحان کنید! اگر درست حدس بزنید، مبلغ شرط شما دو برابر می‌شود.')
    .addFields(
      { name: 'روش بازی', value: 'مبلغ شرط و انتخاب خود (شیر یا خط) را وارد کنید:', inline: false },
      { name: 'دستور بازی', value: '`/coinflip [مبلغ] [انتخاب]`', inline: false },
      { name: 'مثال', value: '`/coinflip 100 شیر`', inline: false }
    )
    .setFooter({ text: 'شانس برد: 50%' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [coinflipEmbed], components: [backRow] });
}

// منوی تاس
async function showDiceMenu(interaction) {
  const diceEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('🎲 بازی تاس')
    .setDescription('یک عدد بین 1 تا 6 انتخاب کنید. اگر تاس همان عدد را نشان دهد، 6 برابر مبلغ شرط خود را دریافت می‌کنید!')
    .addFields(
      { name: 'روش بازی', value: 'مبلغ شرط و عدد مورد نظر خود (1-6) را وارد کنید:', inline: false },
      { name: 'دستور بازی', value: '`/dice [مبلغ] [عدد]`', inline: false },
      { name: 'مثال', value: '`/dice 50 3`', inline: false }
    )
    .setFooter({ text: 'شانس برد: 16.6%' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [diceEmbed], components: [backRow] });
}

// منوی سنگ کاغذ قیچی
async function showRPSMenu(interaction) {
  // این منو باید به دستور اسلش مناسب اضافه شود
  const rpsEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('✂️ بازی سنگ کاغذ قیچی')
    .setDescription('با ربات یا دوستان خود سنگ کاغذ قیچی بازی کنید و سکه به دست آورید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [rpsEmbed], components: [backRow] });
}

// منوی حدس عدد
async function showGuessNumberMenu(interaction) {
  // این منو باید به دستور اسلش مناسب اضافه شود
  const guessEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('🔢 بازی حدس عدد')
    .setDescription('یک عدد بین 1 تا 10 حدس بزنید. اگر درست باشد، 10 برابر مبلغ شرط خود را دریافت می‌کنید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [guessEmbed], components: [backRow] });
}

// منوی دزدی
async function showRobMenu(interaction) {
  const userId = interaction.user.id;
  const userLevel = await db.get(`level_${userId}`) || 1;
  const dailyPickpocketCount = await db.get(`dailyPickpocket_${userId}`) || 0;
  const remainingAttempts = 3 - dailyPickpocketCount;
  const userJob = await db.get(`job_${userId}`) || 'none';
  const userReputation = await db.get(`reputation_${userId}`) || 0;
  
  // بررسی مهارت‌های ویژه
  const isThief = (userJob === 'thief');
  const isMastermind = (userJob === 'mastermind');
  const hasLockpickingSkill = await db.get(`skill_lockpicking_${userId}`) || false;
  
  // بررسی محرومیت از جیب‌زنی
  const pickpocketBanned = await db.get(`pickpocketBanned_${userId}`) || false;
  const pickpocketBanExpiry = await db.get(`pickpocketBanExpiry_${userId}`) || 0;
  
  let banStatus = '';
  if (pickpocketBanned && pickpocketBanExpiry > Date.now()) {
    const timeLeft = Math.floor((pickpocketBanExpiry - Date.now()) / (1000 * 60 * 60));
    banStatus = `⚠️ **شما محروم شده‌اید!**\nشما به مدت ${timeLeft} ساعت دیگر از جیب‌زنی محروم هستید.`;
  }
  
  // محاسبه شانس موفقیت بر اساس شغل و مهارت‌ها
  let quickSuccess = 70, professionalSuccess = 50, grandSuccess = 30;
  let extraBonusText = '';
  
  if (isThief) {
    quickSuccess += 10;
    professionalSuccess += 15;
    grandSuccess += 10;
    extraBonusText += '• 🦹‍♂️ **بونوس شغل دزد**: افزایش شانس موفقیت\n';
  }
  
  if (isMastermind) {
    quickSuccess += 5;
    professionalSuccess += 10;
    grandSuccess += 15;
    extraBonusText += '• 🧠 **بونوس ذهن مدبر**: افزایش شانس در عملیات‌های پیچیده\n';
  }
  
  if (hasLockpickingSkill) {
    quickSuccess += 5;
    professionalSuccess += 7;
    grandSuccess += 10;
    extraBonusText += '• 🔓 **مهارت قفل‌شکنی**: افزایش شانس موفقیت\n';
  }
  
  // تنظیم حداکثر 95% شانس موفقیت
  quickSuccess = Math.min(quickSuccess, 95);
  professionalSuccess = Math.min(professionalSuccess, 95);
  grandSuccess = Math.min(grandSuccess, 95);
  
  const robEmbed = new EmbedBuilder()
    .setColor('#ff5555')
    .setTitle('🔪 سیستم جیب‌زنی پیشرفته')
    .setDescription('با جیب‌زنی از کاربران دیگر، سکه‌های آن‌ها را به دست آورید! هر نوع جیب‌زنی ریسک و پاداش متفاوتی دارد.')
    .addFields(
      { name: '🏃 جیب‌زنی سریع (سطح 5+)', value: 
        `دزدی 1-3% کیف پول قربانی\n` +
        `شانس موفقیت: ${quickSuccess}%\n` +
        `جریمه شکست: 5% مبلغ دزدی\n` +
        `کولدان: 2 ساعت`, 
        inline: true 
      },
      { name: '🕵️ جیب‌زنی حرفه‌ای (سطح 10+)', value: 
        `دزدی 4-7% کیف پول قربانی\n` +
        `شانس موفقیت: ${professionalSuccess}%\n` +
        `جریمه شکست: 10% مبلغ دزدی\n` +
        `کولدان: 4 ساعت`, 
        inline: true 
      },
      { name: '🏴‍☠️ دزدی بزرگ (سطح 20+)', value: 
        `دزدی 8-10% کیف پول قربانی\n` +
        `شانس موفقیت: ${grandSuccess}%\n` +
        `جریمه شکست: 20% مبلغ دزدی\n` +
        `محرومیت 12 ساعته\n` +
        `کولدان: 8 ساعت`, 
        inline: true 
      },
      { name: '🥷 روش‌های پیشرفته جیب‌زنی', value: 
        '• **جیب‌زنی پنهانی** (سطح 25+): دزدی با احتمال کشف کمتر\n' +
        '• **دزدی از بانک** (سطح 35+): دزدی از حساب بانکی با ریسک بالاتر\n' +
        '• **جیب‌زنی گروهی** (سطح 30+): همکاری با دوستان برای دزدی بزرگتر',
        inline: false 
      },
      { name: '📝 دستور استفاده', value: 
        '`/pickpocket @user [نوع]`\n' +
        'مثال: `/pickpocket @username quick`\n' +
        'برای جیب‌زنی پیشرفته: `/pickpocket @username stealth`', 
        inline: false 
      },
      { name: '📊 وضعیت فعلی شما', value: 
        `سطح: ${userLevel}\n` +
        `شغل: ${userJob === 'thief' ? '🦹‍♂️ دزد حرفه‌ای' : (userJob === 'mastermind' ? '🧠 ذهن مدبر' : 'بدون شغل مرتبط')}\n` +
        `شهرت: ${userReputation} (${userReputation > 0 ? 'مثبت' : (userReputation < 0 ? 'منفی' : 'خنثی')})\n` +
        `تلاش‌های باقی‌مانده امروز: ${remainingAttempts}/3\n` +
        `${banStatus}`, 
        inline: false 
      }
    );
    
    // اضافه کردن بونوس‌ها اگر وجود دارند
    if (extraBonusText !== '') {
      robEmbed.addFields({ 
        name: '🌟 بونوس‌های شما', 
        value: extraBonusText, 
        inline: false 
      });
    }
    
    // اضافه کردن محدودیت‌ها
    robEmbed.addFields({ 
      name: '🔍 محدودیت‌های جیب‌زنی', 
      value: 
        '• فقط افراد بالای سطح 5 می‌توانند جیب‌زنی کنند\n' +
        '• هر کاربر در روز فقط 3 بار می‌تواند جیب‌زنی کند\n' +
        '• کاربران تازه‌وارد (کمتر از 7 روز) قابل جیب‌زنی نیستند\n' +
        '• کاربرانی که در 24 ساعت اخیر جیب‌شان زده شده، تا 12 ساعت ایمن هستند\n' +
        '• حداقل 200 سکه در کیف پول برای جیب‌زنی لازم است\n' +
        '• شهرت منفی موجب افزایش بازداشت توسط پلیس می‌شود', 
      inline: false 
    })
    .setFooter({ text: 'از آیتم‌های ویژه مانند چاقوی جیب‌بری، ماسک نینجا، و دستکش نامرئی برای افزایش شانس موفقیت استفاده کنید!' });

  const robRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('quick_rob_info')
        .setLabel('جیب‌زنی سریع')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏃'),
      new ButtonBuilder()
        .setCustomId('professional_rob_info')
        .setLabel('جیب‌زنی حرفه‌ای')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🕵️'),
      new ButtonBuilder()
        .setCustomId('grand_rob_info')
        .setLabel('دزدی بزرگ')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🏴‍☠️')
    );
    
  const robRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('stealth_rob_info')
        .setLabel('جیب‌زنی پنهانی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🥷'),
      new ButtonBuilder()
        .setCustomId('bank_rob_info')
        .setLabel('دزدی از بانک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🏦'),
      new ButtonBuilder()
        .setCustomId('view_rob_history')
        .setLabel('تاریخچه جیب‌زنی')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('📜')
    );

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [robEmbed], components: [robRow1, robRow2, backRow] });
}

// منوی خرید آیتم
async function showBuyItemMenu(interaction) {
  const buyEmbed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle('💰 خرید آیتم')
    .setDescription('برای خرید آیتم از فروشگاه، از دستور زیر استفاده کنید:')
    .addFields(
      { name: 'دستور خرید', value: '`/buy [شماره آیتم]`', inline: false },
      { name: 'مثال', value: '`/buy 1` - خرید آیتم شماره 1', inline: false },
      { name: 'راهنمایی', value: 'برای دیدن لیست آیتم‌ها و شماره آن‌ها، از دکمه "مشاهده فروشگاه" استفاده کنید.', inline: false }
    )
    .setFooter({ text: 'آیتم‌های خریداری شده در کوله‌پشتی شما ذخیره می‌شوند.' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('shop_menu')
        .setLabel('بازگشت به منوی فروشگاه')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [buyEmbed], components: [backRow] });
}

// منوی مأموریت‌های روزانه
async function showDailyQuests(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const dailyQuestsEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('📆 مأموریت‌های روزانه')
    .setDescription('با انجام این مأموریت‌ها، سکه و جوایز ویژه دریافت کنید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('quests_menu')
        .setLabel('بازگشت به منوی مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [dailyQuestsEmbed], components: [backRow] });
}

// منوی مأموریت‌های هفتگی
async function showWeeklyQuests(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const weeklyQuestsEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('📅 مأموریت‌های هفتگی')
    .setDescription('مأموریت‌های هفتگی چالش‌برانگیزتر هستند و جوایز بهتری دارند!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('quests_menu')
        .setLabel('بازگشت به منوی مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [weeklyQuestsEmbed], components: [backRow] });
}

// منوی دریافت جایزه مأموریت
async function claimQuestReward(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const claimQuestEmbed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle('🎁 دریافت جایزه مأموریت')
    .setDescription('در حال حاضر هیچ مأموریت تکمیل شده‌ای برای دریافت جایزه ندارید.')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('quests_menu')
        .setLabel('بازگشت به منوی مأموریت‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [claimQuestEmbed], components: [backRow] });
}

// منوی شروع دوئل
async function startDuel(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const startDuelEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('🥊 شروع دوئل')
    .setDescription('با کاربران دیگر مبارزه کنید و سکه به دست آورید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('duel_menu')
        .setLabel('بازگشت به منوی دوئل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [startDuelEmbed], components: [backRow] });
}

// منوی دوئل‌های فعال
async function showActiveDuels(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const activeDuelsEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('👁️ دوئل‌های فعال')
    .setDescription('لیست دوئل‌های در حال انجام در سرور:')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('duel_menu')
        .setLabel('بازگشت به منوی دوئل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [activeDuelsEmbed], components: [backRow] });
}

// منوی شرط‌بندی
async function placeBet(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const placeBetEmbed = new EmbedBuilder()
    .setColor('#e74c3c')
    .setTitle('💰 شرط‌بندی')
    .setDescription('روی نتیجه دوئل‌های دیگران شرط ببندید و سکه به دست آورید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('duel_menu')
        .setLabel('بازگشت به منوی دوئل')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [placeBetEmbed], components: [backRow] });
}

// منوی ایجاد تیم
async function showCreateTeamMenu(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const createTeamEmbed = new EmbedBuilder()
    .setColor('#3498db')
    .setTitle('🆕 ایجاد تیم')
    .setDescription('تیم خود را با نام دلخواه ایجاد کنید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('teams_menu')
        .setLabel('بازگشت به منوی تیم‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [createTeamEmbed], components: [backRow] });
}

// منوی پیوستن به تیم
async function showJoinTeamMenu(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const joinTeamEmbed = new EmbedBuilder()
    .setColor('#3498db')
    .setTitle('➕ پیوستن به تیم')
    .setDescription('به یکی از تیم‌های موجود بپیوندید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('teams_menu')
        .setLabel('بازگشت به منوی تیم‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [joinTeamEmbed], components: [backRow] });
}

// منوی مدیریت تیم
async function showManageTeamMenu(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const manageTeamEmbed = new EmbedBuilder()
    .setColor('#3498db')
    .setTitle('⚙️ مدیریت تیم')
    .setDescription('تیم خود را مدیریت کنید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('teams_menu')
        .setLabel('بازگشت به منوی تیم‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [manageTeamEmbed], components: [backRow] });
}

// منوی چالش تیمی
async function showTeamChallengeMenu(interaction) {
  // این ویژگی باید در آپدیت‌های بعدی اضافه شود
  const teamChallengeEmbed = new EmbedBuilder()
    .setColor('#3498db')
    .setTitle('🏆 چالش تیمی')
    .setDescription('با تیم خود در چالش‌های مختلف شرکت کنید!')
    .addFields(
      { name: 'این ویژگی به زودی اضافه خواهد شد!', value: 'منتظر آپدیت‌های بعدی باشید...', inline: false }
    )
    .setFooter({ text: 'در حال توسعه...' });

  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('teams_menu')
        .setLabel('بازگشت به منوی تیم‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );

  await interaction.update({ embeds: [teamChallengeEmbed], components: [backRow] });
}
// Button interaction handling
client.on(Events.InteractionCreate, async interaction => {
  if (interaction.isButton()) {
    await handleButton(interaction);
  }

  if (!interaction.isChatInputCommand()) return;

  const { commandName, options } = interaction;

  // Handle commands
  try {
    switch(commandName) {
      case 'menu':
        await showMainMenu(interaction);
        break;
      case 'wallet':
      case 'bank':
        await checkBalance(interaction);
        break;
      case 'daily':
        await claimDaily(interaction);
        break;
      case 'deposit':
        await depositMoney(interaction, options.getString('amount'));
        break;
      case 'withdraw':
        await withdrawMoney(interaction, options.getString('amount'));
        break;
      case 'rob':
        await robUser(interaction, options.getUser('target'));
        break;
      case 'pickpocket':
        await robUser(interaction, options.getUser('target'));
        break;
      case 'coinflip':
        await playCoinFlip(interaction, options.getString('amount'), options.getString('choice'));
        break;
      case 'dice':
        await playDice(interaction, options.getString('amount'), options.getInteger('number'));
        break;
      case 'shop':
        await showShop(interaction);
        break;
      case 'buy':
        await buyItem(interaction, options.getInteger('item'));
        break;
      case 'inventory':
        await showInventory(interaction);
        break;
      case 'profile':
        await showProfile(interaction);
        break;
      case 'leaderboard':
        await showLeaderboard(interaction);
        break;
      case 'transfer':
        await transferMoney(interaction, options.getUser('target'), options.getString('amount'));
        break;
    }
  } catch (error) {
    console.error(error);
    if (interaction.replied || interaction.deferred) {
      await interaction.followUp({ content: '❌ خطایی رخ داد! لطفاً دوباره تلاش کنید.', ephemeral: true });
    } else {
      await interaction.reply({ content: '❌ خطایی رخ داد! لطفاً دوباره تلاش کنید.', ephemeral: true });
    }
  }
});

// Command functions
async function checkBalance(interaction) {
  const userId = interaction.user.id;

  const wallet = await db.get(`wallet_${userId}`) || 0;
  const bank = await db.get(`bank_${userId}`) || 0;

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle(`💰 کیف پول ${interaction.user.username}`)
    .setThumbnail(interaction.user.displayAvatarURL())
    .addFields(
      { name: '👛 کیف پول', value: `${wallet} 🪙`, inline: true },
      { name: '🏦 حساب بانکی', value: `${bank} 🪙`, inline: true },
      { name: '💲 مجموع', value: `${wallet + bank} 🪙`, inline: true }
    )
    .setFooter({ text: 'سیستم اقتصادی Holi Coin' })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function claimDaily(interaction) {
  const userId = interaction.user.id;
  const lastDaily = await db.get(`lastDaily_${userId}`);
  const now = Date.now();

  if (lastDaily && now - lastDaily < 24 * 60 * 60 * 1000) {
    const timeLeft = 24 * 60 * 60 * 1000 - (now - lastDaily);
    const hours = Math.floor(timeLeft / (60 * 60 * 1000));
    const minutes = Math.floor((timeLeft % (60 * 60 * 1000)) / (60 * 1000));

    return interaction.reply({ content: `❌ شما قبلاً جایزه روزانه خود را دریافت کرده‌اید! ${hours} ساعت و ${minutes} دقیقه دیگر برگردید.`, ephemeral: true });
  }

  await db.add(`wallet_${userId}`, DAILY_AMOUNT);
  await db.set(`lastDaily_${userId}`, now);

  const embed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('🎁 جایزه روزانه')
    .setDescription(`شما ${DAILY_AMOUNT} 🪙 دریافت کردید!`)
    .setFooter({ text: 'هر ۲۴ ساعت یکبار جایزه بگیرید!' })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function depositMoney(interaction, amountStr) {
  const userId = interaction.user.id;
  let amount = amountStr;

  const wallet = await db.get(`wallet_${userId}`) || 0;

  if (!amount) return interaction.reply({ content: '❌ لطفاً مقداری را برای واریز وارد کنید!', ephemeral: true });

  if (amount === 'all') {
    amount = wallet;
  } else {
    amount = parseInt(amount);
    if (isNaN(amount)) return interaction.reply({ content: '❌ لطفاً یک عدد معتبر وارد کنید!', ephemeral: true });
  }

  if (amount <= 0) return interaction.reply({ content: '❌ شما نمی‌توانید مقدار صفر یا منفی واریز کنید!', ephemeral: true });
  if (amount > wallet) return interaction.reply({ content: '❌ شما سکه کافی در کیف پول خود ندارید!', ephemeral: true });

  await db.sub(`wallet_${userId}`, amount);
  await db.add(`bank_${userId}`, amount);

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🏦 واریز موفق')
    .setDescription(`شما ${amount} 🪙 به حساب بانکی خود واریز کردید!`)
    .setFooter({ text: 'از سپرده خود سود ماهانه دریافت کنید!' })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function withdrawMoney(interaction, amountStr) {
  const userId = interaction.user.id;
  let amount = amountStr;

  const bank = await db.get(`bank_${userId}`) || 0;

  if (!amount) return interaction.reply({ content: '❌ لطفاً مقداری را برای برداشت وارد کنید!', ephemeral: true });

  if (amount === 'all') {
    amount = bank;
  } else {
    amount = parseInt(amount);
    if (isNaN(amount)) return interaction.reply({ content: '❌ لطفاً یک عدد معتبر وارد کنید!', ephemeral: true });
  }

  if (amount <= 0) return interaction.reply({ content: '❌ شما نمی‌توانید مقدار صفر یا منفی برداشت کنید!', ephemeral: true });
  if (amount > bank) return interaction.reply({ content: '❌ شما سکه کافی در حساب بانکی خود ندارید!', ephemeral: true });

  await db.sub(`bank_${userId}`, amount);
  await db.add(`wallet_${userId}`, amount);

  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('🏦 برداشت موفق')
    .setDescription(`شما ${amount} 🪙 از حساب بانکی خود برداشت کردید!`)
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function robUser(interaction, targetUser) {
  const robber = interaction.user.id;

  if (!targetUser) 
    return interaction.reply({ content: '❌ لطفاً کاربری را برای دزدی مشخص کنید!', ephemeral: true });

  const victim = targetUser.id;
  
  // Check presence of type option (to support old command format)
  const typeOption = interaction.options.getString('type');
  const pickpocketType = typeOption || 'quick'; // Default to 'quick' if not specified

  // Cannot rob yourself
  if (victim === robber) 
    return interaction.reply({ content: '❌ شما نمی‌توانید از خودتان دزدی کنید!', ephemeral: true });

  // Cannot rob bots
  if (targetUser.bot) 
    return interaction.reply({ content: '❌ شما نمی‌توانید از ربات‌ها دزدی کنید!', ephemeral: true });
    
  // Get user level
  const userLevel = await db.get(`level_${robber}`) || 1;
  
  // Check if user meets the minimum level requirements
  if (userLevel < 5) {
    return interaction.reply({ content: '❌ شما باید حداقل سطح 5 باشید تا بتوانید جیب‌زنی کنید!', ephemeral: true });
  }
  
  // Check level requirements for each type of pickpocketing
  if (pickpocketType === 'professional' && userLevel < 10) {
    return interaction.reply({ content: '❌ برای انجام جیب‌زنی حرفه‌ای باید حداقل سطح 10 باشید!', ephemeral: true });
  }
  
  if (pickpocketType === 'grand' && userLevel < 20) {
    return interaction.reply({ content: '❌ برای انجام دزدی بزرگ باید حداقل سطح 20 باشید!', ephemeral: true });
  }
  
  // Check daily limit
  const dailyPickpocketCount = await db.get(`dailyPickpocket_${robber}`) || 0;
  
  if (dailyPickpocketCount >= 3) {
    return interaction.reply({ content: '🚫 | شما امروز بیش از حد جیب زده‌اید! فردا دوباره تلاش کنید.', ephemeral: true });
  }
  
  // Check if victim is a new user (less than 7 days in server)
  const targetJoinedAt = interaction.guild.members.cache.get(victim)?.joinedTimestamp || 0;
  const now = Date.now();
  
  if (now - targetJoinedAt < 7 * 24 * 60 * 60 * 1000) {
    return interaction.reply({ content: '❌ کاربران تازه‌وارد (کمتر از 7 روز حضور در سرور) قابل جیب‌زنی نیستند!', ephemeral: true });
  }
  
  // Check if victim has been pickpocketed recently (12 hour immunity)
  const lastPickpocketed = await db.get(`lastPickpocketed_${victim}`) || 0;
  
  if (now - lastPickpocketed < 12 * 60 * 60 * 1000) {
    return interaction.reply({ content: '❌ این کاربر در 12 ساعت گذشته مورد جیب‌زنی قرار گرفته و فعلاً ایمن است!', ephemeral: true });
  }
  
  // Check victim's wallet balance
  const victimWallet = await db.get(`wallet_${victim}`) || 0;
  
  if (victimWallet < 200) {
    return interaction.reply({ content: '❌ اگر موجودی کیف پول کاربر کمتر از 200 سکه باشد، جیب‌زنی روی او قفل است!', ephemeral: true });
  }
  
  // Check cooldown based on pickpocket type
  const lastPickpocket = await db.get(`lastPickpocket_${robber}`) || 0;
  let cooldown, successChance, stealMinPercent, stealMaxPercent, failPenaltyPercent;
  
  switch (pickpocketType) {
    case 'quick':
      cooldown = 2 * 60 * 60 * 1000; // 2 hours
      successChance = 0.7; // 70%
      stealMinPercent = 0.01; // 1%
      stealMaxPercent = 0.03; // 3%
      failPenaltyPercent = 0.05; // 5%
      break;
      
    case 'professional':
      cooldown = 4 * 60 * 60 * 1000; // 4 hours
      successChance = 0.5; // 50%
      stealMinPercent = 0.04; // 4%
      stealMaxPercent = 0.07; // 7%
      failPenaltyPercent = 0.1; // 10%
      break;
      
    case 'grand':
      cooldown = 8 * 60 * 60 * 1000; // 8 hours
      successChance = 0.3; // 30%
      stealMinPercent = 0.08; // 8%
      stealMaxPercent = 0.1; // 10%
      failPenaltyPercent = 0.2; // 20%
      break;
      
    default:
      return interaction.reply({ content: '❌ نوع جیب‌زنی نامعتبر است!', ephemeral: true });
  }
  
  // Check if user cooldown has passed
  if (now - lastPickpocket < cooldown) {
    const timeLeft = cooldown - (now - lastPickpocket);
    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    
    return interaction.reply({ 
      content: `❌ شما باید ${hours} ساعت و ${minutes} دقیقه دیگر صبر کنید تا بتوانید دوباره جیب‌زنی کنید!`, 
      ephemeral: true 
    });
  }
  
  // Check if victim has anti-theft insurance
  const hasInsurance = await db.get(`insurance_${victim}`) || false;
  const insuranceExpiry = await db.get(`insuranceExpiry_${victim}`) || 0;
  
  if (hasInsurance && insuranceExpiry > now) {
    successChance *= 0.5; // 50% less chance of success if victim has insurance
  }
  
  // Check if robber has thief's dagger
  const hasDagger = await db.get(`thief_dagger_${robber}`) || false;
  
  if (hasDagger) {
    successChance += 0.1; // +10% success chance with dagger
  }
  
  // Check if robber has ninja mask
  const hasNinjaMask = await db.get(`ninja_mask_${robber}`) || false;
  
  // Calculate chance of success (random)
  const isSuccess = Math.random() < successChance;
  
  // Calculate theft amount (percent of victim's wallet)
  const stealPercent = Math.random() * (stealMaxPercent - stealMinPercent) + stealMinPercent;
  const maxPossibleSteal = Math.floor(victimWallet * stealMaxPercent); // Cap at 10% of wallet
  const calculatedStealAmount = Math.floor(victimWallet * stealPercent);
  const stealAmount = Math.min(calculatedStealAmount, maxPossibleSteal);
  
  // Set cooldown and increment daily count
  await db.set(`lastPickpocket_${robber}`, now);
  await db.add(`dailyPickpocket_${robber}`, 1);
  
  // Handle failed pickpocket attempts
  const failedAttempts = await db.get(`failedPickpocketAttempts_${robber}`) || 0;
  
  if (!isSuccess) {
    // Calculate penalty amount (percentage of what they tried to steal)
    const penaltyAmount = Math.floor(stealAmount * failPenaltyPercent);
    
    // Check if robber has ninja mask to reduce penalty
    const finalPenalty = hasNinjaMask ? Math.floor(penaltyAmount * 0.8) : penaltyAmount; // 20% less penalty
    
    // Transfer penalty from robber to victim
    await db.sub(`wallet_${robber}`, finalPenalty);
    await db.add(`wallet_${victim}`, finalPenalty);
    
    // Record failed attempt
    await db.add(`failedPickpocketAttempts_${robber}`, 1);
    
    let failEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('🚨 جیب‌زنی ناموفق!')
      .setDescription(`شما در حین جیب‌زنی از <@${victim}> گیر افتادید و ${finalPenalty} 🪙 جریمه شدید!`)
      .setTimestamp();
    
    // Check if user has failed 3 times, ban them from pickpocketing for 24 hours
    if (failedAttempts + 1 >= 3) {
      await db.set(`pickpocketBanned_${robber}`, true);
      await db.set(`pickpocketBanExpiry_${robber}`, now + 24 * 60 * 60 * 1000); // 24 hour ban
      await db.set(`failedPickpocketAttempts_${robber}`, 0); // Reset counter
      
      failEmbed.addFields({ 
        name: '🚓 دستگیری!', 
        value: 'شما 3 بار جیب‌زنی ناموفق داشته‌اید و برای 24 ساعت از جیب‌زنی محروم شدید!' 
      });
    }
    
    // For grand theft, apply 12 hour pickpocketing ban on failure
    if (pickpocketType === 'grand') {
      await db.set(`pickpocketBanned_${robber}`, true);
      await db.set(`pickpocketBanExpiry_${robber}`, now + 12 * 60 * 60 * 1000); // 12 hour ban
      
      failEmbed.addFields({ 
        name: '👮 دستگیری موقت!', 
        value: 'به دلیل شکست در دزدی بزرگ، شما برای 12 ساعت از جیب‌زنی محروم شدید!' 
      });
    }
    
    return interaction.reply({ embeds: [failEmbed] });
  }
  
  // Successful pickpocket
  // Mark victim as pickpocketed
  await db.set(`lastPickpocketed_${victim}`, now);
  
  // Transfer stolen amount
  await db.sub(`wallet_${victim}`, stealAmount);
  await db.add(`wallet_${robber}`, stealAmount);
  
  // Reset failed attempts counter on success
  await db.set(`failedPickpocketAttempts_${robber}`, 0);
  
  // Create and send success embed
  const successEmbed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle(`💰 ${pickpocketType === 'quick' ? 'جیب‌زنی سریع' : (pickpocketType === 'professional' ? 'جیب‌زنی حرفه‌ای' : 'دزدی بزرگ')} موفق!`)
    .setDescription(`شما ${stealAmount} 🪙 از کیف پول <@${victim}> جیب‌زنی کردید!`)
    .addFields({ 
      name: `${pickpocketType === 'quick' ? '🏃‍♂️' : (pickpocketType === 'professional' ? '🕵️' : '🏴‍☠️')} نوع جیب‌زنی`, 
      value: `${pickpocketType === 'quick' ? 'سریع' : (pickpocketType === 'professional' ? 'حرفه‌ای' : 'بزرگ')}` 
    })
    .setTimestamp();
  
  // Add extra info if user had items
  if (hasDagger || hasNinjaMask) {
    let itemsUsed = '';
    if (hasDagger) itemsUsed += '🔪 چاقوی جیب‌بری\n';
    if (hasNinjaMask) itemsUsed += '🕶️ ماسک نینجا\n';
    
    successEmbed.addFields({ name: '🧰 آیتم‌های استفاده شده', value: itemsUsed });
  }
  
  return interaction.reply({ embeds: [successEmbed] });
}

async function playCoinFlip(interaction, amountStr, choice) {
  if (!amountStr || !choice) return interaction.reply({ content: '❌ لطفاً مقدار شرط و انتخاب خود (شیر/خط) را وارد کنید!', ephemeral: true });

  let amount = amountStr;

  // Validate choice
  if (choice !== 'شیر' && choice !== 'خط') 
    return interaction.reply({ content: '❌ لطفاً انتخاب معتبر (شیر/خط) وارد کنید!', ephemeral: true });

  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;

  // Validate bet amount
  if (amount === 'all') {
    amount = wallet;
  } else {
    amount = parseInt(amount);
    if (isNaN(amount)) return interaction.reply({ content: '❌ لطفاً مقدار معتبری وارد کنید!', ephemeral: true });
  }

  if (amount <= 0) return interaction.reply({ content: '❌ مقدار شرط باید بیشتر از صفر باشد!', ephemeral: true });
  if (amount > wallet) return interaction.reply({ content: '❌ شما سکه کافی در کیف پول خود ندارید!', ephemeral: true });

  // Flip the coin
  const result = Math.random() < 0.5 ? 'شیر' : 'خط';

  // Create embed for result
  const embed = new EmbedBuilder()
    .setTitle('🪙 شیر یا خط')
    .setDescription(`شما **${amount}** 🪙 بر روی **${choice}** شرط بستید.`)
    .addFields({ name: 'نتیجه', value: `**${result}**` })
    .setTimestamp();

  // Determine outcome
  if (result === choice) {
    await db.add(`wallet_${userId}`, amount);
    embed.setColor('#00ff00')
      .addFields({ name: 'برد! 🎉', value: `شما **${amount * 2}** 🪙 برنده شدید!` });
  } else {
    await db.sub(`wallet_${userId}`, amount);
    embed.setColor('#ff0000')
      .addFields({ name: 'باخت! 😢', value: `شما **${amount}** 🪙 از دست دادید!` });
  }

  await interaction.reply({ embeds: [embed] });
}

async function playDice(interaction, amountStr, choice) {
  if (!amountStr || !choice) return interaction.reply({ content: '❌ لطفاً مقدار شرط و عدد مورد نظر (1-6) را وارد کنید!', ephemeral: true });

  let amount = amountStr;

  // Validate choice
  if (isNaN(choice) || choice < 1 || choice > 6) 
    return interaction.reply({ content: '❌ لطفاً یک عدد بین 1 تا 6 انتخاب کنید!', ephemeral: true });

  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;

  // Validate bet amount
  if (amount === 'all') {
    amount = wallet;
  } else {
    amount = parseInt(amount);
    if (isNaN(amount)) return interaction.reply({ content: '❌ لطفاً مقدار معتبری وارد کنید!', ephemeral: true });
  }

  if (amount <= 0) return interaction.reply({ content: '❌ مقدار شرط باید بیشتر از صفر باشد!', ephemeral: true });
  if (amount > wallet) return interaction.reply({ content: '❌ شما سکه کافی در کیف پول خود ندارید!', ephemeral: true });

  // Roll the dice
  const result = Math.floor(Math.random() * 6) + 1;

  // Create embed for result
  const embed = new EmbedBuilder()
    .setTitle('🎲 تاس')
    .setDescription(`شما **${amount}** 🪙 بر روی عدد **${choice}** شرط بستید.`)
    .addFields({ name: 'نتیجه', value: `**${result}**` })
    .setTimestamp();

  // Determine outcome
  if (result === choice) {
    const winnings = amount * 5; // 6x payout (5x profit)
    await db.add(`wallet_${userId}`, amount * 5);
    embed.setColor('#00ff00')
      .addFields({ name: 'برد! 🎉', value: `شما **${winnings}** 🪙 برنده شدید!` });
  } else {
    await db.sub(`wallet_${userId}`, amount);
    embed.setColor('#ff0000')
      .addFields({ name: 'باخت! 😢', value: `شما **${amount}** 🪙 از دست دادید!` });
  }

  await interaction.reply({ embeds: [embed] });
}

async function showShop(interaction) {
  const userId = interaction.user.id;
  const userJob = await db.get(`job_${userId}`) || 'none';
  const isTrader = userJob === 'trader';
  const hasVIP = await db.get(`vip_${userId}`) || false;
  const vipExpiry = await db.get(`vipExpiry_${userId}`) || 0;
  const hasActiveVIP = hasVIP && vipExpiry > Date.now();
  
  // آیتم‌های عادی فروشگاه
  const shop = [
    { id: 1, name: '🛡️ محافظ شخصی', price: 1000, description: 'از دزدی دیگران جلوگیری می‌کند (۲۴ ساعت)' },
    { id: 2, name: '🔮 توکن VIP', price: 5000, description: 'به مدت ۷ روز وضعیت VIP دریافت کنید' },
    { id: 3, name: '🎁 جعبه شانس', price: 500, description: 'محتوای تصادفی با ارزش بالقوه بالا' },
    { id: 4, name: '💹 بیمه ضد سرقت', price: 5000, description: '50% کاهش احتمال موفقیت جیب‌زنی روی شما (۷ روز)' },
    { id: 5, name: '🏆 نشان افتخار', price: 10000, description: 'یک نشان ویژه برای نمایش در پروفایل' },
    { id: 6, name: '🔪 چاقوی جیب‌بری', price: 1500, description: 'افزایش 10% شانس موفقیت در جیب‌زنی' },
    { id: 7, name: '🕶️ ماسک نینجا', price: 3000, description: 'کاهش 20% جریمه جیب‌زنی ناموفق' },
    { id: 8, name: '🧤 دستکش نامرئی', price: 2500, description: 'کاهش 25% احتمال دستگیری در جیب‌زنی پنهانی' },
    { id: 9, name: '🧠 کتاب راهنمای قفل‌شکنی', price: 7500, description: 'آموزش مهارت قفل‌شکنی برای دزدی از بانک' },
    { id: 10, name: '🏠 سند آپارتمان کوچک', price: 20000, description: 'درآمد روزانه: 100 سکه | محافظت در برابر دزدی' }
  ];
  
  // لوت باکس‌های جدید
  const lootboxes = [
    { id: 101, name: '🥉 لوت‌باکس برنزی', price: 500, description: 'شانس دریافت 200 تا 1000 سکه یا آیتم‌های ساده' },
    { id: 102, name: '🥈 لوت‌باکس نقره‌ای', price: 2000, description: 'شانس دریافت 1000 تا 5000 سکه یا آیتم‌های متوسط' },
    { id: 103, name: '🥇 لوت‌باکس طلایی', price: 5000, description: 'شانس دریافت 5000 تا 20000 سکه یا آیتم‌های نادر' }
  ];
  
  // آیتم‌های ویژه مخصوص VIP
  const vipOnlyItems = [
    { id: 201, name: '🔍 عینک شناسایی', price: 15000, description: 'نمایش موجودی کیف پول قربانی قبل از دزدی' },
    { id: 202, name: '🪄 عصای جادویی', price: 25000, description: '20% سرعت بیشتر در بازیابی انرژی و کولداون‌ها' },
    { id: 203, name: '🏚️ سند ویلای لوکس', price: 50000, description: 'درآمد روزانه: 500 سکه | امنیت کامل' }
  ];
  
  // آیتم‌های مخصوص تاجرها
  const traderOnlyItems = [
    { id: 301, name: '📈 جدول تحلیل بازار', price: 3000, description: 'نمایش قیمت‌های بازار سیاه و بهترین معاملات' },
    { id: 302, name: '🧪 اکسیر تاجر', price: 8000, description: '30% افزایش قیمت فروش برای 24 ساعت' }
  ];

  // اعمال تخفیف برای تاجرها
  const applyDiscount = (price) => {
    let finalPrice = price;
    
    if (isTrader) {
      finalPrice = Math.floor(price * 0.9); // 10% تخفیف
    }
    
    if (hasActiveVIP) {
      finalPrice = Math.floor(finalPrice * 0.95); // 5% تخفیف اضافی برای VIP
    }
    
    return finalPrice;
  };

  // متن فروشگاه
  let shopText = '';
  
  // اضافه کردن آیتم‌های عادی
  shopText += '**🛒 آیتم‌های عمومی:**\n\n';
  for (const item of shop) {
    const finalPrice = applyDiscount(item.price);
    const discountText = finalPrice < item.price ? ` (تخفیف: **${item.price - finalPrice}** 🪙)` : '';
    
    shopText += `**${item.id}.** ${item.name} - **${finalPrice}** 🪙${discountText}\n${item.description}\n\n`;
  }
  
  // اضافه کردن لوت باکس‌ها
  shopText += '**🎁 لوت‌باکس‌ها:**\n\n';
  for (const box of lootboxes) {
    const finalPrice = applyDiscount(box.price);
    const discountText = finalPrice < box.price ? ` (تخفیف: **${box.price - finalPrice}** 🪙)` : '';
    
    shopText += `**${box.id}.** ${box.name} - **${finalPrice}** 🪙${discountText}\n${box.description}\n\n`;
  }
  
  // اضافه کردن آیتم‌های VIP در صورت داشتن VIP
  if (hasActiveVIP) {
    shopText += '**👑 آیتم‌های مخصوص VIP:**\n\n';
    for (const item of vipOnlyItems) {
      const finalPrice = applyDiscount(item.price);
      const discountText = finalPrice < item.price ? ` (تخفیف: **${item.price - finalPrice}** 🪙)` : '';
      
      shopText += `**${item.id}.** ${item.name} - **${finalPrice}** 🪙${discountText}\n${item.description}\n\n`;
    }
  }
  
  // اضافه کردن آیتم‌های مخصوص تاجر
  if (isTrader) {
    shopText += '**🧙‍♂️ آیتم‌های مخصوص تاجر:**\n\n';
    for (const item of traderOnlyItems) {
      const finalPrice = applyDiscount(item.price);
      const discountText = finalPrice < item.price ? ` (تخفیف: **${item.price - finalPrice}** 🪙)` : '';
      
      shopText += `**${item.id}.** ${item.name} - **${finalPrice}** 🪙${discountText}\n${item.description}\n\n`;
    }
  }

  const embed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle(`🛒 فروشگاه ${hasActiveVIP ? '👑 VIP' : ''}`)
    .setDescription(shopText)
    .setFooter({ 
      text: isTrader 
        ? 'به عنوان تاجر، شما 10% تخفیف دریافت می‌کنید! برای خرید از دستور /buy استفاده کنید'
        : (hasActiveVIP 
          ? 'به عنوان کاربر VIP شما 5% تخفیف دریافت می‌کنید! برای خرید از دستور /buy استفاده کنید'
          : 'برای خرید از دستور /buy استفاده کنید') 
    })
    .setTimestamp();

  // ساخت دکمه‌های کتگوری‌های فروشگاه
  const shopCategoryRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('shop_general')
        .setLabel('آیتم‌های عمومی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🛒'),
      new ButtonBuilder()
        .setCustomId('shop_lootboxes')
        .setLabel('لوت‌باکس‌ها')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🎁'),
      new ButtonBuilder()
        .setCustomId('shop_vip')
        .setLabel('آیتم‌های VIP')
        .setStyle(hasActiveVIP ? ButtonStyle.Success : ButtonStyle.Secondary)
        .setEmoji('👑')
        .setDisabled(!hasActiveVIP),
      new ButtonBuilder()
        .setCustomId('shop_black_market')
        .setLabel('بازار سیاه')
        .setStyle(isTrader ? ButtonStyle.Danger : ButtonStyle.Secondary)
        .setEmoji('🕵️')
        .setDisabled(!isTrader)
    );

  if (interaction.replied || interaction.deferred) {
    await interaction.editReply({ embeds: [embed], components: [shopCategoryRow] });
  } else {
    await interaction.reply({ embeds: [embed], components: [shopCategoryRow] });
  }
}

// دزدی از بانک (Bank Heist)
async function showBankHeistMenu(interaction) {
  const userId = interaction.user.id;
  const userLevel = await db.get(`level_${userId}`) || 1;
  const hasLockpickingSkill = await db.get(`skill_lockpicking_${userId}`) || false;
  const userJob = await db.get(`job_${userId}`) || 'none';
  const isMastermind = userJob === 'mastermind';
  const isThief = userJob === 'thief';
  
  // بررسی شرایط اولیه
  if (userLevel < 15) {
    const errorEmbed = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('⚠️ دسترسی محدود')
      .setDescription(`دزدی از بانک فقط برای کاربران سطح 15 به بالا فعال است. شما سطح ${userLevel} هستید.`)
      .setFooter({ text: 'با جیب‌زنی و شرکت در بازی‌ها، سطح خود را افزایش دهید!' });
      
    return await interaction.update({ embeds: [errorEmbed], components: [] });
  }
  
  // چک کردن کولداون
  const lastBankHeist = await db.get(`lastBankHeist_${userId}`) || 0;
  const now = Date.now();
  const cooldown = 24 * 60 * 60 * 1000; // 24 ساعت
  
  if (now - lastBankHeist < cooldown) {
    const timeLeft = cooldown - (now - lastBankHeist);
    const hours = Math.floor(timeLeft / (1000 * 60 * 60));
    const minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
    
    const cooldownEmbed = new EmbedBuilder()
      .setColor('#ff9900')
      .setTitle('⏳ کولداون فعال')
      .setDescription(`شما باید ${hours} ساعت و ${minutes} دقیقه دیگر صبر کنید تا بتوانید دوباره دزدی از بانک انجام دهید.`)
      .setFooter({ text: 'پلیس هنوز در جستجوی شماست!' });
      
    return await interaction.update({ embeds: [cooldownEmbed], components: [] });
  }
  
  // تعریف انواع دزدی از بانک
  const heistTypes = [
    {
      id: 'solo',
      name: '🕵️ دزدی انفرادی',
      description: 'به تنهایی از شعبه کوچک بانک دزدی کنید',
      minPlayers: 1,
      maxPlayers: 1,
      minReward: 1000,
      maxReward: 5000,
      successChance: isMastermind ? 40 : (isThief ? 35 : 30), // درصد موفقیت
      requirement: 'سطح 15+',
      penalty: 'جریمه شکست: 2000 سکه'
    },
    {
      id: 'small',
      name: '👥 دزدی گروه کوچک',
      description: 'با 2-3 نفر از شعبه متوسط بانک دزدی کنید',
      minPlayers: 2,
      maxPlayers: 3,
      minReward: 5000,
      maxReward: 15000,
      successChance: isMastermind ? 55 : (isThief ? 50 : 45), // درصد موفقیت
      requirement: 'سطح 20+',
      penalty: 'جریمه شکست: 5000 سکه'
    },
    {
      id: 'large',
      name: '👨‍👨‍👦‍👦 دزدی گروه بزرگ',
      description: 'با 4-5 نفر از شعبه مرکزی بانک دزدی کنید',
      minPlayers: 4,
      maxPlayers: 5,
      minReward: 20000,
      maxReward: 50000,
      successChance: isMastermind ? 70 : (isThief ? 65 : 60), // درصد موفقیت
      requirement: 'سطح 25+',
      penalty: 'جریمه شکست: 10000 سکه'
    }
  ];
  
  // اضافه کردن بونوس مهارت قفل‌شکنی
  if (hasLockpickingSkill) {
    heistTypes.forEach(heist => {
      heist.successChance += 10; // افزایش 10 درصدی شانس موفقیت
    });
  }
  
  // دریافت دزدی‌های فعال
  const activeHeists = await db.get('active_heists') || [];
  const activeHeistsText = activeHeists.length > 0 
    ? activeHeists.map(h => `• ${h.type === 'small' ? '👥' : (h.type === 'large' ? '👨‍👨‍👦‍👦' : '🕵️')} دزدی ${h.type === 'small' ? 'گروه کوچک' : (h.type === 'large' ? 'گروه بزرگ' : 'انفرادی')}: ${h.participants.length}/${h.type === 'small' ? 3 : (h.type === 'large' ? 5 : 1)} نفر (رهبر: <@${h.leader}>)`).join('\n')
    : '**هیچ دزدی فعالی وجود ندارد.**';
  
  const bankHeistEmbed = new EmbedBuilder()
    .setColor('#ff0000')
    .setTitle('🏦 دزدی از بانک')
    .setDescription('یکی از مخاطره‌آمیزترین و پرسودترین فعالیت‌های ممکن! با همراهی دوستان خود، از بانک دزدی کنید و ثروتمند شوید.')
    .addFields(
      { name: '📝 انواع دزدی از بانک', value: 
        heistTypes.map(h => 
          `**${h.name}**\n${h.description}\n` +
          `شانس موفقیت: **${h.successChance}%**\n` +
          `جایزه: **${h.minReward}** تا **${h.maxReward}** 🪙\n` +
          `${h.requirement} | ${h.penalty}`
        ).join('\n\n'), 
        inline: false 
      },
      { name: '🔍 شرایط شرکت', value: 
        `• حداقل سطح 15 برای شرکت در دزدی\n` +
        `• هر کاربر فقط می‌تواند هر 24 ساعت یکبار شرکت کند\n` +
        `• در صورت شکست، تمام شرکت‌کنندگان جریمه می‌شوند\n` +
        `• مهارت قفل‌شکنی (+10% شانس موفقیت)` +
        (hasLockpickingSkill ? ' ✅' : ' ❌'), 
        inline: false 
      },
      { name: '🏃‍♂️ دزدی‌های فعال', value: activeHeistsText, inline: false }
    )
    .setFooter({ text: isMastermind ? 'به عنوان ذهن مدبر، شما شانس موفقیت بیشتری دارید!' : (isThief ? 'به عنوان دزد حرفه‌ای، شما شانس موفقیت بیشتری دارید!' : 'با استفاده از مهارت قفل‌شکنی، شانس موفقیت خود را افزایش دهید!') });
  
  // ساخت دکمه‌ها
  const heistRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('start_solo_heist')
        .setLabel('دزدی انفرادی')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('🕵️'),
      new ButtonBuilder()
        .setCustomId('start_small_heist')
        .setLabel('دزدی گروه کوچک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('👥'),
      new ButtonBuilder()
        .setCustomId('start_large_heist')
        .setLabel('دزدی گروه بزرگ')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('👨‍👨‍👦‍👦')
    );
    
  const actionRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('join_heist')
        .setLabel('پیوستن به دزدی')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🤝')
        .setDisabled(activeHeists.length === 0),
      new ButtonBuilder()
        .setCustomId('view_heist_history')
        .setLabel('تاریخچه دزدی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('📜')
    );
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('games_menu')
        .setLabel('بازگشت به منوی بازی‌ها')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('🔙')
    );
  
  await interaction.update({ embeds: [bankHeistEmbed], components: [heistRow, actionRow, backRow] });
}

async function buyItem(interaction, itemId) {
  if (!itemId) return interaction.reply({ content: '❌ لطفاً شماره آیتمی که می‌خواهید بخرید را وارد کنید!', ephemeral: true });

  const userId = interaction.user.id;
  const userJob = await db.get(`job_${userId}`) || 'none';
  const isTrader = userJob === 'trader';
  const hasVIP = await db.get(`vip_${userId}`) || false;
  const vipExpiry = await db.get(`vipExpiry_${userId}`) || 0;
  const hasActiveVIP = hasVIP && vipExpiry > Date.now();
  
  // آیتم‌های عادی فروشگاه
  const shop = [
    { id: 1, name: '🛡️ محافظ شخصی', price: 1000, description: 'از دزدی دیگران جلوگیری می‌کند (۲۴ ساعت)' },
    { id: 2, name: '🔮 توکن VIP', price: 5000, description: 'به مدت ۷ روز وضعیت VIP دریافت کنید' },
    { id: 3, name: '🎁 جعبه شانس', price: 500, description: 'محتوای تصادفی با ارزش بالقوه بالا' },
    { id: 4, name: '💹 بیمه ضد سرقت', price: 5000, description: '50% کاهش احتمال موفقیت جیب‌زنی روی شما (۷ روز)' },
    { id: 5, name: '🏆 نشان افتخار', price: 10000, description: 'یک نشان ویژه برای نمایش در پروفایل' },
    { id: 6, name: '🔪 چاقوی جیب‌بری', price: 1500, description: 'افزایش 10% شانس موفقیت در جیب‌زنی' },
    { id: 7, name: '🕶️ ماسک نینجا', price: 3000, description: 'کاهش 20% جریمه جیب‌زنی ناموفق' },
    { id: 8, name: '🧤 دستکش نامرئی', price: 2500, description: 'کاهش 25% احتمال دستگیری در جیب‌زنی پنهانی' },
    { id: 9, name: '🧠 کتاب راهنمای قفل‌شکنی', price: 7500, description: 'آموزش مهارت قفل‌شکنی برای دزدی از بانک' },
    { id: 10, name: '🏠 سند آپارتمان کوچک', price: 20000, description: 'درآمد روزانه: 100 سکه | محافظت در برابر دزدی' }
  ];
  
  // لوت باکس‌ها
  const lootboxes = [
    { id: 101, name: '🥉 لوت‌باکس برنزی', price: 500, description: 'شانس دریافت 200 تا 1000 سکه یا آیتم‌های ساده' },
    { id: 102, name: '🥈 لوت‌باکس نقره‌ای', price: 2000, description: 'شانس دریافت 1000 تا 5000 سکه یا آیتم‌های متوسط' },
    { id: 103, name: '🥇 لوت‌باکس طلایی', price: 5000, description: 'شانس دریافت 5000 تا 20000 سکه یا آیتم‌های نادر' }
  ];
  
  // آیتم‌های VIP
  const vipItems = [
    { id: 201, name: '🔍 عینک شناسایی', price: 15000, description: 'نمایش موجودی کیف پول قربانی قبل از دزدی' },
    { id: 202, name: '🪄 عصای جادویی', price: 25000, description: '20% سرعت بیشتر در بازیابی انرژی و کولداون‌ها' },
    { id: 203, name: '🏚️ سند ویلای لوکس', price: 50000, description: 'درآمد روزانه: 500 سکه | امنیت کامل' }
  ];
  
  // آیتم‌های تاجر
  const traderItems = [
    { id: 301, name: '📈 جدول تحلیل بازار', price: 3000, description: 'نمایش قیمت‌های بازار سیاه و بهترین معاملات' },
    { id: 302, name: '🧪 اکسیر تاجر', price: 8000, description: '30% افزایش قیمت فروش برای 24 ساعت' }
  ];
  
  // ترکیب تمام فروشگاه‌ها
  const allItems = [
    ...shop,
    ...lootboxes,
    ...(hasActiveVIP ? vipItems : []),
    ...(isTrader ? traderItems : [])
  ];
  
  // پیدا کردن آیتم
  const item = allItems.find(i => i.id === itemId);
  if (!item) return interaction.reply({ content: '❌ آیتم مورد نظر در فروشگاه وجود ندارد!', ephemeral: true });
  
  // اعمال تخفیف برای تاجرها و VIP
  let finalPrice = item.price;
  if (isTrader) {
    finalPrice = Math.floor(finalPrice * 0.9); // 10% تخفیف
  }
  if (hasActiveVIP) {
    finalPrice = Math.floor(finalPrice * 0.95); // 5% تخفیف اضافی
  }
  
  // بررسی موجودی کیف پول
  const wallet = await db.get(`wallet_${userId}`) || 0;
  if (wallet < finalPrice) return interaction.reply({ content: `❌ شما سکه کافی برای خرید این آیتم ندارید! (قیمت: ${finalPrice} 🪙)`, ephemeral: true });
  
  // کسر سکه از کیف پول
  await db.sub(`wallet_${userId}`, finalPrice);
  
  // اعمال اثرات آیتم بر اساس ID
  if (item.id === 1) { // محافظ شخصی
    await db.set(`protection_${userId}`, true);
    await db.set(`protectionExpiry_${userId}`, Date.now() + 24 * 60 * 60 * 1000);
  } 
  else if (item.id === 2) { // توکن VIP
    await db.set(`vip_${userId}`, true);
    await db.set(`vipExpiry_${userId}`, Date.now() + 7 * 24 * 60 * 60 * 1000);
  } 
  else if (item.id === 3) { // جعبه شانس قدیمی
    const rewards = [
      { amount: 100, chance: 0.4 },
      { amount: 300, chance: 0.3 },
      { amount: 800, chance: 0.2 },
      { amount: 2000, chance: 0.08 },
      { amount: 5000, chance: 0.02 }
    ];

    let random = Math.random();
    let reward;
    let sum = 0;

    for (const r of rewards) {
      sum += r.chance;
      if (random <= sum) {
        reward = r.amount;
        break;
      }
    }

    await db.add(`wallet_${userId}`, reward);

    const embed = new EmbedBuilder()
      .setColor('#ffd700')
      .setTitle('🎁 جعبه شانس')
      .setDescription(`شما جعبه را باز کردید و **${reward}** 🪙 پیدا کردید!`)
      .setTimestamp();

    return interaction.reply({ embeds: [embed] });
  } 
  else if (item.id === 4) { // بیمه ضد سرقت
    await db.set(`insurance_${userId}`, true);
    await db.set(`insuranceExpiry_${userId}`, Date.now() + 7 * 24 * 60 * 60 * 1000);
  } 
  else if (item.id === 5) { // نشان افتخار
    const badges = await db.get(`badges_${userId}`) || [];
    badges.push('🏆');
    await db.set(`badges_${userId}`, badges);
  } 
  else if (item.id === 6) { // چاقوی جیب‌بری
    await db.set(`thief_dagger_${userId}`, true);
    const inventory = await db.get(`inventory_${userId}`) || [];
    inventory.push({
      name: 'چاقوی جیب‌بری',
      icon: '🔪',
      durability: 10,
      price: item.price
    });
    await db.set(`inventory_${userId}`, inventory);
  } 
  else if (item.id === 7) { // ماسک نینجا
    await db.set(`ninja_mask_${userId}`, true);
    const inventory = await db.get(`inventory_${userId}`) || [];
    inventory.push({
      name: 'ماسک نینجا',
      icon: '🕶️',
      durability: 5,
      price: item.price
    });
    await db.set(`inventory_${userId}`, inventory);
  }
  else if (item.id === 8) { // دستکش نامرئی
    await db.set(`invisible_gloves_${userId}`, true);
    const inventory = await db.get(`inventory_${userId}`) || [];
    inventory.push({
      name: 'دستکش نامرئی',
      icon: '🧤',
      durability: 3,
      price: item.price
    });
    await db.set(`inventory_${userId}`, inventory);
  }
  else if (item.id === 9) { // کتاب راهنمای قفل‌شکنی
    await db.set(`skill_lockpicking_${userId}`, true);
    const skills = await db.get(`skills_${userId}`) || [];
    skills.push({
      name: 'قفل‌شکنی',
      icon: '🔓',
      level: 1,
      xp: 0
    });
    await db.set(`skills_${userId}`, skills);
  }
  else if (item.id === 10) { // سند آپارتمان کوچک
    const properties = await db.get(`properties_${userId}`) || [];
    properties.push({
      name: 'آپارتمان کوچک',
      icon: '🏠',
      dailyIncome: 100,
      securityBonus: 20, // درصد کاهش احتمال دزدی
      price: item.price,
      purchaseDate: Date.now()
    });
    await db.set(`properties_${userId}`, properties);
  }
  else if (item.id === 101 || item.id === 102 || item.id === 103) { // لوت‌باکس‌ها
    return await openLootbox(interaction, item.id);
  }
  else if (item.id === 201) { // عینک شناسایی
    await db.set(`spy_glasses_${userId}`, true);
    const inventory = await db.get(`inventory_${userId}`) || [];
    inventory.push({
      name: 'عینک شناسایی',
      icon: '🔍',
      durability: 5,
      price: item.price
    });
    await db.set(`inventory_${userId}`, inventory);
  }
  else if (item.id === 202) { // عصای جادویی
    await db.set(`magic_wand_${userId}`, true);
    const inventory = await db.get(`inventory_${userId}`) || [];
    inventory.push({
      name: 'عصای جادویی',
      icon: '🪄',
      durability: 30, // استفاده روزانه برای یک ماه
      price: item.price
    });
    await db.set(`inventory_${userId}`, inventory);
  }
  else if (item.id === 203) { // سند ویلای لوکس
    const properties = await db.get(`properties_${userId}`) || [];
    properties.push({
      name: 'ویلای لوکس',
      icon: '🏚️',
      dailyIncome: 500,
      securityBonus: 70, // درصد کاهش احتمال دزدی
      price: item.price,
      purchaseDate: Date.now()
    });
    await db.set(`properties_${userId}`, properties);
  }
  else if (item.id === 301) { // جدول تحلیل بازار
    await db.set(`market_analysis_${userId}`, true);
    await db.set(`market_analysis_expiry_${userId}`, Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 روز
  }
  else if (item.id === 302) { // اکسیر تاجر
    await db.set(`trader_elixir_${userId}`, true);
    await db.set(`trader_elixir_expiry_${userId}`, Date.now() + 24 * 60 * 60 * 1000); // 24 ساعت
  }

  const embed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('✅ خرید موفق')
    .setDescription(`شما **${item.name}** را با قیمت **${finalPrice}** 🪙 خریداری کردید!`)
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

// باز کردن لوت باکس
async function openLootbox(interaction, lootboxId) {
  const userId = interaction.user.id;
  
  // تعریف جوایز مختلف براساس نوع لوت باکس
  let rewards = [];
  let lootboxName = '';
  
  if (lootboxId === 101) { // لوت باکس برنزی
    lootboxName = '🥉 لوت‌باکس برنزی';
    rewards = [
      { type: 'coin', min: 200, max: 1000, chance: 0.6 },
      { type: 'item', item: { name: '🛡️ محافظ شخصی', id: 1 }, chance: 0.2 },
      { type: 'item', item: { name: '🔪 چاقوی جیب‌بری', id: 6 }, chance: 0.15 },
      { type: 'nothing', chance: 0.05 } // شانس خالی بودن
    ];
  } 
  else if (lootboxId === 102) { // لوت باکس نقره‌ای
    lootboxName = '🥈 لوت‌باکس نقره‌ای';
    rewards = [
      { type: 'coin', min: 1000, max: 5000, chance: 0.5 },
      { type: 'item', item: { name: '🕶️ ماسک نینجا', id: 7 }, chance: 0.2 },
      { type: 'item', item: { name: '💹 بیمه ضد سرقت', id: 4 }, chance: 0.15 },
      { type: 'item', item: { name: '🧤 دستکش نامرئی', id: 8 }, chance: 0.1 },
      { type: 'nothing', chance: 0.05 } // شانس خالی بودن
    ];
  } 
  else if (lootboxId === 103) { // لوت باکس طلایی
    lootboxName = '🥇 لوت‌باکس طلایی';
    rewards = [
      { type: 'coin', min: 5000, max: 20000, chance: 0.4 },
      { type: 'item', item: { name: '🔮 توکن VIP', id: 2 }, chance: 0.2 },
      { type: 'item', item: { name: '🧠 کتاب راهنمای قفل‌شکنی', id: 9 }, chance: 0.15 },
      { type: 'item', item: { name: '🏆 نشان افتخار', id: 5 }, chance: 0.15 },
      { type: 'jackpot', chance: 0.05 }, // شانس برنده شدن جکپات
      { type: 'nothing', chance: 0.05 } // شانس خالی بودن
    ];
  }
  
  // انتخاب جایزه با توجه به شانس
  let random = Math.random();
  let selectedReward = null;
  let sum = 0;
  
  for (const reward of rewards) {
    sum += reward.chance;
    if (random <= sum) {
      selectedReward = reward;
      break;
    }
  }
  
  // انیمیشن باز کردن لوت باکس
  const loadingEmbed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle(`🎁 در حال باز کردن ${lootboxName}...`)
    .setDescription('لطفاً صبر کنید...')
    .setTimestamp();
  
  await interaction.reply({ embeds: [loadingEmbed] });
  
  // تاخیر برای ایجاد هیجان
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // پردازش جایزه
  let resultEmbed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle(`🎁 ${lootboxName} باز شد!`)
    .setTimestamp();
  
  if (selectedReward.type === 'coin') {
    // جایزه سکه
    const amount = Math.floor(Math.random() * (selectedReward.max - selectedReward.min + 1)) + selectedReward.min;
    await db.add(`wallet_${userId}`, amount);
    
    resultEmbed.setDescription(`🎉 **تبریک!** شما **${amount}** 🪙 برنده شدید!`);
  } 
  else if (selectedReward.type === 'item') {
    // جایزه آیتم
    const item = selectedReward.item;
    
    // اضافه کردن آیتم به انبار کاربر
    if (item.id === 1) { // محافظ شخصی
      await db.set(`protection_${userId}`, true);
      await db.set(`protectionExpiry_${userId}`, Date.now() + 24 * 60 * 60 * 1000);
    } 
    else if (item.id === 2) { // توکن VIP
      await db.set(`vip_${userId}`, true);
      await db.set(`vipExpiry_${userId}`, Date.now() + 7 * 24 * 60 * 60 * 1000);
    } 
    else if (item.id === 4) { // بیمه ضد سرقت
      await db.set(`insurance_${userId}`, true);
      await db.set(`insuranceExpiry_${userId}`, Date.now() + 7 * 24 * 60 * 60 * 1000);
    } 
    else if (item.id === 5) { // نشان افتخار
      const badges = await db.get(`badges_${userId}`) || [];
      badges.push('🏆');
      await db.set(`badges_${userId}`, badges);
    } 
    else if (item.id === 6 || item.id === 7 || item.id === 8 || item.id === 9) {
      // آیتم‌های کوله‌پشتی
      const inventory = await db.get(`inventory_${userId}`) || [];
      
      if (item.id === 6) { // چاقوی جیب‌بری
        await db.set(`thief_dagger_${userId}`, true);
        inventory.push({
          name: 'چاقوی جیب‌بری',
          icon: '🔪',
          durability: 10,
          price: 1500
        });
      } 
      else if (item.id === 7) { // ماسک نینجا
        await db.set(`ninja_mask_${userId}`, true);
        inventory.push({
          name: 'ماسک نینجا',
          icon: '🕶️',
          durability: 5,
          price: 3000
        });
      } 
      else if (item.id === 8) { // دستکش نامرئی
        await db.set(`invisible_gloves_${userId}`, true);
        inventory.push({
          name: 'دستکش نامرئی',
          icon: '🧤',
          durability: 3,
          price: 2500
        });
      } 
      else if (item.id === 9) { // کتاب راهنمای قفل‌شکنی
        await db.set(`skill_lockpicking_${userId}`, true);
        const skills = await db.get(`skills_${userId}`) || [];
        skills.push({
          name: 'قفل‌شکنی',
          icon: '🔓',
          level: 1,
          xp: 0
        });
        await db.set(`skills_${userId}`, skills);
      }
      
      await db.set(`inventory_${userId}`, inventory);
    }
    
    resultEmbed.setDescription(`🎉 **تبریک!** شما آیتم **${item.name}** را برنده شدید!`);
  } 
  else if (selectedReward.type === 'jackpot') {
    // برنده شدن جکپات
    const jackpotAmount = await db.get('jackpot_amount') || 10000;
    await db.add(`wallet_${userId}`, jackpotAmount);
    await db.set('jackpot_amount', 1000); // ریست جکپات به مقدار اولیه
    
    resultEmbed
      .setColor('#ff0000')
      .setTitle('💰 **جکپات!** 💰')
      .setDescription(`🎊 **تبریک ویژه!** شما جکپات به مقدار **${jackpotAmount}** 🪙 را برنده شدید!`)
      .addFields({ name: '🤯 فوق‌العاده!', value: 'شما خوش‌شانس‌ترین کاربر امروز هستید!' });
    
    // اعلان عمومی برنده شدن جکپات
    const globalAnnouncement = new EmbedBuilder()
      .setColor('#ff0000')
      .setTitle('🔥 یک نفر جکپات را برد! 🔥')
      .setDescription(`🎊 تبریک به <@${userId}> که جکپات به مقدار **${jackpotAmount}** 🪙 را برنده شد!`)
      .setTimestamp();
    
    // در اینجا می‌توان کد ارسال پیام به کانال عمومی را اضافه کرد
  } 
  else if (selectedReward.type === 'nothing') {
    // لوت باکس خالی
    resultEmbed
      .setColor('#808080')
      .setDescription('😢 **متأسفانه** این لوت‌باکس خالی بود! شانس خود را دوباره امتحان کنید.');
  }
  
  await interaction.editReply({ embeds: [resultEmbed] });
}

// سیستم املاک
async function showRealEstateMenu(interaction) {
  const userId = interaction.user.id;
  const properties = await db.get(`properties_${userId}`) || [];
  const wallet = await db.get(`wallet_${userId}`) || 0;
  
  // لیست املاک قابل خرید
  const availableProperties = [
    { 
      id: 1, 
      name: '🏠 آپارتمان کوچک', 
      price: 20000, 
      dailyIncome: 100, 
      securityBonus: 20,
      description: 'یک آپارتمان کوچک و ساده'
    },
    { 
      id: 2, 
      name: '🏡 خانه ویلایی', 
      price: 50000, 
      dailyIncome: 250, 
      securityBonus: 40,
      description: 'یک خانه ویلایی دنج با حیاط کوچک'
    },
    { 
      id: 3, 
      name: '🏘️ مجتمع آپارتمانی', 
      price: 100000, 
      dailyIncome: 600, 
      securityBonus: 30,
      description: 'مجموعه‌ای از آپارتمان‌ها برای اجاره'
    },
    { 
      id: 4, 
      name: '🏚️ ویلای لوکس', 
      price: 250000, 
      dailyIncome: 1500, 
      securityBonus: 70,
      description: 'ویلای لوکس با محوطه اختصاصی و استخر'
    },
    { 
      id: 5, 
      name: '🏢 ساختمان تجاری', 
      price: 500000, 
      dailyIncome: 3000, 
      securityBonus: 50,
      description: 'ساختمان تجاری با مغازه‌های متعدد'
    }
  ];
  
  // لیست املاک کاربر
  let userPropertiesList = '';
  let totalDailyIncome = 0;
  let totalSecurityBonus = 0;
  
  if (properties.length > 0) {
    userPropertiesList = '**املاک شما:**\n\n';
    properties.forEach((prop, index) => {
      const purchaseDate = new Date(prop.purchaseDate);
      const daysOwned = Math.floor((Date.now() - prop.purchaseDate) / (1000 * 60 * 60 * 24));
      userPropertiesList += `${index + 1}. ${prop.icon} **${prop.name}**\n` +
        `درآمد روزانه: **${prop.dailyIncome}** 🪙\n` +
        `امنیت: **${prop.securityBonus}%**\n` +
        `خریداری شده در: ${purchaseDate.toLocaleDateString('fa-IR')}\n` +
        `مالکیت: **${daysOwned}** روز\n\n`;
        
      totalDailyIncome += prop.dailyIncome;
      totalSecurityBonus += prop.securityBonus;
    });
    
    // محدود کردن بونوس امنیتی به حداکثر 90%
    totalSecurityBonus = Math.min(totalSecurityBonus, 90);
  } else {
    userPropertiesList = '**شما هنوز هیچ ملکی ندارید!**\n\n';
  }
  
  // ساخت embed
  const realEstateEmbed = new EmbedBuilder()
    .setColor('#2ecc71')
    .setTitle('🏘️ سیستم املاک')
    .setDescription('املاک بخرید، درآمد روزانه کسب کنید و از امنیت بیشتر بهره‌مند شوید!')
    .addFields(
      { name: '💰 موجودی کیف پول', value: `**${wallet}** 🪙`, inline: true },
      { name: '📊 درآمد روزانه از املاک', value: `**${totalDailyIncome}** 🪙`, inline: true },
      { name: '🛡️ بونوس امنیتی', value: `**${totalSecurityBonus}%**`, inline: true },
      { name: '\u200B', value: userPropertiesList, inline: false },
      { name: '🏢 املاک قابل خرید', value: 
        availableProperties.map(p => 
          `**${p.id}.** ${p.name} - **${p.price}** 🪙\n` +
          `درآمد روزانه: **${p.dailyIncome}** 🪙 | امنیت: **${p.securityBonus}%**\n` +
          `${p.description}`
        ).join('\n\n'), 
        inline: false 
      }
    )
    .setFooter({ text: 'برای خرید ملک، از دستور /buy-property [شماره ملک] استفاده کنید | درآمد روزانه به طور خودکار به کیف پول شما واریز می‌شود.' });
  
  // ساخت دکمه‌ها
  const propertyRow1 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('collect_property_income')
        .setLabel('دریافت درآمد')
        .setStyle(ButtonStyle.Success)
        .setEmoji('💰')
        .setDisabled(totalDailyIncome === 0),
      new ButtonBuilder()
        .setCustomId('view_property_details')
        .setLabel('جزئیات املاک')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🔍')
        .setDisabled(properties.length === 0)
    );
  
  const propertyRow2 = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('buy_property_menu')
        .setLabel('خرید ملک')
        .setStyle(ButtonStyle.Primary)
        .setEmoji('🏠'),
      new ButtonBuilder()
        .setCustomId('sell_property_menu')
        .setLabel('فروش ملک')
        .setStyle(ButtonStyle.Danger)
        .setEmoji('💱')
        .setDisabled(properties.length === 0)
    );
  
  const backRow = new ActionRowBuilder()
    .addComponents(
      new ButtonBuilder()
        .setCustomId('economy_menu')
        .setLabel('بازگشت')
        .setStyle(ButtonStyle.Secondary)
        .setEmoji('⬅️')
    );
  
  await interaction.update({ embeds: [realEstateEmbed], components: [propertyRow1, propertyRow2, backRow] });
}

async function showInventory(interaction) {
  const userId = interaction.user.id;

  // Check for active items
  const hasProtection = await db.get(`protection_${userId}`) || false;
  const protectionExpiry = await db.get(`protectionExpiry_${userId}`) || 0;

  const hasVIP = await db.get(`vip_${userId}`) || false;
  const vipExpiry = await db.get(`vipExpiry_${userId}`) || 0;

  const hasInsurance = await db.get(`insurance_${userId}`) || false;
  const insuranceExpiry = await db.get(`insuranceExpiry_${userId}`) || 0;

  const hasDagger = await db.get(`thief_dagger_${userId}`) || false;
  const hasNinjaMask = await db.get(`ninja_mask_${userId}`) || false;

  const badges = await db.get(`badges_${userId}`) || [];
  const inventory = await db.get(`inventory_${userId}`) || [];

  // Create inventory description
  let description = '**آیتم‌های فعال:**\n\n';

  if (hasProtection && protectionExpiry > Date.now()) {
    const timeLeft = Math.floor((protectionExpiry - Date.now()) / (1000 * 60 * 60));
    description += `🛡️ **محافظ شخصی** - منقضی در ${timeLeft} ساعت دیگر\n`;
  }

  if (hasVIP && vipExpiry > Date.now()) {
    const timeLeft = Math.floor((vipExpiry - Date.now()) / (1000 * 60 * 60 * 24));
    description += `🔮 **توکن VIP** - منقضی در ${timeLeft} روز دیگر\n`;
  }

  if (hasInsurance && insuranceExpiry > Date.now()) {
    const timeLeft = Math.floor((insuranceExpiry - Date.now()) / (1000 * 60 * 60 * 24));
    description += `💹 **بیمه ضد سرقت** - منقضی در ${timeLeft} روز دیگر\n`;
  }

  // Add pickpocketing items
  // Find dagger in inventory and display durability
  const daggerItem = inventory.find(item => item.name === 'چاقوی جیب‌بری');
  if (hasDagger && daggerItem) {
    description += `🔪 **چاقوی جیب‌بری** - دوام: ${daggerItem.durability}/10 استفاده\n`;
  }

  // Find ninja mask in inventory and display durability
  const maskItem = inventory.find(item => item.name === 'ماسک نینجا');
  if (hasNinjaMask && maskItem) {
    description += `🕶️ **ماسک نینجا** - دوام: ${maskItem.durability}/5 استفاده\n`;
  }

  // Add section for other items
  if (inventory.length > 0) {
    const otherItems = inventory.filter(item => 
      item.name !== 'چاقوی جیب‌بری' && 
      item.name !== 'ماسک نینجا'
    );
    
    if (otherItems.length > 0) {
      description += '\n**سایر آیتم‌های موجود:**\n';
      otherItems.forEach((item, index) => {
        description += `${item.icon} **${item.name}**`;
        if (item.durability) {
          description += ` - دوام: ${item.durability} استفاده`;
        }
        description += '\n';
      });
    }
  }

  if (badges.length > 0) {
    description += `\n**نشان‌های افتخار:**\n${badges.join(' ')}`;
  }

  // Check if user has been banned from pickpocketing
  const pickpocketBanned = await db.get(`pickpocketBanned_${userId}`) || false;
  const pickpocketBanExpiry = await db.get(`pickpocketBanExpiry_${userId}`) || 0;
  
  if (pickpocketBanned && pickpocketBanExpiry > Date.now()) {
    const timeLeft = Math.floor((pickpocketBanExpiry - Date.now()) / (1000 * 60 * 60));
    description += `\n\n⚠️ **محرومیت از جیب‌زنی:**\nشما به مدت ${timeLeft} ساعت دیگر از جیب‌زنی محروم هستید.`;
  }

  // Display daily pickpocket attempts
  const dailyPickpocketCount = await db.get(`dailyPickpocket_${userId}`) || 0;
  if (dailyPickpocketCount > 0) {
    description += `\n\n📊 **آمار جیب‌زنی امروز:**\n${dailyPickpocketCount}/3 جیب‌زنی انجام شده`;
  }

  if (description === '**آیتم‌های فعال:**\n\n') {
    description += 'شما هیچ آیتم فعالی ندارید.';
  }

  const embed = new EmbedBuilder()
    .setColor('#9b59b6')
    .setTitle(`🎒 کوله‌پشتی ${interaction.user.username}`)
    .setDescription(description)
    .setThumbnail(interaction.user.displayAvatarURL())
    .setFooter({ text: 'از فروشگاه آیتم‌های بیشتری بخرید!' })
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

async function showProfile(interaction) {
  const userId = interaction.user.id;

  // Get user data
  const wallet = await db.get(`wallet_${userId}`) || 0;
  const bank = await db.get(`bank_${userId}`) || 0;
  const hasVIP = await db.get(`vip_${userId}`) || false;
  const vipExpiry = await db.get(`vipExpiry_${userId}`) || 0;
  const badges = await db.get(`badges_${userId}`) || [];

  // Create basic profile
  const embed = new EmbedBuilder()
    .setColor(hasVIP && vipExpiry > Date.now() ? '#ffd700' : '#0099ff')
    .setTitle(`${hasVIP && vipExpiry > Date.now() ? '👑 ' : ''}پروفایل ${interaction.user.username}`)
    .setThumbnail(interaction.user.displayAvatarURL())
    .addFields(
      { name: '💰 مجموع دارایی', value: `${wallet + bank} 🪙`, inline: true },
      { name: '👛 کیف پول', value: `${wallet} 🪙`, inline: true },
      { name: '🏦 بانک', value: `${bank} 🪙`, inline: true }
    )
    .setTimestamp();

  // Add badges if any
  if (badges.length > 0) {
    embed.addFields({ name: '🏆 نشان‌ها', value: badges.join(' ') });
  }

  // Add VIP status if active
  if (hasVIP && vipExpiry > Date.now()) {
    const timeLeft = Math.floor((vipExpiry - Date.now()) / (1000 * 60 * 60 * 24));
    embed.addFields({ name: '👑 وضعیت VIP', value: `فعال (${timeLeft} روز باقی‌مانده)` });
  }

  await interaction.reply({ embeds: [embed] });
}

async function showLeaderboard(interaction) {
  // Get all user IDs from the database with wallet and bank
  const walletEntries = await db.all();

  // Filter wallet entries and calculate total balance
  const walletPattern = /^wallet_(\d+)$/;
  const userBalances = [];

  for (const entry of walletEntries) {
    const match = entry.id.match(walletPattern);
    if (match) {
      const userId = match[1];
      const wallet = entry.value || 0;
      const bank = await db.get(`bank_${userId}`) || 0;
      const total = wallet + bank;

      if (total > 0) {
        userBalances.push({ userId, total });
      }
    }
  }

  // Sort by total balance, descending
  userBalances.sort((a, b) => b.total - a.total);

  // Create the leaderboard embed
  const embed = new EmbedBuilder()
    .setColor('#ffd700')
    .setTitle('💰 لیدربورد ثروتمندترین کاربران')
    .setTimestamp();

  // Add top 10 users to the leaderboard
  let description = '';

  for (let i = 0; i < Math.min(10, userBalances.length); i++) {
    const { userId, total } = userBalances[i];

    try {
      const user = await client.users.fetch(userId);
      description += `**${i + 1}.** ${user.tag} - **${total}** 🪙\n`;
    } catch (error) {
      description += `**${i + 1}.** کاربر ناشناس - **${total}** 🪙\n`;
    }
  }

// Helper function to reset daily pickpocket counters
async function resetDailyPickpocketCounters() {
  const dailyCounters = await db.all();
  const dailyPickpocketPattern = /^dailyPickpocket_(\d+)$/;

  for (const entry of dailyCounters) {
    const match = entry.id.match(dailyPickpocketPattern);
    if (match) {
      await db.delete(entry.id);
      console.log(`Reset daily pickpocket counter for user ${match[1]}`);
    }
  }

  console.log('All daily pickpocket counters have been reset.');
}


  if (description === '') {
    description = 'هنوز هیچ کاربری سکه‌ای ندارد!';
  }

  embed.setDescription(description);
  await interaction.reply({ embeds: [embed] });
}

async function transferMoney(interaction, targetUser, amountStr) {
  if (!targetUser || !amountStr) {
    return interaction.reply({ content: '❌ لطفاً کاربر مورد نظر و مقدار انتقال را وارد کنید!', ephemeral: true });
  }

  let amount = amountStr;

  // Cannot transfer to yourself or bots
  if (targetUser.id === interaction.user.id) 
    return interaction.reply({ content: '❌ شما نمی‌توانید به خودتان سکه انتقال دهید!', ephemeral: true });

  if (targetUser.bot) 
    return interaction.reply({ content: '❌ شما نمی‌توانید به ربات‌ها سکه انتقال دهید!', ephemeral: true });

  const userId = interaction.user.id;
  const wallet = await db.get(`wallet_${userId}`) || 0;

  // Validate transfer amount
  if (amount === 'all') {
    amount = wallet;
  } else {
    amount = parseInt(amount);
    if (isNaN(amount)) return interaction.reply({ content: '❌ لطفاً مقدار معتبری وارد کنید!', ephemeral: true });
  }

  if (amount <= 0) return interaction.reply({ content: '❌ مقدار انتقال باید بیشتر از صفر باشد!', ephemeral: true });
  if (amount > wallet) return interaction.reply({ content: '❌ شما سکه کافی در کیف پول خود ندارید!', ephemeral: true });

  // Process transfer
  await db.sub(`wallet_${userId}`, amount);
  await db.add(`wallet_${targetUser.id}`, amount);

  const embed = new EmbedBuilder()
    .setColor('#00ff00')
    .setTitle('💸 انتقال موفق')
    .setDescription(`شما ${amount} 🪙 به <@${targetUser.id}> انتقال دادید!`)
    .setTimestamp();

  await interaction.reply({ embeds: [embed] });
}

// Helper function for applying bank interest
async function applyBankInterest() {
  const bankEntries = await db.all();
  const bankPattern = /^bank_(\d+)$/;

  for (const entry of bankEntries) {
    const match = entry.id.match(bankPattern);
    if (match) {
      const userId = match[1];
      const bank = entry.value || 0;

      if (bank > 0) {
        const interest = Math.floor(bank * BANK_INTEREST_RATE);
        if (interest > 0) {
          await db.add(`bank_${userId}`, interest);
        }
      }
    }
  }

  console.log('Applied monthly bank interest to all accounts.');
}

// Help command
function sendHelpEmbed(message) {
  const embed = new EmbedBuilder()
    .setColor('#0099ff')
    .setTitle('💰 راهنمای ربات اقتصادی')
    .setDescription('لیست دستورات قابل استفاده:')
    .addFields(
      { name: '🏦 دستورات اصلی', value: 
        '`!balance` - مشاهده موجودی کیف پول و بانک\n' +
        '`!daily` - دریافت سکه روزانه\n' +
        '`!deposit <مقدار>` - واریز به بانک\n' +
        '`!withdraw <مقدار>` - برداشت از بانک\n' +
        '`!transfer @user <مقدار>` - انتقال سکه به کاربر دیگر'
      },
      { name: '🎮 بازی‌ها', value: 
        '`!coinflip <مقدار> <شیر/خط>` - شیر یا خط\n' +
        '`!dice <مقدار> <1-6>` - تاس\n' +
        '`!rob @user` - دزدی از کاربر دیگر'
      },
      { name: '🛒 فروشگاه و آیتم‌ها', value: 
        '`!shop` - مشاهده فروشگاه\n' +
        '`!buy <شماره آیتم>` - خرید آیتم\n' +
        '`!inventory` - مشاهده کوله‌پشتی'
      },
      { name: '📊 اطلاعات و آمار', value: 
        '`!profile` - مشاهده پروفایل\n' +
        '`!leaderboard` - مشاهده لیدربورد'
      }
    )
    .setFooter({ text: 'از !help برای دیدن این راهنما استفاده کنید.' });

  message.reply({ embeds: [embed] });
}

// Login to Discord with your app's token
console.log("Attempting to login with Discord token...");
console.log("Token environment variable exists:", !!process.env.TOKEN);
// اگر توکن به درستی در محیط وجود داشته باشد، این پیام نمایش داده می‌شود
// اگر undefined یا خالی باشد، مشکل در Secrets است

client.login(process.env.TOKEN)
  .then(() => {
    console.log("Successfully logged in to Discord!");
  })
  .catch(error => {
    console.error("Failed to login to Discord:", error.message);
    console.log("Please make sure your TOKEN is correctly set in Secrets.");

    // چک کردن مشکلات رایج
    if (error.message.includes("invalid token")) {
      console.log("توکن نامعتبر است. لطفاً یک توکن جدید از پنل دیسکورد تهیه کنید.");
    }
    if (error.message.includes("disallowed intents")) {
      console.log("مشکل با Intents دیسکورد. لطفاً به پنل دیسکورد بروید و Intents را فعال کنید.");
    }
  });