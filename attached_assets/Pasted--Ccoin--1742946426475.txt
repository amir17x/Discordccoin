### مستند جامع و پیشرفته برای ارتقاء پنل ادمین تحت وب ربات دیسکورد Ccoin

#### مقدمه
این مستند با هدف توسعه و بهبود پنل ادمین تحت وب ربات دیسکورد Ccoin طراحی شده است. با توجه به تصاویر منوی اصلی ربات دیسکورد و منوی فعلی پنل ادمین، هدف این است که تمام بخش‌های ربات (اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، فعالیت‌ها، رتبه‌بندی‌ها، و تنظیمات) در پنل ادمین تحت کنترل و مدیریت کامل قرار گیرند. این مستند شامل تحلیل بخش‌های جدید، ادغام با بخش‌های قبلی، طراحی UI/UX پیشرفته، و پیاده‌سازی کدهای لازم برای ایجاد یک پنل ادمین جامع، زیبا، و کارآمد است.

---

### 1. تحلیل بخش‌های ربات دیسکورد و ادغام با منوی فعلی

#### 1.1. بخش‌های فعلی پنل ادمین (بر اساس مستند قبلی)
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال).
- **👥 کاربرها:** مدیریت کاربرها (نمایش، ویرایش، حذف، اضافه کردن، تغییر موجودی).
- **💰 اقتصاد:** مدیریت اقتصاد (نمایش تراکنش‌ها، تغییر موجودی، تنظیم نرخ تبدیل).
- **🏰 کلن‌ها:** مدیریت کلن‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎯 کوئست‌ها:** مدیریت کوئست‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🛒 محصولات:** مدیریت محصولات (نمایش، ایجاد، ویرایش، حذف، خرید).
- **🎮 بازی‌ها:** مدیریت بازی‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎁 جایزه‌ها:** مدیریت جایزه‌ها (نمایش، ایجاد، ویرایش، حذف).
- **📜 لاگ‌ها:** نمایش لاگ فعالیت‌ها.
- **⚙️ تنظیمات:** تنظیمات ربات (نرخ تبدیل، تنظیمات بازی‌ها، جایزه‌ها).
- **🚪 خروج:** خروج از پنل.

#### 1.2. بخش‌های جدید شناسایی‌شده از منوی ربات دیسکورد
با بررسی تصاویر جدید منوی ربات دیسکورد، بخش‌ها و قابلیت‌های زیر شناسایی شدند که باید به پنل ادمین اضافه شوند:

- **اطلاعات کاربر (`/bal`):**
  - نمایش موجودی کاربر (سی‌کوین، کریستال، بانک، پول نقد، رتبه، پیام‌ها، فعالیت‌ها).
  - نمایش جزئیات آیتم‌های کاربر (مانند Wallet Lock، Voice Booster).
  - رتبه‌بندی کاربر (Top 10 بر اساس سی‌کوین، کریستال، پیام‌ها).
- **بانک (`/bank`):**
  - نمایش موجودی بانک کاربر.
  - امکان واریز و برداشت از بانک.
- **محصولات (`/shop`):**
  - نمایش محصولات با جزئیات بیشتر (مانند Legendary Role، Voice Booster، Wallet Lock، Lottery Ticket، Mystery Box Key، Special Role).
  - مدیریت شانس‌ها (شانس سرقت، شانس لجندری).
  - مدیریت تخفیف‌ها.
- **سرقت (`/rob`):**
  - نمایش تاریخچه سرقت‌ها.
  - تنظیم شانس سرقت و محدودیت‌ها.
- **جایزه‌ها (`/reward`):**
  - نمایش جایزه‌های روزانه، هفتگی، و ویژه.
  - تخصیص جایزه به کاربر.
- **فعالیت‌ها (`/active`):**
  - نمایش فعالیت‌های کاربر (پیام‌ها، کوئست‌ها، بازی‌ها).
- **بازی‌ها (`/game`):**
  - نمایش بازی‌ها (مانند حدس عدد).
  - مدیریت جوایز بازی‌ها.
- **کلن‌ها (`/clan`):**
  - نمایش جزئیات کلن‌ها (اعضا، سی‌کوین کلن، رتبه).
  - مدیریت نقش‌ها (Leader، Co-Leader، Elder، Member).
- **رتبه‌بندی (`/top`):**
  - نمایش رتبه‌بندی کاربران بر اساس معیارهای مختلف (سی‌کوین، کریستال، پیام‌ها، فعالیت‌ها).
- **کوئست‌ها (`/quest`):**
  - نمایش کوئست‌های فعال و تکمیل‌شده.
  - مدیریت جوایز کوئست‌ها.
- **سایر قابلیت‌ها:**
  - نمایش لاگ‌های پیشرفته‌تر (مانند لاگ سرقت‌ها، خریدها، فعالیت‌ها).
  - تنظیمات پیشرفته‌تر (مانند تنظیمات تخفیف‌ها، شانس‌ها، و نقش‌ها).

#### 1.3. ادغام بخش‌های جدید با منوی فعلی
برای ادغام بخش‌های جدید با منوی فعلی، منوی پنل ادمین به صورت زیر به‌روزرسانی می‌شود:

- **📊 داشبورد:**  
  - اضافه کردن آمارهای جدید: تعداد کوئست‌های فعال، فعالیت‌های اخیر، رتبه‌بندی‌های برتر.
- **👥 کاربرها:**  
  - اضافه کردن جزئیات آیتم‌های کاربر (مانند Wallet Lock، Voice Booster).
  - نمایش تاریخچه سرقت‌ها و فعالیت‌ها.
- **💰 اقتصاد:**  
  - اضافه کردن مدیریت بانک (واریز، برداشت).
  - نمایش تاریخچه سرقت‌ها و تنظیم شانس سرقت.
- **🏰 کلن‌ها:**  
  - اضافه کردن مدیریت نقش‌ها (Leader، Co-Leader، Elder، Member).
  - نمایش رتبه‌بندی کلن‌ها.
- **🎯 کوئست‌ها:**  
  - اضافه کردن کوئست‌های فعال و تکمیل‌شده.
- **🛒 محصولات:**  
  - اضافه کردن محصولات جدید (Legendary Role، Lottery Ticket، Mystery Box Key، Special Role).
  - مدیریت شانس‌ها و تخفیف‌ها.
- **🎮 بازی‌ها:**  
  - اضافه کردن بازی‌های جدید (مانند حدس عدد).
- **🎁 جایزه‌ها:**  
  - اضافه کردن جایزه‌های روزانه، هفتگی، و ویژه.
- **📊 رتبه‌بندی‌ها:**  
  - بخش جدید برای نمایش رتبه‌بندی‌ها (بر اساس سی‌کوین، کریستال، پیام‌ها).
- **📜 لاگ‌ها:**  
  - اضافه کردن لاگ‌های سرقت، خرید، و فعالیت‌ها.
- **⚙️ تنظیمات:**  
  - اضافه کردن تنظیمات شانس‌ها، تخفیف‌ها، و نقش‌ها.
- **🚪 خروج:**  
  - بدون تغییر.

---

### 2. طراحی پیشرفته منوی پنل ادمین

#### 2.1. منوی جدید پیشنهادی
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال، کوئست‌ها، فعالیت‌ها، رتبه‌بندی‌ها).
- **👥 کاربرها:** مدیریت کاربرها (نمایش، ویرایش، حذف، اضافه کردن، تغییر موجودی، آیتم‌ها، تاریخچه سرقت).
- **💰 اقتصاد:** مدیریت اقتصاد (تراکنش‌ها، بانک، سرقت، نرخ تبدیل).
- **🏰 کلن‌ها:** مدیریت کلن‌ها (نمایش، ایجاد، ویرایش، حذف، نقش‌ها، رتبه‌بندی).
- **🎯 کوئست‌ها:** مدیریت کوئست‌ها (نمایش، ایجاد، ویرایش، حذف، کوئست‌های فعال).
- **🛒 محصولات:** مدیریت محصولات (نمایش، ایجاد، ویرایش، حذف، شانس‌ها، تخفیف‌ها).
- **🎮 بازی‌ها:** مدیریت بازی‌ها (نمایش، ایجاد، ویرایش، حذف، جوایز).
- **🎁 جایزه‌ها:** مدیریت جایزه‌ها (نمایش، ایجاد، ویرایش، حذف، جایزه‌های روزانه/هفتگی).
- **📊 رتبه‌بندی‌ها:** نمایش رتبه‌بندی‌ها (سی‌کوین، کریستال، پیام‌ها، فعالیت‌ها).
- **📜 لاگ‌ها:** نمایش لاگ‌ها (فعالیت‌ها، سرقت‌ها، خریدها، کوئست‌ها).
- **⚙️ تنظیمات:** تنظیمات پیشرفته (نرخ تبدیل، شانس‌ها، تخفیف‌ها، نقش‌ها، تم).
- **🚪 خروج:** خروج از پنل.

#### 2.2. قابلیت‌های پیشرفته در هر بخش
- **📊 داشبورد:**  
  - کارت‌های آماری: تعداد کاربرها، کلن‌ها، سی‌کوین کل، کریستال کل، کوئست‌های فعال، فعالیت‌های اخیر.
  - نمودارها: فعالیت روزانه، تراکنش‌ها، رتبه‌بندی‌ها.
  - نمایش رتبه‌بندی‌های برتر (Top 5 کاربر و کلن).
- **👥 کاربرها:**  
  - نمایش جزئیات کامل کاربر (سی‌کوین، کریستال، بانک، آیتم‌ها، فعالیت‌ها، پیام‌ها).
  - نمایش تاریخچه سرقت‌ها (موفق/ناموفق).
  - مدیریت آیتم‌ها (اضافه/حذف کردن آیتم‌هایی مثل Wallet Lock).
  - قابلیت فیلتر و جستجو (بر اساس نام، آیدی، رتبه).
  - رتبه‌بندی کاربران (Top 10 بر اساس سی‌کوین، کریستال، پیام‌ها).
- **💰 اقتصاد:**  
  - نمایش تراکنش‌ها (سرقت، انتقال، خرید، واریز/برداشت از بانک).
  - مدیریت بانک (واریز، برداشت، تنظیم محدودیت‌ها).
  - تنظیم شانس سرقت (برای هر آیتم، مانند Wallet Lock).
  - تنظیم نرخ تبدیل (سی‌کوین به کریستال و بالعکس).
  - نمایش تاریخچه سرقت‌ها (کاربر، مقدار، موفقیت/شکست).
- **🏰 کلن‌ها:**  
  - نمایش جزئیات کلن (اعضا، سی‌کوین کلن، رتبه).
  - مدیریت نقش‌ها (Leader، Co-Leader، Elder، Member).
  - رتبه‌بندی کلن‌ها (بر اساس سی‌کوین، اعضا).
  - قابلیت ایجاد، ویرایش، و حذف کلن.
- **🎯 کوئست‌ها:**  
  - نمایش کوئست‌های فعال و تکمیل‌شده.
  - مدیریت کوئست‌ها (ایجاد، ویرایش، حذف).
  - تخصیص کوئست به کاربر یا کلن.
  - نمایش پیشرفت کوئست‌ها (درصد تکمیل).
- **🛒 محصولات:**  
  - نمایش محصولات با جزئیات (نام، قیمت، شانس سرقت، شانس لجندری، تخفیف).
  - مدیریت محصولات (ایجاد، ویرایش، حذف).
  - تنظیم شانس‌ها (مانند شانس لجندری برای Legendary Role).
  - تنظیم تخفیف‌ها (برای هر محصول یا دسته‌ای از محصولات).
  - خرید محصول برای کاربر.
- **🎮 بازی‌ها:**  
  - نمایش بازی‌ها (مانند حدس عدد، لاتاری).
  - مدیریت بازی‌ها (ایجاد، ویرایش، حذف).
  - تنظیم جوایز بازی‌ها (سی‌کوین، کریستال، آیتم).
- **🎁 جایزه‌ها:**  
  - نمایش جایزه‌های روزانه، هفتگی، و ویژه.
  - مدیریت جایزه‌ها (ایجاد، ویرایش، حذف).
  - تخصیص جایزه به کاربر یا کلن.
  - تنظیم دوره‌های جایزه (روزانه، هفتگی).
- **📊 رتبه‌بندی‌ها:**  
  - نمایش رتبه‌بندی‌ها (سی‌کوین، کریستال، پیام‌ها، فعالیت‌ها).
  - فیلتر بر اساس معیار (روزانه، هفتگی، کلی).
  - نمایش رتبه‌بندی کلن‌ها.
- **📜 لاگ‌ها:**  
  - نمایش لاگ‌های پیشرفته (فعالیت‌ها، سرقت‌ها، خریدها، کوئست‌ها).
  - فیلتر بر اساس تاریخ، نوع فعالیت، کاربر، یا کلن.
- **⚙️ تنظیمات:**  
  - تنظیمات اقتصاد (نرخ تبدیل، شانس سرقت، محدودیت‌های بانک).
  - تنظیمات محصولات (شانس‌ها، تخفیف‌ها).
  - تنظیمات کلن‌ها (نقش‌ها، محدودیت‌ها).
  - تنظیمات جایزه‌ها (دوره، مقدار).
  - تنظیمات ربات (وضعیت، آپتایم، مصرف حافظه).
  - تغییر تم (Dark/Light/Glassmorphism).

#### 2.3. بهبود طراحی UI/UX
- **تم پیشرفته:**  
  - استفاده از افکت شیشه‌ای (Glassmorphism) با گرادیانت‌های زیبا.
  - تم‌های قابل تغییر (Dark، Light، Custom).
- **نوار کناری (Sidebar):**  
  - لوگوی ربات (Ccoin Bot).
  - نام ادمین (whysiks).
  - منو با آیکون‌های جذاب و انیمیشن‌ها (Hover، Click).
- **هدر (Header):**  
  - نام ادمین و آواتار.
  - دکمه تغییر تم (Dark/Light/Glass).
  - نمایش اعلان‌ها (مانند فعالیت‌های اخیر).
  - دکمه خروج (Logout).
- **بخش اصلی (Main Content):**  
  - کارت‌های آماری با انیمیشن (Hover، Fade-in).
  - جداول تعاملی با قابلیت جستجو، فیلتر، و مرتب‌سازی.
  - نمودارهای دینامیک (Chart.js) برای نمایش آمار.
  - فرم‌های پیشرفته با اعتبارسنجی (Validation).

#### 2.4. نمونه طراحی منو
نمونه متنی از منوی جدید با آیکون‌ها و افکت‌ها:

```
[Sidebar]
- Logo: Ccoin Bot (💰)
- Admin: whysiks (👤)
- 📊 داشبورد (Hover: Scale 1.1)
- 👥 کاربرها (Hover: Scale 1.1)
- 💰 اقتصاد (Hover: Scale 1.1)
- 🏰 کلن‌ها (Hover: Scale 1.1)
- 🎯 کوئست‌ها (Hover: Scale 1.1)
- 🛒 محصولات (Hover: Scale 1.1)
- 🎮 بازی‌ها (Hover: Scale 1.1)
- 🎁 جایزه‌ها (Hover: Scale 1.1)
- 📊 رتبه‌بندی‌ها (Hover: Scale 1.1)
- 📜 لاگ‌ها (Hover: Scale 1.1)
- ⚙️ تنظیمات (Hover: Scale 1.1)
- 🚪 خروج (Hover: Scale 1.1)

[Header]
- whysiks (Avatar) | 🔔 اعلان‌ها (3) | 🌙 تم شیشه‌ای | خروج
```

---

### 3. پیاده‌سازی کد

#### 3.1. نصب پکیج‌های مورد نیاز
پکیج‌های زیر برای توسعه پنل نصب می‌شوند:

```bash
# برای بک‌اند
npm install express express-session discord-oauth2 sqlite3 discord.js

# برای فرانت‌اند (توی پوشه client)
cd client
npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons react-router-dom framer-motion
```

#### 3.2. ساختار پروژه
ساختار پروژه به صورت زیر به‌روزرسانی می‌شود:

```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های API
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   ├── bot.ts          # ربات دیسکورد
├── client/
│   ├── src/
│   │   ├── assets/
│   │   │   ├── theme/
│   │   │   │   ├── colors.js
│   │   │   │   └── typography.js
│   │   ├── components/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── GlassCard.tsx
│   │   │   ├── DataTable.tsx
│   │   │   ├── Chart.tsx
│   │   │   └── Notification.tsx
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Users.tsx
│   │   │   ├── Economy.tsx
│   │   │   ├── Clans.tsx
│   │   │   ├── Quests.tsx
│   │   │   ├── Products.tsx
│   │   │   ├── Games.tsx
│   │   │   ├── Rewards.tsx
│   │   │   ├── Rankings.tsx
│   │   │   ├── Logs.tsx
│   │   │   └── Settings.tsx
│   │   ├── App.tsx
│   │   ├── index.tsx
│   │   ├── routes.tsx
│   │   └── styles.css
│   ├── package.json
│   └── vite.config.ts
├── package.json
└── .replit
```

#### 3.3. تنظیمات تم (client/src/assets/theme/colors.js)
فایل رنگ‌ها برای تم پیشرفته:

```javascript
const colors = {
  background: "linear-gradient(135deg, #1A1F37 0%, #2A2E45 100%)",
  card: "rgba(255, 255, 255, 0.1)",
  cardHover: "rgba(255, 255, 255, 0.15)",
  text: "#FFFFFF",
  primary: "#7289DA",
  secondary: "#3B82F6",
  accent: "#10B981",
  warning: "#F59E0B",
  error: "#EF4444",
  glass: "rgba(255, 255, 255, 0.05)",
};

export default colors;
```

#### 3.4. استایل‌های شیشه‌ای (client/src/styles.css)
استایل‌های پیشرفته با افکت شیشه‌ای و انیمیشن‌ها:

```css
.glass {
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(12px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
  transition: transform 0.3s ease, background 0.3s ease;
}

.glass:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: scale(1.02);
}

body {
  background: linear-gradient(135deg, #1A1F37 0%, #2A2E45 100%);
  color: #FFFFFF;
  font-family: 'Vazirmatn', sans-serif;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 12px;
  text-align: right;
}

th {
  background: rgba(255, 255, 255, 0.1);
}

tr:hover {
  background: rgba(255, 255, 255, 0.05);
}
```

#### 3.5. کامپوننت Sidebar (client/src/components/Sidebar.tsx)
نوار کناری با انیمیشن‌های پیشرفته:

```tsx
import { Link, useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { FaChartBar, FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaShoppingCart, FaGamepad, FaGift, FaTrophy, FaFileAlt, FaCog, FaSignOutAlt } from "react-icons/fa";

const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: "/dashboard", label: "داشبورد", icon: <FaChartBar /> },
    { path: "/users", label: "کاربرها", icon: <FaUsers /> },
    { path: "/economy", label: "اقتصاد", icon: <FaMoneyBillWave /> },
    { path: "/clans", label: "کلن‌ها", icon: <FaShieldAlt /> },
    { path: "/quests", label: "کوئست‌ها", icon: <FaTasks /> },
    { path: "/products", label: "محصولات", icon: <FaShoppingCart /> },
    { path: "/games", label: "بازی‌ها", icon: <FaGamepad /> },
    { path: "/rewards", label: "جایزه‌ها", icon: <FaGift /> },
    { path: "/rankings", label: "رتبه‌بندی‌ها", icon: <FaTrophy /> },
    { path: "/logs", label: "لاگ‌ها", icon: <FaFileAlt /> },
    { path: "/settings", label: "تنظیمات", icon: <FaCog /> },
    { path: "/logout", label: "خروج", icon: <FaSignOutAlt /> },
  ];

  return (
    <motion.aside
      initial={{ x: 100 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.5 }}
      className="fixed top-0 right-0 w-64 h-full glass p-4"
    >
      <div className="text-center mb-8">
        <motion.img
          src="/logo.png"
          alt="Ccoin Bot"
          className="w-20 mx-auto"
          whileHover={{ scale: 1.1 }}
        />
        <h2 className="text-2xl font-bold mt-3">ربات سی‌کوین</h2>
        <p className="text-gray-400">ادمین: whysiks</p>
      </div>
      <nav>
        {menuItems.map((item) => (
          <motion.div
            key={item.path}
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
          >
            <Link
              to={item.path}
              className={`flex items-center space-x-2 py-3 px-4 rounded mb-2 ${
                location.pathname === item.path ? "bg-primary" : "hover:bg-gray-700"
              }`}
            >
              {item.icon}
              <span>{item.label}</span>
            </Link>
          </motion.div>
        ))}
      </nav>
    </motion.aside>
  );
};

export default Sidebar;
```

#### 3.6. کامپوننت Header (client/src/components/Header.tsx)
هدر با اعلان‌ها و تم‌های پیشرفته:

```tsx
import { useState } from "react";
import { motion } from "framer-motion";
import { FaMoon, FaSignOutAlt, FaBell } from "react-icons/fa";

const Header = () => {
  const [theme, setTheme] = useState("glass");
  const [notifications] = useState([
    { id: 1, message: "کاربر جدید ثبت شد" },
    { id: 2, message: "سرقت ناموفق گزارش شد" },
    { id: 3, message: "محصول جدید خریداری شد" },
  ]);

  const handleLogout = async () => {
    await fetch("http://localhost:5000/api/admin/logout");
    window.location.href = "/";
  };

  const toggleTheme = () => {
    setTheme(theme === "glass" ? "dark" : theme === "dark" ? "light" : "glass");
    document.body.className = theme;
  };

  return (
    <motion.header
      initial={{ y: -50 }}
      animate={{ y: 0 }}
      transition={{ duration: 0.5 }}
      className="glass p-4 flex justify-between items-center"
    >
      <div className="flex items-center space-x-4">
        <img src="https://via.placeholder.com/40" alt="Avatar" className="w-10 h-10 rounded-full" />
        <span className="font-semibold">whysiks (ادمین)</span>
      </div>
      <div className="flex space-x-4">
        <motion.button
          whileHover={{ scale: 1.1 }}
          className="relative bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaBell />
          <span>اعلان‌ها ({notifications.length})</span>
          {notifications.length > 0 && (
            <span className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs">
              {notifications.length}
            </span>
          )}
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.1 }}
          onClick={toggleTheme}
          className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaMoon />
          <span>تم {theme === "glass" ? "شیشه‌ای" : theme === "dark" ? "تیره" : "روشن"}</span>
        </motion.button>
        <motion.button
          whileHover={{ scale: 1.1 }}
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaSignOutAlt />
          <span>خروج</span>
        </motion.button>
      </div>
    </motion.header>
  );
};

export default Header;
```

#### 3.7. کامپوننت GlassCard (client/src/components/GlassCard.tsx)
کارت شیشه‌ای برای نمایش آمار:

```tsx
import { motion } from "framer-motion";

interface GlassCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  color?: string;
}

const GlassCard = ({ title, value, icon, color = "primary" }: GlassCardProps) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className={`glass p-6 flex items-center space-x-4 bg-${color}-500/10`}
    >
      <div className={`text-3xl text-${color}-500`}>{icon}</div>
      <div>
        <h3 className="text-lg font-semibold">{title}</h3>
        <p className="text-2xl">{value}</p>
      </div>
    </motion.div>
  );
};

export default GlassCard;
```

#### 3.8. کامپوننت DataTable (client/src/components/DataTable.tsx)
جدول تعاملی با قابلیت جستجو و فیلتر:

```tsx
import { useState } from "react";
import { motion } from "framer-motion";
import { FaEdit, FaTrash } from "react-icons/fa";

interface DataTableProps {
  columns: string[];
  data: any[];
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
}

const DataTable = ({ columns, data, onEdit, onDelete }: DataTableProps) => {
  const [search, setSearch] = useState("");
  const [sortColumn, setSortColumn] = useState("");
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("asc");

  const handleSort = (column: string) => {
    if (sortColumn === column) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortColumn(column);
      setSortDirection("asc");
    }
  };

  const sortedData = [...data].sort((a, b) => {
    if (!sortColumn) return 0;
    const aValue = a[sortColumn];
    const bValue = b[sortColumn];
    if (sortDirection === "asc") {
      return aValue > bValue ? 1 : -1;
    }
    return aValue < bValue ? 1 : -1;
  });

  const filteredData = sortedData.filter((row) =>
    Object.values(row).some((value) =>
      value.toString().toLowerCase().includes(search.toLowerCase())
    )
  );

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="glass p-6"
    >
      <input
        type="text"
        placeholder="جستجو..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-4 p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            {columns.map((col) => (
              <th
                key={col}
                onClick={() => handleSort(col)}
                className="cursor-pointer"
              >
                {col} {sortColumn === col && (sortDirection === "asc" ? "↑" : "↓")}
              </th>
            ))}
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((row) => (
            <motion.tr
              key={row.id}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.3 }}
            >
              {Object.values(row).map((value, index) => (
                <td key={index}>{value}</td>
              ))}
              <td>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  onClick={() => onEdit(row.id)}
                  className="text-blue-500 mr-2"
                >
                  <FaEdit />
                </motion.button>
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  onClick={() => onDelete(row.id)}
                  className="text-red-500"
                >
                  <FaTrash />
                </motion.button>
              </td>
            </motion.tr>
          ))}
        </tbody>
      </table>
    </motion.div>
  );
};

export default DataTable;
```

#### 3.9. صفحه داشبورد (client/src/pages/Dashboard.tsx)
صفحه داشبورد با کارت‌های آماری و نمودارها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from "chart.js";
import GlassCard from "../components/GlassCard";
import { FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaTrophy } from "react-icons/fa";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const [stats, setStats] = useState({
    users: 0,
    ccoin: 0,
    clans: 0,
    quests: 0,
    topUsers: [],
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/stats");
        setStats(response.data);
      } catch (error) {
        console.error("Error fetching stats:", error);
      }
    };
    fetchStats();
  }, []);

  const chartData = {
    labels: ["روز ۱", "روز ۲", "روز ۳", "روز ۴", "روز ۵"],
    datasets: [
      {
        label: "فعالیت‌ها",
        data: [120, 190, 300, 500, 400],
        backgroundColor: "rgba(114, 137, 218, 0.5)",
        borderColor: "rgba(114, 137, 218, 1)",
        borderWidth: 1,
      },
    ],
  };

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">📊 داشبورد</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <GlassCard title="کاربرها" value={stats.users} icon={<FaUsers />} color="primary" />
        <GlassCard title="سی‌کوین کل" value={stats.ccoin} icon={<FaMoneyBillWave />} color="accent" />
        <GlassCard title="کلن‌ها" value={stats.clans} icon={<FaShieldAlt />} color="secondary" />
        <GlassCard title="کوئست‌های فعال" value={stats.quests} icon={<FaTasks />} color="warning" />
      </div>
      <div className="glass p-6 mb-8">
        <h2 className="text-2xl font-semibold mb-4">📈 فعالیت‌های روزانه</h2>
        <Bar data={chartData} />
      </div>
      <div className="glass p-6">
        <h2 className="text-2xl font-semibold mb-4">🏆 برترین کاربران</h2>
        <table className="w-full text-left">
          <thead>
            <tr>
              <th>نام</th>
              <th>سی‌کوین</th>
              <th>کریستال</th>
              <th>رتبه</th>
            </tr>
          </thead>
          <tbody>
            {stats.topUsers.map((user) => (
              <tr key={user.id}>
                <td>{user.username}</td>
                <td>{user.ccoin}</td>
                <td>{user.crystals}</td>
                <td>{user.rank}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default Dashboard;
```

#### 3.10. صفحه کاربرها (client/src/pages/Users.tsx)
صفحه مدیریت کاربرها با جزئیات پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Users = () => {
  const [users, setUsers] = useState<any[]>([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/users");
        setUsers(response.data);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  const handleEdit = async (id: string) => {
    const newCcoin = prompt("مقدار جدید سی‌کوین را وارد کنید:");
    if (newCcoin) {
      try {
        await axios.put(`http://localhost:5000/api/admin/users/${id}`, { ccoin: newCcoin });
        setUsers(users.map((user) => (user.id === id ? { ...user, ccoin: newCcoin } : user)));
      } catch (error) {
        console.error("Error updating user:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/users/${id}`);
        setUsers(users.filter((user) => user.id !== id));
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "سی‌کوین", "کریستال", "بانک", "پیام‌ها", "آیتم‌ها", "رتبه"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">👥 کاربرها</h1>
      <DataTable
        columns={columns}
        data={users.map((user) => ({
          id: user.id,
          نام: user.username,
          آیدی: user.id,
          "سی‌کوین": user.ccoin,
          کریستال: user.crystals,
          بانک: user.bank,
          "پیام‌ها": user.messages,
          آیتم‌ها: user.items.join(", "),
          رتبه: user.rank,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Users;
```

#### 3.11. صفحه اقتصاد (client/src/pages/Economy.tsx)
صفحه مدیریت اقتصاد با بانک و سرقت:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Economy = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [robberies, setRobberies] = useState<any[]>([]);
  const [settings, setSettings] = useState({ conversionRate: 0, robberyChance: 0 });

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions");
        setTransactions(response.data);
      } catch (error) {
        console.error("Error fetching transactions:", error);
      }
    };
    const fetchRobberies = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/robberies");
        setRobberies(response.data);
      } catch (error) {
        console.error("Error fetching robberies:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/economy/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchTransactions();
    fetchRobberies();
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/economy/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const transactionColumns = ["کاربر", "نوع", "مقدار", "تاریخ"];
  const robberyColumns = ["کاربر", "هدف", "مقدار", "موفقیت", "تاریخ"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">💰 اقتصاد</h1>
      <div className="glass p-6 mb-8">
        <h2 className="text-2xl font-semibold mb-4">⚙️ تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block mb-2">نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div>
            <label className="block mb-2">شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-6 rounded mt-6"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <div className="glass p-6 mb-8">
        <h2 className="text-2xl font-semibold mb-4">📜 تراکنش‌ها</h2>
        <DataTable
          columns={transactionColumns}
          data={transactions.map((tx) => ({
            id: tx.id,
            کاربر: tx.user,
            نوع: tx.type,
            مقدار: tx.amount,
            تاریخ: tx.date,
          }))}
          onEdit={() => {}}
          onDelete={() => {}}
        />
      </div>
      <div className="glass p-6">
        <h2 className="text-2xl font-semibold mb-4">🔍 تاریخچه سرقت‌ها</h2>
        <DataTable
          columns={robberyColumns}
          data={robberies.map((rob) => ({
            id: rob.id,
            کاربر: rob.user,
            هدف: rob.target,
            مقدار: rob.amount,
            موفقیت: rob.success ? "موفق" : "ناموفق",
            تاریخ: rob.date,
          }))}
          onEdit={() => {}}
          onDelete={() => {}}
        />
      </div>
    </div>
  );
};

export default Economy;
```

#### 3.12. صفحه کلن‌ها (client/src/pages/Clans.tsx)
صفحه مدیریت کلن‌ها با نقش‌ها و رتبه‌بندی:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Clans = () => {
  const [clans, setClans] = useState<any[]>([]);

  useEffect(() => {
    const fetchClans = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/clans");
        setClans(response.data);
      } catch (error) {
        console.error("Error fetching clans:", error);
      }
    };
    fetchClans();
  }, []);

  const handleEdit = async (id: string) => {
    const newName = prompt("نام جدید کلن را وارد کنید:");
    if (newName) {
      try {
        await axios.put(`http://localhost:5000/api/admin/clans/${id}`, { name: newName });
        setClans(clans.map((clan) => (clan.id === id ? { ...clan, name: newName } : clan)));
      } catch (error) {
        console.error("Error updating clan:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کلن را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/clans/${id}`);
        setClans(clans.filter((clan) => clan.id !== id));
      } catch (error) {
        console.error("Error deleting clan:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "اعضا", "سی‌کوین کلن", "رتبه", "نقش‌ها"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">🏰 کلن‌ها</h1>
      <DataTable
        columns={columns}
        data={clans.map((clan) => ({
          id: clan.id,
          نام: clan.name,
          آیدی: clan.id,
          اعضا: clan.members,
          "سی‌کوین کلن": clan.ccoin,
          رتبه: clan.rank,
          "نقش‌ها": clan.roles.join(", "),
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Clans;
```

#### 3.13. صفحه کوئست‌ها (client/src/pages/Quests.tsx)
صفحه مدیریت کوئست‌ها با پیشرفت:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Quests = () => {
  const [quests, setQuests] = useState<any[]>([]);

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/quests");
        setQuests(response.data);
      } catch (error) {
        console.error("Error fetching quests:", error);
      }
    };
    fetchQuests();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید کوئست را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/quests/${id}`, { reward: newReward });
        setQuests(quests.map((quest) => (quest.id === id ? { ...quest, reward: newReward } : quest)));
      } catch (error) {
        console.error("Error updating quest:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کوئست را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/quests/${id}`);
        setQuests(quests.filter((quest) => quest.id !== id));
      } catch (error) {
        console.error("Error deleting quest:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت", "پیشرفت (%)"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">🎯 کوئست‌ها</h1>
      <DataTable
        columns={columns}
        data={quests.map((quest) => ({
          id: quest.id,
          نام: quest.name,
          توضیحات: quest.description,
          جایزه: quest.reward,
          وضعیت: quest.status,
          "پیشرفت (%)": quest.progress,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Quests;
```

#### 3.14. صفحه محصولات (client/src/pages/Products.tsx)
صفحه مدیریت محصولات با شانس‌ها و تخفیف‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { FaLock, FaVolumeUp, FaUserShield, FaGift, FaKey, FaTicketAlt } from "react-icons/fa";

const Products = () => {
  const [products, setProducts] = useState<any[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrice = prompt("قیمت جدید محصول را وارد کنید:");
    if (newPrice) {
      try {
        await axios.put(`http://localhost:5000/api/admin/products/${id}`, { price: newPrice });
        setProducts(products.map((product) => (product.id === id ? { ...product, price: newPrice } : product)));
      } catch (error) {
        console.error("Error updating product:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این محصول را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/products/${id}`);
        setProducts(products.filter((product) => product.id !== id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
    }
  };

  const icons = {
    "Wallet Lock": <FaLock />,
    "Voice Booster": <FaVolumeUp />,
    "Legendary Role": <FaUserShield />,
    "Special Role": <FaGift />,
    "Mystery Box Key": <FaKey />,
    "Lottery Ticket": <FaTicketAlt />,
  };

  const columns = ["آیکون", "نام", "وضعیت", "شانس سرقت", "شانس لجندری", "تخفیف (%)", "قیمت (سی‌کوین)", "دوره", "توضیحات"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">🛒 محصولات</h1>
      <DataTable
        columns={columns}
        data={products.map((product) => ({
          id: product.id,
          آیکون: icons[product.name],
          نام: product.name,
          وضعیت: product.status,
          "شانس سرقت": product.robberyChance,
          "شانس لجندری": product.legendaryChance,
          "تخفیف (%)": product.discount,
          "قیمت (سی‌کوین)": product.price,
          دوره: product.period,
          توضیحات: product.description,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Products;
```

#### 3.15. صفحه بازی‌ها (client/src/pages/Games.tsx)
صفحه مدیریت بازی‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Games = () => {
  const [games, setGames] = useState<any[]>([]);

  useEffect(() => {
    const fetchGames = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/games");
        setGames(response.data);
      } catch (error) {
        console.error("Error fetching games:", error);
      }
    };
    fetchGames();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید بازی را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/games/${id}`, { reward: newReward });
        setGames(games.map((game) => (game.id === id ? { ...game, reward: newReward } : game)));
      } catch (error) {
        console.error("Error updating game:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این بازی را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/games/${id}`);
        setGames(games.filter((game) => game.id !== id));
      } catch (error) {
        console.error("Error deleting game:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">🎮 بازی‌ها</h1>
      <DataTable
        columns={columns}
        data={games.map((game) => ({
          id: game.id,
          نام: game.name,
          توضیحات: game.description,
          جایزه: game.reward,
          وضعیت: game.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Games;
```

#### 3.16. صفحه جایزه‌ها (client/src/pages/Rewards.tsx)
صفحه مدیریت جایزه‌ها با دوره‌های مختلف:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Rewards = () => {
  const [rewards, setRewards] = useState<any[]>([]);

  useEffect(() => {
    const fetchRewards = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/rewards");
        setRewards(response.data);
      } catch (error) {
        console.error("Error fetching rewards:", error);
      }
    };
    fetchRewards();
  }, []);

  const handleEdit = async (id: string) => {
    const newAmount = prompt("مقدار جدید جایزه را وارد کنید:");
    if (newAmount) {
      try {
        await axios.put(`http://localhost:5000/api/admin/rewards/${id}`, { amount: newAmount });
        setRewards(rewards.map((reward) => (reward.id === id ? { ...reward, amount: newAmount } : reward)));
      } catch (error) {
        console.error("Error updating reward:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این جایزه را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/rewards/${id}`);
        setRewards(rewards.filter((reward) => reward.id !== id));
      } catch (error) {
        console.error("Error deleting reward:", error);
      }
    }
  };

  const columns = ["نام", "مقدار", "دوره", "وضعیت"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">🎁 جایزه‌ها</h1>
      <DataTable
        columns={columns}
        data={rewards.map((reward) => ({
          id: reward.id,
          نام: reward.name,
          مقدار: reward.amount,
          دوره: reward.period,
          وضعیت: reward.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default Rewards;
```

#### 3.17. صفحه رتبه‌بندی‌ها (client/src/pages/Rankings.tsx)
صفحه جدید برای نمایش رتبه‌بندی‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Rankings = () => {
  const [userRankings, setUserRankings] = useState<any[]>([]);
  const [clanRankings, setClanRankings] = useState<any[]>([]);

  useEffect(() => {
    const fetchRankings = async () => {
      try {
        const userResponse = await axios.get("http://localhost:5000/api/admin/rankings/users");
        const clanResponse = await axios.get("http://localhost:5000/api/admin/rankings/clans");
        setUserRankings(userResponse.data);
        setClanRankings(clanResponse.data);
      } catch (error) {
        console.error("Error fetching rankings:", error);
      }
    };
    fetchRankings();
  }, []);

  const userColumns = ["نام", "سی‌کوین", "کریستال", "پیام‌ها", "رتبه"];
  const clanColumns = ["نام", "سی‌کوین کلن", "اعضا", "رتبه"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">📊 رتبه‌بندی‌ها</h1>
      <div className="glass p-6 mb-8">
        <h2 className="text-2xl font-semibold mb-4">🏆 رتبه‌بندی کاربران</h2>
        <DataTable
          columns={userColumns}
          data={userRankings.map((user) => ({
            id: user.id,
            نام: user.username,
            "سی‌کوین": user.ccoin,
            کریستال: user.crystals,
            "پیام‌ها": user.messages,
            رتبه: user.rank,
          }))}
          onEdit={() => {}}
          onDelete={() => {}}
        />
      </div>
      <div className="glass p-6">
        <h2 className="text-2xl font-semibold mb-4">🏰 رتبه‌بندی کلن‌ها</h2>
        <DataTable
          columns={clanColumns}
          data={clanRankings.map((clan) => ({
            id: clan.id,
            نام: clan.name,
            "سی‌کوین کلن": clan.ccoin,
            اعضا: clan.members,
            رتبه: clan.rank,
          }))}
          onEdit={() => {}}
          onDelete={() => {}}
        />
      </div>
    </div>
  );
};

export default Rankings;
```

#### 3.18. صفحه لاگ‌ها (client/src/pages/Logs.tsx)
صفحه لاگ‌ها با فیلترهای پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";

const Logs = () => {
  const [logs, setLogs] = useState<any[]>([]);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/logs");
        setLogs(response.data);
      } catch (error) {
        console.error("Error fetching logs:", error);
      }
    };
    fetchLogs();
  }, []);

  const columns = ["کاربر", "فعالیت", "نوع", "تاریخ"];

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">📜 لاگ‌ها</h1>
      <DataTable
        columns={columns}
        data={logs.map((log) => ({
          id: log.id,
          کاربر: log.user,
          فعالیت: log.action,
          نوع: log.type,
          تاریخ: log.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </div>
  );
};

export default Logs;
```

#### 3.19. صفحه تنظیمات (client/src/pages/Settings.tsx)
صفحه تنظیمات با قابلیت‌های پیشرفته:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";

const Settings = () => {
  const [settings, setSettings] = useState({
    conversionRate: 0,
    robberyChance: 0,
    gameEnabled: false,
    rewardPeriod: 0,
    discountRate: 0,
    legendaryChance: 0,
  });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  return (
    <div className="ml-64 p-8">
      <h1 className="text-4xl font-bold mb-8">⚙️ تنظیمات</h1>
      <div className="glass p-6">
        <h2 className="text-2xl font-semibold mb-4">💰 تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block mb-2">نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div>
            <label className="block mb-2">شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>
        <h2 className="text-2xl font-semibold mt-6 mb-4">🛒 تنظیمات محصولات</h2>
        <div className="grid grid-cols-2 gap-6">
          <div>
            <label className="block mb-2">نرخ تخفیف (%):</label>
            <input
              type="number"
              value={settings.discountRate}
              onChange={(e) => setSettings({ ...settings, discountRate: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
          <div>
            <label className="block mb-2">شانس لجندری (%):</label>
            <input
              type="number"
              value={settings.legendaryChance}
              onChange={(e) => setSettings({ ...settings, legendaryChance: parseInt(e.target.value) })}
              className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
            />
          </div>
        </div>
        <h2 className="text-2xl font-semibold mt-6 mb-4">🎮 تنظیمات بازی‌ها</h2>
        <div>
          <label className="block mb-2">فعال کردن بازی‌ها:</label>
          <input
            type="checkbox"
            checked={settings.gameEnabled}
            onChange={(e) => setSettings({ ...settings, gameEnabled: e.target.checked })}
          />
        </div>
        <h2 className="text-2xl font-semibold mt-6 mb-4">🎁 تنظیمات جایزه‌ها</h2>
        <div>
          <label className="block mb-2">دوره جایزه (ساعت):</label>
          <input
            type="number"
            value={settings.rewardPeriod}
            onChange={(e) => setSettings({ ...settings, rewardPeriod: parseInt(e.target.value) })}
            className="p-3 rounded bg-gray-800 text-white w-full focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-6 rounded mt-6"
        >
          ذخیره تنظیمات
        </button>
      </div>
    </div>
  );
};

export default Settings;
```

#### 3.20. بک‌اند (server/admin.ts)
روت‌های API برای بخش‌های جدید:

```typescript
import express from "express";
import { getUsers, updateUser, deleteUser } from "./storage";
import { getTransactions, getRobberies, getEconomySettings, updateEconomySettings } from "./storage";
import { getClans, updateClan, deleteClan } from "./storage";
import { getQuests, updateQuest, deleteQuest } from "./storage";
import { getProducts, updateProduct, deleteProduct } from "./storage";
import { getGames, updateGame, deleteGame } from "./storage";
import { getRewards, updateReward, deleteReward } from "./storage";
import { getRankings, getClanRankings } from "./storage";
import { getLogs } from "./storage";
import { getSettings, updateSettings } from "./storage";
import { getStats } from "./storage";

const router = express.Router();

// میدلوِر برای چک کردن ورود
const ensureAuthenticated = (req, res, next) => {
  if (!req.session.user) {
    return res.status(401).json({ error: "Unauthorized" });
  }
  const guild = req.session.guilds.find((g) => g.id === "YOUR_GUILD_ID");
  if (!guild || !guild.roles.includes("ADMIN_ROLE_ID")) {
    return res.status(403).json({ error: "Access Denied" });
  }
  next();
};

// داشبورد
router.get("/stats", ensureAuthenticated, async (req, res) => {
  const stats = await getStats();
  res.json(stats);
});

// کاربرها
router.get("/users", ensureAuthenticated, async (req, res) => {
  const users = await getUsers();
  res.json(users);
});

router.put("/users/:id", ensureAuthenticated, async (req, res) => {
  await updateUser(req.params.id, req.body);
  res.json({ message: "User updated" });
});

router.delete("/users/:id", ensureAuthenticated, async (req, res) => {
  await deleteUser(req.params.id);
  res.json({ message: "User deleted" });
});

// اقتصاد
router.get("/transactions", ensureAuthenticated, async (req, res) => {
  const transactions = await getTransactions();
  res.json(transactions);
});

router.get("/robberies", ensureAuthenticated, async (req, res) => {
  const robberies = await getRobberies();
  res.json(robberies);
});

router.get("/economy/settings", ensureAuthenticated, async (req, res) => {
  const settings = await getEconomySettings();
  res.json(settings);
});

router.put("/economy/settings", ensureAuthenticated, async (req, res) => {
  await updateEconomySettings(req.body);
  res.json({ message: "Settings updated" });
});

// کلن‌ها
router.get("/clans", ensureAuthenticated, async (req, res) => {
  const clans = await getClans();
  res.json(clans);
});

router.put("/clans/:id", ensureAuthenticated, async (req, res) => {
  await updateClan(req.params.id, req.body);
  res.json({ message: "Clan updated" });
});

router.delete("/clans/:id", ensureAuthenticated, async (req, res) => {
  await deleteClan(req.params.id);
  res.json({ message: "Clan deleted" });
});

// کوئست‌ها
router.get("/quests", ensureAuthenticated, async (req, res) => {
  const quests = await getQuests();
  res.json(quests);
});

router.put("/quests/:id", ensureAuthenticated, async (req, res) => {
  await updateQuest(req.params.id, req.body);
  res.json({ message: "Quest updated" });
});

router.delete("/quests/:id", ensureAuthenticated, async (req, res) => {
  await deleteQuest(req.params.id);
  res.json({ message: "Quest deleted" });
});

// محصولات
router.get("/products", ensureAuthenticated, async (req, res) => {
  const products = await getProducts();
  res.json(products);
});

router.put("/products/:id", ensureAuthenticated, async (req, res) => {
  await updateProduct(req.params.id, req.body);
  res.json({ message: "Product updated" });
});

router.delete("/products/:id", ensureAuthenticated, async (req, res) => {
  await deleteProduct(req.params.id);
  res.json({ message: "Product deleted" });
});

// بازی‌ها
router.get("/games", ensureAuthenticated, async (req, res) => {
  const games = await getGames();
  res.json(games);
});

router.put("/games/:id", ensureAuthenticated, async (req, res) => {
  await updateGame(req.params.id, req.body);
  res.json({ message: "Game updated" });
});

router.delete("/games/:id", ensureAuthenticated, async (req, res) => {
  await deleteGame(req.params.id);
  res.json({ message: "Game deleted" });
});

// جایزه‌ها
router.get("/rewards", ensureAuthenticated, async (req, res) => {
  const rewards = await getRewards();
  res.json(rewards);
});

router.put("/rewards/:id", ensureAuthenticated, async (req, res) => {
  await updateReward(req.params.id, req.body);
  res.json({ message: "Reward updated" });
});

router.delete("/rewards/:id", ensureAuthenticated, async (req, res) => {
  await deleteReward(req.params.id);
  res.json({ message: "Reward deleted" });
});

// رتبه‌بندی‌ها
router.get("/rankings/users", ensureAuthenticated, async (req, res) => {
  const rankings = await getRankings();
  res.json(rankings);
});

router.get("/rankings/clans", ensureAuthenticated, async (req, res) => {
  const rankings = await getClanRankings();
  res.json(rankings);
});

// لاگ‌ها
router.get("/logs", ensureAuthenticated, async (req, res) => {
  const logs = await getLogs();
  res.json(logs);
});

// تنظیمات
router.get("/settings", ensureAuthenticated, async (req, res) => {
  const settings = await getSettings();
  res.json(settings);
});

router.put("/settings", ensureAuthenticated, async (req, res) => {
  await updateSettings(req.body);
  res.json({ message: "Settings updated" });
});

router.get("/logout", (req, res) => {
  req.session.destroy(() => {
    res.redirect("/");
  });
});

export default router;
```

#### 3.21. توابع دیتابیس (server/storage.ts)
توابع دیتابیس برای بخش‌های جدید:

```typescript
import { db } from "./database";

// داشبورد
export async function getStats() {
  return new Promise((resolve, reject) => {
    db.get(
      "SELECT (SELECT COUNT(*) FROM users) as users, (SELECT SUM(ccoin) FROM users) as ccoin, (SELECT COUNT(*) FROM clans) as clans, (SELECT COUNT(*) FROM quests WHERE status = 'active') as quests",
      (err, row) => {
        if (err) reject(err);
        const topUsers = db.all("SELECT * FROM users ORDER BY ccoin DESC LIMIT 5");
        resolve({ ...row, topUsers });
      }
    );
  });
}

// کاربرها
export async function getUsers() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM users", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function updateUser(id, data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE users SET ccoin = ?, crystals = ?, bank = ?, items = ? WHERE id = ?",
      [data.ccoin, data.crystals, data.bank, JSON.stringify(data.items), id],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

export async function deleteUser(id) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM users WHERE id = ?", [id], (err) => {
      if (err) reject(err);
      resolve();
    });
  });
}

// اقتصاد
export async function getTransactions() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM transactions", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function getRobberies() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM robberies", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function getEconomySettings() {
  return new Promise((resolve, reject) => {
    db.get("SELECT * FROM economy_settings", (err, row) => {
      if (err) reject(err);
      resolve(row);
    });
  });
}

export async function updateEconomySettings(data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE economy_settings SET conversion_rate = ?, robbery_chance = ?",
      [data.conversionRate, data.robberyChance],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

// کلن‌ها
export async function getClans() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM clans", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function updateClan(id, data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE clans SET name = ?, roles = ? WHERE id = ?",
      [data.name, JSON.stringify(data.roles), id],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

export async function deleteClan(id) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM clans WHERE id = ?", [id], (err) => {
      if (err) reject(err);
      resolve();
    });
  });
}

// کوئست‌ها
export async function getQuests() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM quests", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function updateQuest(id, data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE quests SET reward = ?, progress = ? WHERE id = ?",
      [data.reward, data.progress, id],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

export async function deleteQuest(id) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM quests WHERE id = ?", [id], (err) => {
      if (err) reject(err);
      resolve();
    });
  });
}

// محصولات
export async function getProducts() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM products", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function updateProduct(id, data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE products SET price = ?, robbery_chance = ?, legendary_chance = ?, discount = ? WHERE id = ?",
      [data.price, data.robberyChance, data.legendaryChance, data.discount, id],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

export async function deleteProduct(id) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM products WHERE id = ?", [id], (err) => {
      if (err) reject(err);
      resolve();
    });
  });
}

// بازی‌ها
export async function getGames() {
  return new Promise((resolve, reject) => {
    db.all("SELECT * FROM games", (err, rows) => {
      if (err) reject(err);
      resolve(rows);
    });
  });
}

export async function updateGame(id, data) {
  return new Promise((resolve, reject) => {
    db.run(
      "UPDATE games SET reward = ? WHERE id = ?",
      [data.reward, id],
      (err) => {
        if (err) reject(err);
        resolve();
      }
    );
  });
}

export async function deleteGame(id) {
  return new Promise((resolve, reject) => {
    db.run("DELETE FROM games WHERE id = ?", [id], (err) => {
      if (err) reject(err);
      resolve();
    });
  });
}

// جایزه‌ها
export async function getRewards() {
  return new Promise((resolve, reject) => {
    db.all