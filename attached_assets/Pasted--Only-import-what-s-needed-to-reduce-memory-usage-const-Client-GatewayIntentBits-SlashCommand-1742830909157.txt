// Only import what's needed to reduce memory usage
const { Client, GatewayIntentBits, SlashCommandBuilder, REST, Routes, EmbedBuilder, 
  PermissionFlagsBits, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');
const http = require('http');

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

// راه‌اندازی سرور HTTP ساده با تنظیمات بهینه‌تر
const server = http.createServer((req, res) => {
  res.writeHead(200, { 
    'Content-Type': 'text/plain',
    'Cache-Control': 'public, max-age=60', // Enable caching for 60 seconds
    'Connection': 'keep-alive' // بهبود عملکرد با استفاده از اتصال پایدار
  });

  // نمایش جزئیات بیشتر وضعیت بات
  const uptime = Math.floor(process.uptime());
  const hours = Math.floor(uptime / 3600);
  const minutes = Math.floor((uptime % 3600) / 60);
  const seconds = uptime % 60;

  res.end(`Bot is online! Uptime: ${hours}h ${minutes}m ${seconds}s | Users: ${Object.keys(users).length}`);
});

server.listen(8080, '0.0.0.0', () => {
  console.log('Server started for uptime monitoring on port 8080');
});

// استفاده از متغیرهای محیطی
const TOKEN = process.env.DISCORD_TOKEN || process.env.TOKEN; // استفاده از DISCORD_TOKEN یا TOKEN
const CLIENT_ID = process.env.CLIENT_ID || '1346003808270024704';
const GUILD_ID = process.env.GUILD_ID || '1343951143625293867';

// بررسی وجود توکن
if (!TOKEN) {
    console.error('❌ خطا: توکن دیسکورد یافت نشد! لطفاً آن را در بخش Secrets با کلید DISCORD_TOKEN تنظیم کنید.');
    process.exit(1);
}
const COIN_NAME = 'Holi Coin'; // نام سکه
const DATA_FILE = 'data.json'; // فایل ذخیره داده‌ها
const INVESTMENT_RATE = 0.05; // نرخ سود سرمایه‌گذاری (5%)
const ADMIN_ROLE_ID = '1343981256949497988'; // آیدی رول مدیر
let allowedChannels = []; // کانال‌های مجاز برای استفاده از ربات

// متغیرهای مربوط به سیستم جیب‌زنی
const STEAL_WINDOW_DURATION = 15 * 60 * 1000; // پنجره زمانی جیب‌زنی (15 دقیقه به میلی‌ثانیه)
const NEW_USER_PROTECTION_DAYS = 5; // محافظت از کاربران جدید (5 روز)
const MAX_DAILY_STEALS = 5; // حداکثر تعداد دزدی‌های روزانه
const MAX_STEAL_PERCENTAGE = 0.2; // حداکثر مقدار دزدی (20 درصد)
let stealWindowStart = null; // شروع پنجره زمانی جیب‌زنی

// سیستم مأموریت‌های روزانه
const DAILY_QUESTS = [
    { name: "chat_messages", description: "ارسال 5 پیام در سرور", reward: 50, goal: 5 },
    { name: "play_games", description: "شرکت در 3 بازی (تاس، شیر یا خط، سنگ کاغذ قیچی)", reward: 70, goal: 3 },
    { name: "bank_deposit", description: "واریز حداقل 100 سکه به بانک", reward: 40, goal: 1 },
    { name: "steal_attempt", description: "انجام یک جیب‌زنی موفق", reward: 80, goal: 1 },
    { name: "shop_purchase", description: "خرید یک آیتم از فروشگاه", reward: 60, goal: 1 },
    { name: "win_duel", description: "پیروزی در یک دوئل", reward: 100, goal: 1 }
];

let users = {};
// آیتم‌های فروشگاه
let shopItems = [
    { id: 'role_vip', name: 'رول VIP', price: 1000, description: 'یک رول ویژه با دسترسی‌های اضافی' },
    { id: 'custom_color', name: 'رنگ سفارشی', price: 500, description: 'تغییر رنگ نام شما در سرور' },
    { id: 'lootbox', name: 'جعبه شانس', price: 300, description: 'یک جعبه با جوایز تصادفی' }
];

// بارگذاری داده‌های کاربران
if (fs.existsSync(DATA_FILE)) {
    const data = JSON.parse(fs.readFileSync(DATA_FILE));
    users = data.users || {};
    if (data.shopItems) {
        shopItems = data.shopItems;
    }
}

// ذخیره داده‌ها با روش بهینه‌تر و کارآمدتر
let isSaving = false; // جلوگیری از ذخیره‌سازی همزمان
let pendingSave = false; // ذخیره درخواست‌های در صف
let saveErrorCount = 0; // شمارنده خطاهای ذخیره‌سازی متوالی

function saveData() {
    // اگر در حال ذخیره‌سازی هستیم، درخواست را به تعویق می‌اندازیم
    if (isSaving) {
        pendingSave = true;
        return;
    }

    isSaving = true;

    try {
        const data = {
            users: users,
            shopItems: shopItems,
            market: global.market || { priceModifiers: {}, lastUpdated: Date.now(), history: [] },
            teams: global.teams || {},
            lastSaved: Date.now() // افزودن زمان آخرین ذخیره‌سازی
        };

        // ایجاد فایل پشتیبان قبل از ذخیره‌سازی
        const backupFile = `${DATA_FILE}.backup`;
        if (fs.existsSync(DATA_FILE)) {
            try {
                fs.copyFileSync(DATA_FILE, backupFile);
            } catch (backupError) {
                console.error('❌ خطا در ایجاد فایل پشتیبان:', backupError);
            }
        }

        // ابتدا به یک فایل موقت می‌نویسیم
        const tempFile = `${DATA_FILE}.temp`;

        // تلاش برای کاهش حجم فایل با حذف فیلدهای نول یا مقدار پیش‌فرض
        const compactData = JSON.parse(JSON.stringify(data, (key, value) => {
            // حذف آرایه‌های خالی و آبجکت‌های خالی
            if (Array.isArray(value) && value.length === 0) return undefined;
            if (value !== null && typeof value === 'object' && Object.keys(value).length === 0) return undefined;

            // برگرداندن مقدار اصلی
            return value;
        }));

        // استفاده از JSON.stringify با فاصله‌گذاری بهتر
        fs.writeFileSync(tempFile, JSON.stringify(compactData, null, 2));

        // بررسی اعتبار فایل موقت
        const checkData = JSON.parse(fs.readFileSync(tempFile, 'utf8'));
        if (!checkData || !checkData.users) {
            throw new Error('داده‌ها ناقص هستند');
        }

        // جایگزینی فایل اصلی با فایل موقت
        fs.renameSync(tempFile, DATA_FILE);
        console.log(`✅ ذخیره‌سازی داده‌ها انجام شد: ${Object.keys(users).length} کاربر`);

        // ریست شمارنده خطا
        saveErrorCount = 0;
    } catch (error) {
        console.error('❌ خطا در ذخیره داده‌ها:', error);
        saveErrorCount++;

        // در صورت خطا، از فایل پشتیبان بازیابی می‌کنیم
        const backupFile = `${DATA_FILE}.backup`;
        if (fs.existsSync(backupFile)) {
            try {
                console.log('🔄 بازیابی از فایل پشتیبان...');
                fs.copyFileSync(backupFile, DATA_FILE);
                console.log('✅ بازیابی انجام شد');
            } catch (restoreError) {
                console.error('❌ خطا در بازیابی از فایل پشتیبان:', restoreError);
            }
        }

        // اگر چندین خطا پشت سر هم رخ داد، ایجاد فایل پشتیبان اضطراری
        if (saveErrorCount >= 3) {
            try {
                const emergencyBackup = `${DATA_FILE}.emergency.${Date.now()}.json`;
                fs.writeFileSync(emergencyBackup, JSON.stringify({
                    users: users,
                    shopItems: shopItems,
                    market: global.market || { priceModifiers: {}, lastUpdated: Date.now(), history: [] },
                    teams: global.teams || {},
                    lastSaved: Date.now()
                }));
                console.log(`⚠️ فایل پشتیبان اضطراری ایجاد شد: ${emergencyBackup}`);
                saveErrorCount = 0;
            } catch (emergencyError) {
                console.error('❌ خطا در ایجاد فایل پشتیبان اضطراری:', emergencyError);
            }
        }
    } finally {
        // در هر صورت وضعیت ذخیره‌سازی را آزاد می‌کنیم
        isSaving = false;

        // اگر درخواست دیگری در صف است، آن را پردازش می‌کنیم
        if (pendingSave) {
            pendingSave = false;
            setTimeout(saveData, 100); // تاخیر کوتاه برای جلوگیری از مسدود شدن ترد اصلی
        }
    }
}

// تابع گردونه
function spinWheel() {
    const rewards = [0, 10, 20, 50, 100]; // جوایز ممکن
    return rewards[Math.floor(Math.random() * rewards.length)];
}

// ساختار پیش‌فرض کاربر جدید - تعریف خارج از تابع برای بهینه‌سازی حافظه
const defaultUserData = {
    // مقادیر اقتصادی اصلی
    balance: 0,
    bank: 0,
    investment: 0,

    // زمان‌های آخرین فعالیت
    lastSpin: 0,
    lastDaily: 0,
    lastWeekly: 0,
    joinTime: 0,

    // موجودی و پیشرفت
    inventory: [],
    level: 0,
    xp: 0,
    initialClaimed: false,

    // انتقال سکه
    transferHistory: [],
    dailyTransferTotal: 0,
    dailyTransferReset: 0,

    // سیستم جیب‌زنی
    lastStealAttempts: [],
    dailySteals: 0,
    dailyStealsReset: 0,
    stolenFrom: {},
    lastTimeStolen: 0,

    // سیستم مأموریت‌های روزانه
    dailyQuest: null,
    dailyQuestProgress: 0,
    dailyQuestReset: 0,
    questsCompleted: 0,
    questStats: {
        chat_messages: 0,
        play_games: 0,
        bank_deposit: 0,
        steal_attempt: 0,
        shop_purchase: 0,
        win_duel: 0
    },

    // سیستم بخت‌آزمایی و جکپات
    lotteryTickets: 0,
    lotteryTicketReset: 0,
    jackpotContribution: 0,

    // سیستم دوستی و تیم‌ها
    friends: [],
    friendRequests: [],
    team: null,
    teamInvites: [],

    // سیستم افتخارات و دستاوردها
    achievements: [],

    // رکوردها و فعالیت‌های ویژه
    activity: {
        daily: 0,
        weekly: 0,
        monthly: 0,
        lastActivityReset: 0
    },

    // آمار کلی
    stats: {
        gamesPlayed: 0,
        gamesWon: 0,
        itemsBought: 0,
        questsCompleted: 0,
        totalEarned: 0,
        totalSpent: 0
    }
};

// دریافت یا ایجاد کاربر با ساختار پیش‌فرض - بهینه‌سازی شده
function getUser(userId) {
    // اطمینان از معتبر بودن شناسه کاربر
    if (!userId || typeof userId !== 'string') {
        console.error('❌ خطا: شناسه کاربر نامعتبر است', userId);
        return null;
    }

    if (!users[userId]) {
        // کپی عمیق از ساختار پیش‌فرض به جای ایجاد مجدد در هر بار
        users[userId] = JSON.parse(JSON.stringify(defaultUserData));
        users[userId].joinTime = Date.now(); // تنظیم زمان عضویت به زمان فعلی
    } else {
        // اطمینان از وجود فیلدهای ضروری که ممکن است در نسخه‌های قدیمی‌تر وجود نداشته باشند
        const requiredFields = [
            'balance', 'bank', 'investment', 'level', 'xp', 'joinTime', 
            'questStats', 'friends', 'friendRequests', 'achievements'
        ];

        for (const field of requiredFields) {
            if (users[userId][field] === undefined) {
                if (field === 'questStats') {
                    users[userId][field] = {
                        chat_messages: 0,
                        play_games: 0,
                        bank_deposit: 0,
                        steal_attempt: 0,
                        shop_purchase: 0,
                        win_duel: 0
                    };
                } else if (Array.isArray(defaultUserData[field])) {
                    users[userId][field] = [];
                } else if (typeof defaultUserData[field] === 'object') {
                    users[userId][field] = {};
                } else {
                    users[userId][field] = defaultUserData[field];
                }
            }
        }
    }

    return users[userId];
}

// ایجاد مأموریت روزانه جدید برای کاربر
function getRandomDailyQuest() {
    return DAILY_QUESTS[Math.floor(Math.random() * DAILY_QUESTS.length)];
}

// بررسی و تخصیص مأموریت روزانه به کاربر
function checkAndAssignDailyQuest(userId) {
    const userData = getUser(userId);
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000;

    // اگر مأموریت نداره یا مأموریت قبلی منقضی شده، یک مأموریت جدید تخصیص بده
    if (!userData.dailyQuest || now - userData.dailyQuestReset > oneDayMs) {
        const newQuest = getRandomDailyQuest();
        userData.dailyQuest = newQuest;
        userData.dailyQuestProgress = 0;
        userData.dailyQuestReset = now;

        // اطمینان از وجود ساختار آمار کوئست
        if (!userData.questStats) {
            userData.questStats = {
                chat_messages: 0,
                play_games: 0,
                bank_deposit: 0,
                steal_attempt: 0,
                shop_purchase: 0,
                win_duel: 0
            };
        }

        return { isNew: true, quest: newQuest };
    }

    return { isNew: false, quest: userData.dailyQuest };
}

// به‌روزرسانی پیشرفت مأموریت کاربر
function updateQuestProgress(userId, questType, amount = 1) {
    const userData = getUser(userId);

    // اگر مأموریتی تنظیم نشده، چیزی انجام نده
    if (!userData.dailyQuest) return false;

    // به‌روزرسانی آمار کاربر
    if (userData.questStats[questType] !== undefined) {
        userData.questStats[questType] += amount;
    }

    // اگر نوع مأموریت با مأموریت فعلی کاربر یکسان است، پیشرفت را به‌روز کن
    if (userData.dailyQuest.name === questType) {
        userData.dailyQuestProgress += amount;

        // بررسی تکمیل مأموریت
        if (userData.dailyQuestProgress >= userData.dailyQuest.goal) {
            // اعطای پاداش
            userData.balance += userData.dailyQuest.reward;
            userData.questsCompleted++;

            // ریست مأموریت
            userData.dailyQuest = null;
            return true; // مأموریت تکمیل شد
        }
    }

    return false;
}

// تابع ساخت نوار پیشرفت برای مأموریت‌ها
function createProgressBar(percentage) {
    const barLength = 20; // طول نوار پیشرفت
    const filledLength = Math.floor((percentage / 100) * barLength);
    const emptyLength = barLength - filledLength;

    return '▰'.repeat(filledLength) + '▱'.repeat(emptyLength) + ` ${percentage}%`;
}

// متغیرهای مربوط به سیستم جکپات و بخت‌آزمایی
let jackpotPool = 1000; // مخزن اولیه جکپات
let jackpotPlayers = []; // لیست بازیکنان شرکت‌کننده در جکپات
let lotteryPool = 500; // مخزن بخت‌آزمایی
let lotteryTickets = []; // لیست بلیط‌های فروخته شده
const LOTTERY_TICKET_PRICE = 50; // قیمت هر بلیط
const MAX_TICKETS_PER_WEEK = 5; // حداکثر تعداد بلیط‌های قابل خرید در هفته
let nextLotteryDraw = Date.now() + 7 * 24 * 60 * 60 * 1000; // زمان قرعه‌کشی بعدی (یک هفته بعد)

// تابع خرید بلیط بخت‌آزمایی
function buyLotteryTicket(userId) {
    const userData = getUser(userId);
    const now = Date.now();
    const oneWeekMs = 7 * 24 * 60 * 60 * 1000;

    // بررسی ریست خرید بلیط
    if (now - userData.lotteryTicketReset > oneWeekMs) {
        userData.lotteryTickets = 0;
        userData.lotteryTicketReset = now;
    }

    // بررسی محدودیت خرید بلیط
    if (userData.lotteryTickets >= MAX_TICKETS_PER_WEEK) {
        return { success: false, reason: `❌ شما به سقف مجاز خرید بلیط در هفته (${MAX_TICKETS_PER_WEEK} بلیط) رسیده‌اید!` };
    }

    // بررسی موجودی کافی
    if (userData.balance < LOTTERY_TICKET_PRICE) {
        return { success: false, reason: `❌ موجودی شما برای خرید بلیط کافی نیست! (قیمت: ${LOTTERY_TICKET_PRICE} ${COIN_NAME})` };
    }

    // خرید بلیط
    userData.balance -= LOTTERY_TICKET_PRICE;
    userData.lotteryTickets++;

    // افزودن به مخزن بخت‌آزمایی
    lotteryPool += Math.floor(LOTTERY_TICKET_PRICE * 0.8); // 80% قیمت بلیط به جایزه اضافه می‌شود

    // ثبت بلیط خریداری شده
    lotteryTickets.push({
        userId: userId,
        purchaseTime: now
    });

    return { success: true, ticketNumber: userData.lotteryTickets };
}

// تابع قرعه‌کشی بخت‌آزمایی
function drawLotteryWinner() {
    if (!lotteryTickets || lotteryTickets.length === 0) {
        console.log("🎟️ هیچ بلیطی برای قرعه‌کشی یافت نشد!");
        return null; // هیچ بلیطی فروخته نشده
    }

    try {
        // انتخاب یک بلیط به صورت تصادفی
        const winnerIndex = Math.floor(Math.random() * lotteryTickets.length);
        const winnerTicket = lotteryTickets[winnerIndex];

        if (!winnerTicket || !winnerTicket.userId) {
            console.error("❌ بلیط برنده اطلاعات ناقص دارد!");
            return null;
        }

        // پرداخت جایزه به برنده
        const userData = getUser(winnerTicket.userId);
        userData.balance += lotteryPool;

        // ذخیره اطلاعات برنده
        const winner = {
            userId: winnerTicket.userId,
            prize: lotteryPool
        };

        // ریست سیستم بخت‌آزمایی
        lotteryPool = 500; // مخزن اولیه جدید
        lotteryTickets = [];
        nextLotteryDraw = Date.now() + 7 * 24 * 60 * 60 * 1000; // یک هفته بعد

        // ریست شمارنده بلیط‌ها برای همه کاربران
        for (const userId in users) {
            if (users[userId].lotteryTickets) {
                users[userId].lotteryTickets = 0;
            }
        }

        // ذخیره تغییرات
        saveData();

        return winner;
    } catch (error) {
        console.error("❌ خطا در قرعه‌کشی بخت‌آزمایی:", error);
        return null;
    }
}

// تابع شرکت در جکپات
function joinJackpot(userId, amount) {
    const userData = getUser(userId);

    // بررسی موجودی کافی
    if (userData.balance < amount) {
        return { success: false, reason: `❌ موجودی شما برای شرکت در جکپات کافی نیست! (موجودی: ${userData.balance} ${COIN_NAME})` };
    }

    // حداقل مبلغ شرکت در جکپات
    if (amount < 10) {
        return { success: false, reason: `❌ حداقل مبلغ برای شرکت در جکپات 10 ${COIN_NAME} است!` };
    }

    // کم کردن مبلغ از موجودی کاربر
    userData.balance -= amount;

    // اضافه کردن به جکپات
    jackpotPool += amount;

    // ثبت کاربر در لیست شرکت‌کنندگان با وزن متناسب با مبلغ
    userData.jackpotContribution += amount;

    // افزودن کاربر به لیست جکپات
    const existingPlayerIndex = jackpotPlayers.findIndex(player => player.userId === userId);

    if (existingPlayerIndex !== -1) {
        // اگر قبلاً در جکپات شرکت کرده، مقدار را به روز کن
        jackpotPlayers[existingPlayerIndex].amount += amount;
    } else {
        // اضافه کردن بازیکن جدید
        jackpotPlayers.push({
            userId: userId,
            amount: amount
        });
    }

    return { 
        success: true, 
        amount: amount, 
        totalPool: jackpotPool,
        chance: ((userData.jackpotContribution / jackpotPool) * 100).toFixed(2)
    };
}

// تابع انتخاب برنده جکپات
function drawJackpotWinner() {
    if (jackpotPlayers.length === 0) {
        return null; // هیچ بازیکنی در جکپات شرکت نکرده
    }

    // محاسبه مجموع مبالغ شرکت‌کنندگان
    const totalAmount = jackpotPlayers.reduce((sum, player) => sum + player.amount, 0);

    // انتخاب برنده با توجه به مبلغ شرکت (شانس بیشتر برای مبلغ بیشتر)
    let random = Math.random() * totalAmount;
    let winner = null;

    for (const player of jackpotPlayers) {
        random -= player.amount;
        if (random <= 0) {
            winner = player;
            break;
        }
    }

    if (!winner) {
        // در صورت عدم انتخاب (به ندرت اتفاق می‌افتد)، اولین بازیکن را انتخاب کن
        winner = jackpotPlayers[0];
    }

    // پرداخت جایزه به برنده
    const userData = getUser(winner.userId);
    userData.balance += jackpotPool;

    // ذخیره اطلاعات برنده
    const winnerInfo = {
        userId: winner.userId,
        prize: jackpotPool,
        chance: ((winner.amount / totalAmount) * 100).toFixed(2)
    };

    // ریست سیستم جکپات
    jackpotPool = 1000; // مخزن اولیه جدید
    jackpotPlayers = [];

    // ریست مشارکت جکپات برای همه کاربران
    for (const userId in users) {
        if (users[userId].jackpotContribution) {
            users[userId].jackpotContribution = 0;
        }
    }

    return winnerInfo;
}

// بررسی پنجره زمانی جیب‌زنی
function checkStealWindow() {
    const now = Date.now();

    // اگر پنجره زمانی تنظیم نشده یا به پایان رسیده باشد
    if (!stealWindowStart || now > stealWindowStart + STEAL_WINDOW_DURATION) {
        // تنظیم یک زمان تصادفی برای شروع پنجره زمانی جدید در طول 24 ساعت آینده
        const oneDayMs = 24 * 60 * 60 * 1000; // 24 ساعت به میلی‌ثانیه
        const randomOffset = Math.floor(Math.random() * (oneDayMs - STEAL_WINDOW_DURATION));
        stealWindowStart = now + randomOffset;

        console.log(`🕒 پنجره زمانی جیب‌زنی جدید تنظیم شد: ${new Date(stealWindowStart).toLocaleString()}`);
        return false;
    }

    // بررسی اینکه آیا در حال حاضر در پنجره زمانی جیب‌زنی هستیم
    return now >= stealWindowStart && now < (stealWindowStart + STEAL_WINDOW_DURATION);
}

// بررسی امکان جیب‌زنی
function canSteal(stealerId, targetId) {
    const now = Date.now();
    const stealer = getUser(stealerId);
    const target = getUser(targetId);

    // بررسی پنجره زمانی جیب‌زنی
    const isStealWindowActive = checkStealWindow();
    if (!isStealWindowActive) {
        return { allowed: false, reason: '❌ جیب‌زنی فقط در زمان‌های خاصی از روز فعال است! الان زمان جیب‌زنی نیست.' };
    }

    // بررسی محافظت کاربران جدید (5 روز)
    const fiveDaysMs = NEW_USER_PROTECTION_DAYS * 24 * 60 * 60 * 1000;
    if (now - target.joinTime < fiveDaysMs) {
        return { allowed: false, reason: '❌ این کاربر تازه به سرور پیوسته و فعلاً محافظت شده است!' };
    }

    // بررسی محدودیت دزدی‌های روزانه
    const oneDayMs = 24 * 60 * 60 * 1000;
    if (now - stealer.dailyStealsReset > oneDayMs) {
        stealer.dailySteals = 0;
        stealer.dailyStealsReset = now;
        stealer.stolenFrom = {}; // ریست لیست کاربرانی که از آنها دزدی شده
    }

    if (stealer.dailySteals >= MAX_DAILY_STEALS) {
        return { allowed: false, reason: `❌ شما به سقف دزدی‌های روزانه (${MAX_DAILY_STEALS} بار) رسیده‌اید! فردا دوباره تلاش کنید.` };
    }

    // بررسی دزدی از یک کاربر خاص بیش از 1 بار در روز
    if (stealer.stolenFrom[targetId] && (now - stealer.stolenFrom[targetId]) < oneDayMs) {
        return { allowed: false, reason: '❌ شما امروز قبلاً از این کاربر دزدی کرده‌اید! فردا دوباره امتحان کنید.' };
    }

    // بررسی محافظت کاربر هدف (اگر در 24 ساعت اخیر از او دزدی شده باشد)
    if (target.lastTimeStolen && (now - target.lastTimeStolen) < oneDayMs) {
        // شانس 50-50 برای موفقیت دزدی
        if (Math.random() < 0.5) {
            return { allowed: false, reason: '❌ این کاربر اخیراً مورد دزدی قرار گرفته و هوشیار است! دزدی ناموفق بود.' };
        }
    }

    // بررسی موجودی کاربر هدف
    if (target.balance <= 0) {
        return { allowed: false, reason: '❌ این کاربر هیچ سکه‌ای در جیب خود ندارد!' };
    }

    return { allowed: true };
}

// افزودن XP به کاربر و بررسی لول آپ
function addXP(userId, amount) {
    const userData = getUser(userId);
    userData.xp += amount;

    // بررسی لول آپ - هر 100 XP یک لول افزایش می‌یابد
    const newLevel = Math.floor(userData.xp / 100);
    if (newLevel > userData.level) {
        userData.level = newLevel;
        return true; // لول آپ شد
    }
    return false; // لول آپ نشد
}

// بررسی اینکه آیا کاربر می‌تواند سکه انتقال دهد
function canTransferCoins(userId, targetId, amount) {
    const userData = getUser(userId);
    const now = Date.now();

    // بررسی سطح کاربر - باید حداقل لول 5 باشد
    if (userData.level < 5) {
        return { allowed: false, reason: `❌ شما باید حداقل لول 5 باشید تا بتوانید سکه انتقال دهید (لول فعلی: ${userData.level})` };
    }

    // بررسی سقف روزانه انتقال (500 سکه)
    const MAX_DAILY_TRANSFER = 500;

    // اگر روز جدیدی شروع شده، مقدار انتقال روزانه را ریست کنیم
    const oneDayMs = 86400000;
    if (now - userData.dailyTransferReset > oneDayMs) {
        userData.dailyTransferTotal = 0;
        userData.dailyTransferReset = now;
    }

    if (userData.dailyTransferTotal + amount > MAX_DAILY_TRANSFER) {
        return { allowed: false, reason: `❌ شما نمی‌توانید بیش از ${MAX_DAILY_TRANSFER} ${COIN_NAME} در روز انتقال دهید (${userData.dailyTransferTotal} استفاده شده)` };
    }

    // بررسی تعداد انتقال‌های متوالی به یک کاربر خاص
    // فیلتر کردن 3 انتقال آخر
    const recentTransfers = userData.transferHistory
        .filter(t => t.targetId === targetId)
        .slice(-3);

    // اگر 3 انتقال متوالی به یک کاربر انجام شده باشد، بلاک می‌شود
    if (recentTransfers.length >= 3) {
        const lastTransferTime = recentTransfers[recentTransfers.length - 1].time;
        // بررسی اینکه آیا 24 ساعت از آخرین انتقال گذشته است
        if (now - lastTransferTime < oneDayMs) {
            return { allowed: false, reason: `❌ شما بیش از حد مجاز به این کاربر سکه انتقال داده‌اید! لطفاً 24 ساعت صبر کنید.` };
        }
    }

    return { allowed: true };
}

// ثبت انتقال سکه
function recordTransfer(userId, targetId, amount) {
    const userData = getUser(userId);
    const now = Date.now();

    // ثبت انتقال در تاریخچه
    userData.transferHistory.push({
        targetId: targetId,
        amount: amount,
        time: now
    });

    // بروزرسانی مجموع انتقال روزانه
    userData.dailyTransferTotal += amount;

    // اگر این اولین انتقال روز است، زمان ریست را تنظیم کنیم
    if (userData.dailyTransferReset === 0) {
        userData.dailyTransferReset = now;
    }

    saveData();
}

// تابع برای تبدیل عدد تاس به ایموجی
function getDiceEmoji(roll) {
    switch (roll) {
        case 1: return ':one:';
        case 2: return ':two:';
        case 3: return ':three:';
        case 4: return ':four:';
        case 5: return ':five:';
        case 6: return ':six:';
        default: return '';
    }
}

// تابع بررسی دسترسی مدیر با حفاظت بیشتر
function hasAdminRole(member) {
    try {
        // بررسی رول مدیر اختصاصی
        if (member.roles && member.roles.cache && member.roles.cache.has(ADMIN_ROLE_ID)) {
            return true;
        }

        // بررسی دسترسی Administrator
        if (member.permissions && member.permissions.has(PermissionFlagsBits.Administrator)) {
            return true;
        }

        // بررسی صاحب سرور بودن
        if (member.guild && member.guild.ownerId === member.id) {
            return true;
        }

        return false;
    } catch (error) {
        console.error('❌ خطا در بررسی دسترسی مدیر:', error);
        return false; // در صورت بروز خطا، دسترسی رد می‌شود
    }
}


// تعریف سیستم دستاوردها و افتخارات
const ACHIEVEMENTS = [
    { id: 'first_win', name: 'برنده اول', description: 'برای اولین بار در یک بازی برنده شوید', condition: user => user.stats.gamesWon >= 1, reward: 50 },
    { id: 'gold_digger', name: 'جویای طلا', description: 'بیش از 1000 سکه جمع‌آوری کنید', condition: user => (user.balance + user.bank + user.investment) >= 1000, reward: 200 },
    { id: 'quest_master', name: 'استاد مأموریت', description: '10 مأموریت روزانه را تکمیل کنید', condition: user => user.questsCompleted >= 10, reward: 300 },
    { id: 'social_butterfly', name: 'پروانه اجتماعی', description: '5 دوست به لیست دوستان خود اضافه کنید', condition: user => user.friends.length >= 5, reward: 100 },
    { id: 'team_player', name: 'بازیکن تیمی', description: 'به یک تیم بپیوندید یا یک تیم جدید بسازید', condition: user => user.team !== null, reward: 150 },
    { id: 'investor', name: 'سرمایه‌گذار', description: 'حداقل 500 سکه در بانک سرمایه‌گذاری کنید', condition: user => user.investment >= 500, reward: 250 },
    { id: 'gambler', name: 'قمارباز', description: '50 بازی شانسی انجام دهید', condition: user => user.stats.gamesPlayed >= 50, reward: 500 },
    { id: 'jackpot_winner', name: 'برنده جکپات', description: 'یک بار برنده جکپات شوید', condition: user => user.stats.jackpotWins >= 1, reward: 1000 },
    { id: 'daily_streak', name: 'تداوم روزانه', description: '7 روز متوالی جایزه روزانه دریافت کنید', condition: user => user.stats.dailyStreak >= 7, reward: 300 },
    { id: 'high_level', name: 'سطح بالا', description: 'به سطح 10 برسید', condition: user => user.level >= 10, reward: 500 }
];

// سیستم مدیریت تیم
function createTeam(userId, teamName) {
    // بررسی اینکه کاربر قبلاً در تیمی نباشد
    const userData = getUser(userId);
    if (userData.team !== null) {
        return { success: false, reason: 'شما قبلاً در یک تیم هستید!' };
    }

    // ایجاد شناسه یکتا برای تیم
    const teamId = `team_${Date.now()}`;

    // ایجاد تیم جدید
    if (!global.teams) global.teams = {};

    global.teams[teamId] = {
        id: teamId,
        name: teamName,
        leader: userId,
        members: [userId],
        createdAt: Date.now(),
        score: 0,
        wins: 0,
        losses: 0
    };

    // اضافه کردن کاربر به تیم
    userData.team = teamId;
    saveData();

    return { success: true, teamId: teamId };
}

function joinTeam(userId, teamId) {
    // بررسی وجود تیم
    if (!global.teams || !global.teams[teamId]) {
        return { success: false, reason: 'تیم مورد نظر یافت نشد!' };
    }

    // بررسی اینکه کاربر قبلاً در تیمی نباشد
    const userData = getUser(userId);
    if (userData.team !== null) {
        return { success: false, reason: 'شما قبلاً در یک تیم هستید!' };
    }

    // اضافه کردن کاربر به تیم
    global.teams[teamId].members.push(userId);
    userData.team = teamId;
    saveData();

    return { success: true, teamName: global.teams[teamId].name };
}

function leaveTeam(userId) {
    const userData = getUser(userId);

    // بررسی اینکه کاربر در تیمی باشد
    if (userData.team === null) {
        return { success: false, reason: 'شما در هیچ تیمی نیستید!' };
    }

    const teamId = userData.team;

    // بررسی وجود تیم
    if (!global.teams || !global.teams[teamId]) {
        userData.team = null;
        saveData();
        return { success: true, message: 'شما از تیم خارج شدید (تیم یافت نشد).' };
    }

    // حذف کاربر از تیم
    const teamData = global.teams[teamId];
    const memberIndex = teamData.members.indexOf(userId);

    if (memberIndex !== -1) {
        teamData.members.splice(memberIndex, 1);
    }

    // اگر کاربر رهبر تیم بود و هنوز اعضای دیگری در تیم هستند، رهبری را واگذار کنیم
    if (teamData.leader === userId && teamData.members.length > 0) {
        teamData.leader = teamData.members[0];
    }

    // اگر تیم خالی شد، آن را حذف کنیم
    if (teamData.members.length === 0) {
        delete global.teams[teamId];
    }

    // حذف تیم از پروفایل کاربر
    userData.team = null;
    saveData();

    return { success: true, message: 'شما با موفقیت از تیم خارج شدید.' };
}

// سیستم دوستی
function sendFriendRequest(senderId, targetId) {
    // بررسی اینکه کاربر به خودش درخواست ندهد
    if (senderId === targetId) {
        return { success: false, reason: 'شما نمی‌توانید به خودتان درخواست دوستی بفرستید!' };
    }

    const senderData = getUser(senderId);
    const targetData = getUser(targetId);

    // بررسی اینکه قبلاً دوست نباشند
    if (senderData.friends.includes(targetId)) {
        return { success: false, reason: 'این کاربر قبلاً در لیست دوستان شما است!' };
    }

    // بررسی اینکه درخواست قبلاً ارسال نشده باشد
    if (targetData.friendRequests.includes(senderId)) {
        return { success: false, reason: 'شما قبلاً به این کاربر درخواست دوستی ارسال کرده‌اید!' };
    }

    // اضافه کردن درخواست
    targetData.friendRequests.push(senderId);
    saveData();

    return { success: true };
}

function acceptFriendRequest(userId, requesterId) {
    const userData = getUser(userId);

    // بررسی وجود درخواست
    const requestIndex = userData.friendRequests.indexOf(requesterId);
    if (requestIndex === -1) {
        return { success: false, reason: 'درخواست دوستی یافت نشد!' };
    }

    // حذف درخواست و اضافه کردن به لیست دوستان
    userData.friendRequests.splice(requestIndex, 1);
    userData.friends.push(requesterId);

    // اضافه کردن متقابل
    const requesterData = getUser(requesterId);
    requesterData.friends.push(userId);
    saveData();

    // بررسی دستاورد پروانه اجتماعی
    checkAchievement(userId, 'social_butterfly');
    checkAchievement(requesterId, 'social_butterfly');

    return { success: true };
}

function removeFriend(userId, friendId) {
    const userData = getUser(userId);
    const friendData = getUser(friendId);

    // حذف دوست از لیست کاربر
    const userFriendIndex = userData.friends.indexOf(friendId);
    if (userFriendIndex !== -1) {
        userData.friends.splice(userFriendIndex, 1);
    }

    // حذف متقابل
    const friendUserIndex = friendData.friends.indexOf(userId);
    if (friendUserIndex !== -1) {
        friendData.friends.splice(friendUserIndex, 1);
    }

    saveData();
    return { success: true };
}

// سیستم افتخارات
function checkAchievement(userId, achievementId = null) {
    const userData = getUser(userId);
    let newAchievements = [];

    // بررسی یک دستاورد خاص یا همه دستاوردها
    const achievementsToCheck = achievementId ? ACHIEVEMENTS.filter(a => a.id === achievementId) : ACHIEVEMENTS;

    for (const achievement of achievementsToCheck) {
        // بررسی اینکه دستاورد قبلاً کسب نشده باشد
        if (!userData.achievements.some(a => a.id === achievement.id)) {
            // بررسی شرط دستاورد
            if (achievement.condition(userData)) {
                // اعطای دستاورد و پاداش
                userData.achievements.push({
                    id: achievement.id,
                    name: achievement.name,
                    description: achievement.description,
                    acquiredAt: Date.now()
                });

                // اعطای پاداش
                userData.balance += achievement.reward;
                newAchievements.push({
                    name: achievement.name,
                    reward: achievement.reward
                });
            }
        }
    }

    if (newAchievements.length > 0) {
        saveData();
    }

    return newAchievements;
}

// تعریف دستورات اسلش
const commands = [
    new SlashCommandBuilder().setName('balance').setDescription('نمایش موجودی شما'),
    new SlashCommandBuilder().setName('spin').setDescription('چرخاندن گردونه و دریافت جایزه'),
    new SlashCommandBuilder().setName('leaderboard').setDescription('مشاهده لیست برترین کاربران'),
    new SlashCommandBuilder().setName('ping').setDescription('بررسی آنلاین بودن ربات'),
    new SlashCommandBuilder().setName('claim').setDescription('دریافت سکه‌های اولیه (فقط یکبار)'),
    new SlashCommandBuilder().setName('level').setDescription('نمایش سطح و تجربه شما'),

    // دستور مأموریت روزانه
    new SlashCommandBuilder().setName('quest').setDescription('دریافت و مشاهده مأموریت روزانه'),

    // دستور جیب‌زنی
      new SlashCommandBuilder()
            .setName('steal')
            .setDescription('دزدی از جیب کاربران دیگر')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true)),

        // دستور بخت‌آزمایی
        new SlashCommandBuilder()
            .setName('lottery')
            .setDescription('شرکت در قرعه‌کشی هفتگی سرور'),

        // دستور جکپات
        new SlashCommandBuilder()
            .setName('jackpot')
            .setDescription('شرکت در بازی جکپات با شانس برنده شدن کل جایزه')
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه برای شرکت در جکپات').setRequired(true)),

        // دستورات جدید
        new SlashCommandBuilder()
            .setName('transfer')
            .setDescription('انتقال سکه به کاربر دیگر')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه').setRequired(true)),

        new SlashCommandBuilder()
            .setName('daily')
            .setDescription('دریافت سکه روزانه'),

        new SlashCommandBuilder()
            .setName('bankdeposit')
            .setDescription('واریز سکه به حساب بانکی')
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه').setRequired(true)),

        new SlashCommandBuilder()
            .setName('bankwithdraw')
            .setDescription('برداشت سکه از حساب بانکی')
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه').setRequired(true)),

        new SlashCommandBuilder()
            .setName('invest')
            .setDescription('سرمایه‌گذاری سکه با نرخ سود ماهانه')
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه').setRequired(true)),

        new SlashCommandBuilder()
            .setName('profile')
            .setDescription('مشاهده پروفایل خود یا کاربر دیگر')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(false)),

        new SlashCommandBuilder()
            .setName('menu')
            .setDescription('نمایش منوی اصلی ربات'),

        // دستورات سیستم دوستی و تیم‌ها
        new SlashCommandBuilder()
            .setName('friend')
            .setDescription('مدیریت لیست دوستان')
            .addSubcommand(subcommand => 
                subcommand
                    .setName('add')
                    .setDescription('ارسال درخواست دوستی')
                    .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('accept')
                    .setDescription('پذیرش درخواست دوستی')
                    .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('list')
                    .setDescription('نمایش لیست دوستان')
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('remove')
                    .setDescription('حذف یک دوست')
                    .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            ),

        new SlashCommandBuilder()
            .setName('team')
            .setDescription('مدیریت تیم')
            .addSubcommand(subcommand => 
                subcommand
                    .setName('create')
                    .setDescription('ایجاد تیم جدید')
                    .addStringOption(option => option.setName('name').setDescription('نام تیم').setRequired(true))
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('join')
                    .setDescription('پیوستن به یک تیم')
                    .addStringOption(option => option.setName('id').setDescription('شناسه تیم').setRequired(true))
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('leave')
                    .setDescription('خروج از تیم')
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('info')
                    .setDescription('نمایش اطلاعات تیم')
            )
            .addSubcommand(subcommand => 
                subcommand
                    .setName('invite')
                    .setDescription('دعوت کاربر به تیم')
                    .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            ),

        // دستور افتخارات
        new SlashCommandBuilder()
            .setName('achievements')
            .setDescription('مشاهده دستاوردها و افتخارات'),

        // دستور چالش گروهی
        new SlashCommandBuilder()
            .setName('teamchallenge')
            .setDescription('شرکت در چالش گروهی')
            .addStringOption(option => option.setName('team_id').setDescription('شناسه تیم حریف').setRequired(true))
            .addIntegerOption(option => option.setName('bet').setDescription('میزان شرط (برای هر عضو)').setRequired(true)),

        // دستور راه‌اندازی مجدد (فقط برای مدیران)
        new SlashCommandBuilder()
            .setName('restart')
            .setDescription('راه‌اندازی مجدد ربات (فقط مدیران)')
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        // دستور مخصوص ادمین‌ها
        new SlashCommandBuilder()
            .setName('setchannel')
            .setDescription('تنظیم کانال‌های مجاز برای استفاده از ربات (فقط ادمین)')
            .addChannelOption(option => option.setName('channel').setDescription('کانال مورد نظر').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        new SlashCommandBuilder()
            .setName('addcoins')
            .setDescription('اضافه کردن سکه به کاربر (فقط ادمین)')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار سکه').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        new SlashCommandBuilder()
            .setName('shop')
            .setDescription('فروشگاه آیتم‌ها و خرید محصولات'),

        new SlashCommandBuilder()
            .setName('dice')
            .setDescription('بازی تاس')
            .addIntegerOption(option => option.setName('bet').setDescription('مبلغ شرط').setRequired(true)),

        // دستور پنل مدیریت
        new SlashCommandBuilder()
            .setName('adminpanel')
            .setDescription('پنل مدیریت ربات (فقط مدیران)')
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        // دستورات مدیریتی جدید
        new SlashCommandBuilder()
            .setName('setcoin')
            .setDescription('تنظیم موجودی سکه کاربر (فقط مدیران)')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            .addIntegerOption(option => option.setName('amount').setDescription('مقدار جدید سکه').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        new SlashCommandBuilder()
            .setName('additem')
            .setDescription('اضافه کردن آیتم به فروشگاه (فقط مدیران)')
            .addStringOption(option => option.setName('name').setDescription('نام آیتم').setRequired(true))
            .addIntegerOption(option => option.setName('price').setDescription('قیمت آیتم').setRequired(true))
            .addStringOption(option => option.setName('description').setDescription('توضیحات آیتم').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        new SlashCommandBuilder()
            .setName('removeitem')
            .setDescription('حذف آیتم از فروشگاه (فقط مدیران)')
            .addStringOption(option => option.setName('id').setDescription('شناسه آیتم').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),

        new SlashCommandBuilder()
            .setName('resetdata')
            .setDescription('بازنشانی داده‌های کاربر (فقط مدیران)')
            .addUserOption(option => option.setName('user').setDescription('کاربر مورد نظر').setRequired(true))
            .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    ];

    // اطمینان از معتبر بودن توکن قبل از استفاده
    console.log('توکن دریافت شده:', TOKEN ? `${TOKEN.substring(0, 5)}...` : 'undefined');
    if (!TOKEN || TOKEN === 'undefined') {
        console.error('❌ خطا: توکن معتبر نیست! لطفاً آن را در بخش Secrets با کلید DISCORD_TOKEN تنظیم کنید.');
        process.exit(1);
    }
    const rest = new REST({ version: '10' }).setToken(TOKEN);

    // ثبت دستورات به صورت جهانی
    (async () => {
        try {
            console.log('🔄 در حال ثبت دستورات اسلش...');
            await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });
            console.log('✅ دستورات اسلش با موفقیت ثبت شدند!');
        } catch (error) {
            console.error('❌ خطا در ثبت دستورات:', error);
        }
    })();

    // محدودیت نرخ برای دستورات - جلوگیری از اسپم
    const userCooldowns = new Map();
    const COOLDOWN_DURATION = 1000; // 1 ثانیه محدودیت بین دستورات

    // سیستم نوسانات اقتصادی - بازار پویا
    const MARKET_UPDATE_INTERVAL = 12 * 60 * 60 * 1000; // هر 12 ساعت
    let lastMarketUpdate = Date.now();

    // ایجاد بازار اگر وجود ندارد
    if (!global.market) {
        global.market = {
            priceModifiers: {},  // ضرایب قیمت آیتم‌ها
            lastUpdated: Date.now(),
            history: []  // تاریخچه تغییرات قیمت
        };
    }

    // به‌روزرسانی قیمت‌های بازار
    function updateMarketPrices() {
        if (!global.market) {
            global.market = {
                priceModifiers: {},  // ضرایب قیمت آیتم‌ها
                lastUpdated: Date.now(),
                history: []  // تاریخچه تغییرات قیمت
            };
        }

        const market = global.market;
        const now = Date.now();

        // ذخیره وضعیت قبلی برای تاریخچه
        const previousState = { ...market.priceModifiers };

        // به‌روزرسانی قیمت‌ها برای همه آیتم‌ها
        for (const item of shopItems) {
            // ایجاد یک تغییر قیمت تصادفی بین -30% تا +30%
            const priceChange = (Math.random() * 0.6) - 0.3;

            // اگر قبلاً ضریب قیمت برای این آیتم وجود نداشته، آن را به 1 تنظیم کنیم
            if (!market.priceModifiers[item.id]) {
                market.priceModifiers[item.id] = 1.0;
            }

            // اعمال تغییر قیمت با محدود کردن به بازه 0.5 تا 2 (نصف قیمت اصلی تا دو برابر)
            market.priceModifiers[item.id] += priceChange;
            market.priceModifiers[item.id] = Math.max(0.5, Math.min(2.0, market.priceModifiers[item.id]));
        }

        // ثبت تغییرات در تاریخچه
        market.history.push({
            timestamp: now,
            changes: {
                before: previousState,
                after: { ...market.priceModifiers }
            }
        });

        // محدود کردن تاریخچه به 10 مورد آخر برای کاهش مصرف حافظه
        if (market.history.length > 10) {
            market.history = market.history.slice(-10);
        }

        market.lastUpdated = now;
        lastMarketUpdate = now;
        saveData();

        return market.priceModifiers;
    }

    // محاسبه قیمت واقعی آیتم با توجه به نوسانات بازار
    function getActualItemPrice(itemId) {
        const item = shopItems.find(i => i.id === itemId);
        if (!item) return 0;

        const basePrice = item.price;
        const priceModifier = global.market?.priceModifiers?.[itemId] || 1.0;

        return Math.round(basePrice * priceModifier);
    }

    // بازی چالش گروهی
    async function startTeamChallenge(teamId1, teamId2, betAmount, interaction) {
        // بررسی وجود تیم‌ها
        if (!global.teams || !global.teams[teamId1] || !global.teams[teamId2]) {
            return { success: false, reason: 'یکی از تیم‌ها یافت نشد!' };
        }

        const team1 = global.teams[teamId1];
        const team2 = global.teams[teamId2];

        // بررسی شرط برای همه اعضای هر دو تیم
        for (const memberId of team1.members) {
            const memberData = getUser(memberId);
            if (memberData.balance < betAmount) {
                return { success: false, reason: `یکی از اعضای تیم شما (${memberId}) موجودی کافی ندارد!` };
            }
        }

        for (const memberId of team2.members) {
            const memberData = getUser(memberId);
            if (memberData.balance < betAmount) {
                return { success: false, reason: `یکی از اعضای تیم حریف (${memberId}) موجودی کافی ندارد!` };
            }
        }

        // انیمیشن چالش تیمی
        const challengeEmbed = new EmbedBuilder()
            .setTitle('🌪️ چالش گروهی')
            .setColor('#FF5733')
            .setDescription(`**${team1.name}** vs **${team2.name}**\n\nچالش گروهی در حال آغاز است...`)
            .addFields(
                { name: 'تیم 1', value: `${team1.name} - ${team1.members.length} عضو`, inline: true },
                { name: 'تیم 2', value: `${team2.name} - ${team2.members.length} عضو`, inline: true },
                { name: 'شرط', value: `${betAmount} سکه برای هر عضو`, inline: true }
            )
            .setImage('https://media.giphy.com/media/l0HlKghz8IWXFt7Fu/giphy.gif');

        await interaction.reply({ embeds: [challengeEmbed] });

        // انتظار کوتاه برای اثر دراماتیک
        await new Promise(resolve => setTimeout(resolve, 5000));

        // محاسبه امتیاز تیم‌ها
        let team1Score = 0;
        let team2Score = 0;

        // امتیاز بر اساس تعداد اعضا
        team1Score += team1.members.length * 10;
        team2Score += team2.members.length * 10;

        // امتیاز بر اساس سابقه پیروزی
        team1Score += team1.wins * 5;
        team2Score += team2.wins * 5;

        // امتیاز بر اساس مجموع سطح اعضا
        let team1LevelSum = 0;
        let team2LevelSum = 0;

        for (const memberId of team1.members) {
            team1LevelSum += getUser(memberId).level;
        }

        for (const memberId of team2.members) {
            team2LevelSum += getUser(memberId).level;
        }

        team1Score += team1LevelSum * 2;
        team2Score += team2LevelSum * 2;

        // فاکتور شانس (بین 0.8 تا 1.2)
        const team1Luck = 0.8 + (Math.random() * 0.4);
        const team2Luck = 0.8 + (Math.random() * 0.4);

        team1Score = Math.round(team1Score * team1Luck);
        team2Score = Math.round(team2Score * team2Luck);

        // تعیین برنده
        let winnerTeam, loserTeam;

        if (team1Score > team2Score) {
            winnerTeam = team1;
            loserTeam = team2;
        } else {
            winnerTeam = team2;
            loserTeam = team1;
        }

        // اعمال نتیجه
        // پرداخت جایزه به اعضای تیم برنده
        for (const memberId of winnerTeam.members) {
            const memberData = getUser(memberId);
            memberData.balance += betAmount;

            // افزایش آمار
            if (!memberData.stats) memberData.stats = {};
            memberData.stats.gamesWon = (memberData.stats.gamesWon || 0) + 1;
            memberData.stats.gamesPlayed = (memberData.stats.gamesPlayed || 0) + 1;
        }

        // کسر مبلغ از اعضای تیم بازنده
        for (const memberId of loserTeam.members) {
            const memberData = getUser(memberId);
            memberData.balance -= betAmount;

            // افزایش آمار
            if (!memberData.stats) memberData.stats = {};
            memberData.stats.gamesPlayed = (memberData.stats.gamesPlayed || 0) + 1;
        }

        // به‌روزرسانی آمار تیم‌ها
        winnerTeam.wins += 1;
        winnerTeam.score += 10;
        loserTeam.losses += 1;

        saveData();

        // اعلام نتیجه
        const resultEmbed = new EmbedBuilder()
            .setTitle('🏆 نتیجه چالش گروهی')
            .setColor('#00FF00')
            .setDescription(`**${winnerTeam.name}** با امتیاز **${team1Score === team2Score ? team1Score : (winnerTeam === team1 ? team1Score : team2Score)}** برنده شد!\n\n**${loserTeam.name}** با امتیاز **${loserTeam === team1 ? team1Score : team2Score}** باخت!`)
            .addFields(
                { name: '💰 جایزه', value: `هر عضو تیم برنده ${betAmount} سکه دریافت کرد`, inline: false },
                { name: '🔢 جزئیات امتیازات', value: 
                  `**${team1.name}**: پایه: ${team1.members.length * 10} + سابقه: ${team1.wins * 5} + سطح: ${team1LevelSum * 2} × شانس: ${team1Luck.toFixed(2)} = ${team1Score}\n` + 
                  `**${team2.name}**: پایه: ${team2.members.length * 10} + سابقه: ${team2.wins * 5} + سطح: ${team2LevelSum * 2} × شانس: ${team2Luck.toFixed(2)} = ${team2Score}`, 
                  inline: false }
            )
            .setFooter({ text: 'چالش تیمی به پایان رسید' });

        await interaction.editReply({ embeds: [resultEmbed] });

        return { success: true };
    }

    // اضافه کردن فعالیت روزانه به کاربر و بررسی دستاوردها
    function addUserActivity(userId) {
        const userData = getUser(userId);
        if (!userData) return; // محافظت در برابر داده‌های نامعتبر

        const now = Date.now();

        // ایجاد ساختار فعالیت اگر وجود ندارد
        if (!userData.activity) {
            userData.activity = {
                daily: 0,
                weekly: 0,
                monthly: 0,
                lastActivityReset: now,
                streak: 0,
                lastStreakUpdate: 0
            };
        }

        // بررسی ریست فعالیت‌ها
        const oneDayMs = 24 * 60 * 60 * 1000;
        const oneWeekMs = 7 * oneDayMs;
        const oneMonthMs = 30 * oneDayMs;

        // ریست فعالیت روزانه
        if (now - userData.activity.lastActivityReset > oneDayMs) {
            userData.activity.daily = 0;

            // ریست فعالیت هفتگی
            if (now - userData.activity.lastActivityReset > oneWeekMs) {
                userData.activity.weekly = 0;

                // ریست فعالیت ماهانه
                if (now - userData.activity.lastActivityReset > oneMonthMs) {
                    userData.activity.monthly = 0;
                }
            }

            userData.activity.lastActivityReset = now;
        }

        // افزایش فعالیت‌ها
        userData.activity.daily += 1;
        userData.activity.weekly += 1;
        userData.activity.monthly += 1;

        // بررسی تداوم روزانه (streak)
        const lastStreakDate = new Date(userData.activity.lastStreakUpdate);
        const today = new Date();

        // تنظیم ساعت، دقیقه و ثانیه به صفر برای مقایسه تاریخ‌ها
        lastStreakDate.setHours(0, 0, 0, 0);
        today.setHours(0, 0, 0, 0);

        // محاسبه تفاوت در روزها
        const dayDifference = Math.floor((today - lastStreakDate) / oneDayMs);

        if (userData.activity.lastStreakUpdate === 0) {
            // اولین فعالیت کاربر
            userData.activity.streak = 1;
        } else if (dayDifference === 1) {
            // روز متوالی - افزایش تداوم
            userData.activity.streak += 1;
        } else if (dayDifference > 1) {
            // تداوم شکسته شده - ریست
            userData.activity.streak = 1;
        }

        userData.activity.lastStreakUpdate = now;

        // بررسی دستاوردهای مرتبط با فعالیت
        if (userData.activity.streak >= 7) {
            checkAchievement(userId, 'daily_streak');
        }

        if (userData.level >= 10) {
            checkAchievement(userId, 'high_level');
        }

        saveData();
    }

    client.on('interactionCreate', async (interaction) => {
        if (!interaction.isCommand() && !interaction.isButton()) return;

        const userId = interaction.user.id;
        const now = Date.now();

        // بررسی نوع تعامل برای گزارش‌دهی بهتر
        const interactionType = interaction.isCommand() ? 
            `command: ${interaction.commandName}` : 
            `button: ${interaction.customId}`;

        // لاگ کمتر برای کاهش حجم لاگ در محیط تولید
        if (process.env.NODE_ENV !== 'production') {
            console.log(`👤 تعامل جدید از کاربر ${interaction.user.tag} (${interaction.user.id}) - ${interactionType}`);
        }

        // برای جلوگیری از مشکلات تعامل، یک مکانیزم try-catch ایجاد می‌کنیم
        try {
            // بررسی محدودیت نرخ با مدیریت کاربران برتر و استثناها
            const isExemptFromCooldown = interaction.member && 
                                         interaction.member.permissions && 
                                         interaction.member.permissions.has(PermissionFlagsBits.Administrator);

            // اگر کاربر دارای دسترسی‌های خاص نیست، محدودیت نرخ را اعمال کن
            if (!isExemptFromCooldown && userCooldowns.has(userId)) {
                const cooldownExpiration = userCooldowns.get(userId) + COOLDOWN_DURATION;

                if (now < cooldownExpiration) {
                    const timeLeft = (cooldownExpiration - now) / 1000;

                    // بهبود پیام خطای محدودیت نرخ
                    const cooldownMessage = `⏱️ لطفاً ${timeLeft.toFixed(1)} ثانیه صبر کنید!`;

                    try {
                        if (interaction.deferred || interaction.replied) {
                            return await interaction.followUp({ 
                                content: cooldownMessage, 
                                ephemeral: true 
                            });
                        } else {
                            return await interaction.reply({ 
                                content: cooldownMessage, 
                                ephemeral: true 
                            });
                        }
                    } catch (replyError) {
                        console.error(`❌ خطا در پاسخ به محدودیت نرخ: ${replyError.message}`);
                        return; // خروج در صورت خطا در پاسخ
                    }
                }
            }

            // بررسی محدودیت کانال (اگر تنظیم شده باشد)
            if (allowedChannels.length > 0 && !allowedChannels.includes(interaction.channelId) && interaction.isCommand()) {
                const channelMessage = '❌ این دستور فقط در کانال‌های مجاز قابل استفاده است!';

                try {
                    if (interaction.deferred || interaction.replied) {
                        return await interaction.followUp({ content: channelMessage, ephemeral: true });
                    } else {
                        return await interaction.reply({ content: channelMessage, ephemeral: true });
                    }
                } catch (channelError) {
                    console.error(`❌ خطا در بررسی محدودیت کانال: ${channelError.message}`);
                    return; // خروج در صورت خطا
                }
            }

            // به‌روزرسانی محدودیت نرخ
            userCooldowns.set(userId, now);

            // افزایش فعالیت کاربر
            addUserActivity(userId);

            // بررسی بروزرسانی بازار
            if (now - lastMarketUpdate >= MARKET_UPDATE_INTERVAL) {
                const newPrices = updateMarketPrices();
                console.log('🔄 قیمت‌های بازار به‌روزرسانی شدند');
            }

        // تعریف دکمه برگشت برای استفاده در بخش‌های مختلف
        const backButton = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('back_to_menu')
                    .setLabel('🔙 بازگشت به منوی اصلی')
                    .setStyle(ButtonStyle.Secondary)
            );

        // پردازش دستورات
        if (interaction.isCommand()) {
            const { commandName, user } = interaction;
            const userData = getUser(user.id);

            try {
                switch(commandName) {
                    case 'balance':
                        await interaction.reply(`💰 موجودی شما:
                        **کیف پول**: ${userData.balance} ${COIN_NAME}
                        **حساب بانکی**: ${userData.bank || 0} ${COIN_NAME}
                        **سرمایه‌گذاری**: ${userData.investment || 0} ${COIN_NAME}`);
                        break;

                    case 'spin':
                        let lastSpin = userData.lastSpin || 0;
                        let currentTime = Date.now();

                        if (currentTime - lastSpin < 86400000) { // یک روز به میلی‌ثانیه
                            // محاسبه زمان باقی‌مانده
                            const remainingTime = 86400000 - (currentTime - lastSpin);
                            const hours = Math.floor(remainingTime / 3600000);
                            const minutes = Math.floor((remainingTime % 3600000) / 60000);
                            const seconds = Math.floor((remainingTime % 60000) / 1000);

                            return await interaction.reply(`⏳ شما امروز گردونه را چرخاندید! زمان باقی‌مانده تا چرخش بعدی: **${hours} ساعت و ${minutes} دقیقه و ${seconds} ثانیه**`);
                        }

                        let reward = spinWheel();
                        userData.balance += reward;
                        userData.lastSpin = currentTime;

                        // افزودن XP برای چرخاندن گردونه
                        const spinLeveledUp = addXP(user.id, 5);
                        let spinLevelUpMessage = '';
                        if (spinLeveledUp) {
                            spinLevelUpMessage = `\n🎉 تبریک! شما به سطح ${userData.level} ارتقا یافتید!`;
                        }

                        saveData();

                        // ایجاد امبد برای نمایش بهتر نتیجه
                        const spinEmbed = new EmbedBuilder()
                            .setTitle('🎡 گردونه شانس')
                            .setColor(reward > 0 ? '#00FF00' : '#FF0000')
                            .setDescription(reward > 0 
                                ? `تبریک! شما **${reward} ${COIN_NAME}** برنده شدید!${spinLevelUpMessage}` 
                                : `متأسفانه این بار چیزی برنده نشدید! 😢${spinLevelUpMessage}`)
                            .setFooter({ text: 'می‌توانید فردا دوباره شانس خود را امتحان کنید!' });

                        await interaction.reply({ embeds: [spinEmbed] });
                        break;

                    case 'leaderboard':
                        let sortedUsers = Object.entries(users).sort((a, b) => 
                            (b[1].balance + (b[1].bank || 0) + (b[1].investment || 0)) - 
                            (a[1].balance + (a[1].bank || 0) + (a[1].investment || 0))
                        );
                        let leaderboard = sortedUsers.slice(0, 10).map((u, i) => {
                            const total = u[1].balance + (u[1].bank || 0) + (u[1].investment || 0);
                            return `${i + 1}. <@${u[0]}> - ${total} ${COIN_NAME}`;
                        }).join('\n');

                        await interaction.reply({ 
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('🏆 لیست برترین کاربران')
                                    .setDescription(leaderboard)
                                    .setColor('#FFD700')
                            ] 
                        });
                        break;

                    case 'ping':
                        const ping = client.ws.ping;
                        await interaction.reply(`🏓 پینگ! تاخیر: ${ping}ms`);
                        break;

                    case 'claim':
                        // دریافت سکه‌های اولیه
                        const claimUserData = getUser(interaction.user.id);

                        // اگر قبلاً دریافت کرده است
                        if (claimUserData.initialClaimed) {
                            return await interaction.reply(`❌ شما قبلاً سکه‌های اولیه خود را دریافت کرده‌اید!`);
                        }

                        // بررسی زمان عضویت - باید حداقل 10 دقیقه گذشته باشد
                        // اگر زمان عضویت ثبت نشده، آن را الان ثبت می‌کنیم
                        if (!claimUserData.joinTime) {
                            claimUserData.joinTime = Date.now();
                            saveData();
                            return await interaction.reply(`⏳ شما تازه ثبت‌نام کرده‌اید! برای دریافت سکه‌های اولیه باید حداقل 10 دقیقه صبر کنید.`);
                        }

                        const joinTime = claimUserData.joinTime;
                        const now = Date.now();
                        const tenMinutesMs = 600000; // 10 دقیقه به میلی‌ثانیه

                        if (now - joinTime < tenMinutesMs) {
                            const remainingTime = tenMinutesMs - (now - joinTime);
                            const minutes = Math.floor(remainingTime / 60000);
                            const seconds = Math.floor((remainingTime % 60000) / 1000);

                            return await interaction.reply(`⏳ برای دریافت سکه‌های اولیه باید حداقل 10 دقیقه از زمان عضویت شما گذشته باشد. لطفاً ${minutes} دقیقه و ${seconds} ثانیه دیگر صبر کنید.`);
                        }

                        // اعطای سکه‌های اولیه
                        claimUserData.balance += 100;
                        claimUserData.initialClaimed = true;
                        saveData();

                        await interaction.reply({
                            embeds: [
                                new EmbedBuilder()
                                    .setTitle('🎉 پاداش اولیه دریافت شد!')
                                    .setColor('#00FF00')
                                    .setDescription(`شما 100 ${COIN_NAME} به عنوان پاداش اولیه دریافت کردید!`)
                                    .setFooter({ text: 'به ربات اقتصادی ما خوش آمدید!' })
                            ]
                        });
                        break;

                    case 'level':
                        // نمایش سطح و تجربه کاربر
                        const levelUserData = getUser(interaction.user.id);
                        const nextLevelXP = (levelUserData.level + 1) * 100;

                        const levelEmbed = new EmbedBuilder()
                            .setTitle(`🏆 پروفایل سطح ${interaction.user.username}`)
                            .setColor('#00FFFF')
                            .setThumbnail(interaction.user.displayAvatarURL())
                            .addFields(
                                { name: '📊 سطح فعلی', value: `${levelUserData.level}`, inline: true },
                                { name: '✨ تجربه', value: `${levelUserData.xp}/${nextLevelXP} XP`, inline: true },
                                { name: '💡 نکته', value: `شما برای رسیدن به سطح بعدی به ${nextLevelXP - levelUserData.xp} XP نیاز دارید.` }
                            )
                            .setFooter({ text: 'با فعالیت در سرور، تجربه و سطح شما افزایش می‌یابد.' });

                        await interaction.reply({ embeds: [levelEmbed] });
                        break;

                    case 'lottery':
                        // سیستم بخت‌آزمایی
                        const lotteryUserData = getUser(interaction.user.id);

                        // تعیین زمان باقی‌مانده تا قرعه‌کشی بعدی
                        const timeToNextDraw = nextLotteryDraw - Date.now();
                        const daysToNext = Math.floor(timeToNextDraw / (24 * 60 * 60 * 1000));
                        const hoursToNext = Math.floor((timeToNextDraw % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));

                        // ساخت امبد اطلاعات بخت‌آزمایی
                        const lotteryInfoEmbed = new EmbedBuilder()
                            .setTitle('🎟️ بخت‌آزمایی سرور')
                            .setColor('#FF9900')
                            .setDescription('شانس خود را امتحان کنید و برنده جایزه بزرگ شوید!')
                            .addFields(
                                { name: '💰 جایزه فعلی', value: `${lotteryPool} ${COIN_NAME}`, inline: true },
                                { name: '🎫 قیمت هر بلیط', value: `${LOTTERY_TICKET_PRICE} ${COIN_NAME}`, inline: true },
                                { name: '📊 تعداد بلیط‌های شما', value: `${lotteryUserData.lotteryTickets || 0}/${MAX_TICKETS_PER_WEEK}`, inline: true },
                                { name: '⏱️ زمان باقی‌مانده تا قرعه‌کشی', value: `${daysToNext} روز و ${hoursToNext} ساعت`, inline: false },
                                { name: '📜 قوانین', value: 'هر کاربر می‌تواند حداکثر 5 بلیط در هفته خریداری کند.\nجایزه به یک برنده تصادفی اهدا می‌شود.', inline: false }
                            )
                            .setFooter({ text: 'بلیط‌های بیشتر = شانس بیشتر برای برنده شدن!' });

                        // دکمه خرید بلیط
                        const buyTicketButton = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId('buy_lottery_ticket')
                                    .setLabel(`خرید بلیط (${LOTTERY_TICKET_PRICE} سکه)`)
                                    .setStyle(ButtonStyle.Success)
                                    .setEmoji('🎟️')
                            );

                        await interaction.reply({ embeds: [lotteryInfoEmbed], components: [buyTicketButton] });
                        break;

                    case 'jackpot':
                        // سیستم جکپات
                        const jackpotAmount = interaction.options.getInteger('amount');
                        const jackpotUserData = getUser(interaction.user.id);

                        // بررسی مقدار ورودی
                        if (jackpotAmount < 10) {
                            return await interaction.reply('❌ حداقل مبلغ برای شرکت در جکپات 10 سکه است!');
                        }

                        if (jackpotUserData.balance < jackpotAmount) {
                            return await interaction.reply(`❌ موجودی شما برای شرکت در جکپات کافی نیست! (موجودی: ${jackpotUserData.balance} ${COIN_NAME})`);
                        }

                        // ایجاد دکمه‌های تأیید
                        const confirmJackpotRow = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`confirm_jackpot_${jackpotAmount}`)
                                    .setLabel('تأیید شرکت در جکپات')
                                    .setStyle(ButtonStyle.Success),
                                new ButtonBuilder()
                                    .setCustomId('cancel_jackpot')
                                    .setLabel('انصراف')
                                    .setStyle(ButtonStyle.Danger)
                            );

                        // لیست شرکت‌کنندگان فعلی و شانس آنها
                        let participantsList = '';
                        if (jackpotPlayers.length > 0) {
                            // محاسبه مجموع مبالغ
                            const totalJackpot = jackpotPlayers.reduce((sum, player) => sum + player.amount, 0);

                            // لیست شرکت‌کنندگان
                            participantsList = jackpotPlayers.map((player, index) => {
                                const chance = ((player.amount / totalJackpot) * 100).toFixed(2);
                                return `${index + 1}. <@${player.userId}> - ${player.amount} ${COIN_NAME} (شانس: ${chance}%)`;
                            }).join('\n');
                        } else {
                            participantsList = 'هنوز هیچ کاربری در این دوره از جکپات شرکت نکرده است!';
                        }

                        // محاسبه شانس کاربر در صورت شرکت
                        const newTotalPool = jackpotPool + jackpotAmount;
                        const userCurrentContribution = jackpotUserData.jackpotContribution || 0;
                        const userNewContribution = userCurrentContribution + jackpotAmount;
                        const userChance = ((userNewContribution / newTotalPool) * 100).toFixed(2);

                        const jackpotEmbed = new EmbedBuilder()
                            .setTitle('💎 جکپات سرور')
                            .setColor('#9B59B6')
                            .setDescription(`آیا می‌خواهید با ${jackpotAmount} سکه در جکپات شرکت کنید؟\nهر چه بیشتر سکه بگذارید، شانس برنده شدن شما بیشتر است!`)
                            .addFields(
                                { name: '💰 مجموع جکپات فعلی', value: `${jackpotPool} ${COIN_NAME}`, inline: true },
                                { name: '🎲 شانس شما در صورت شرکت', value: `${userChance}%`, inline: true },
                                { name: '👥 شرکت‌کنندگان فعلی', value: participantsList, inline: false },
                                { name: '📝 قوانین', value: 'در پایان هر دوره، یک نفر برنده کل جایزه می‌شود.\nشانس برنده شدن متناسب با مبلغ شرکت شماست.', inline: false }
                            )
                            .setFooter({ text: 'هر چه بیشتر شرکت کنید، شانس بیشتری دارید!' });

                        await interaction.reply({ embeds: [jackpotEmbed], components: [confirmJackpotRow] });
                        break;

                    case 'quest':
                        // بررسی و تخصیص مأموریت روزانه
                        const questResult = checkAndAssignDailyQuest(interaction.user.id);
                        const questUserData = getUser(interaction.user.id);

                        // ساخت امبد برای نمایش مأموریت
                        const questEmbed = new EmbedBuilder()
                            .setTitle('🎯 مأموریت روزانه')
                            .setColor('#FFD700')
                            .setDescription(questResult.isNew ? '🆕 یک مأموریت جدید برای شما تعیین شد!' : 'مأموریت فعلی شما:')
                            .addFields(
                                { name: '📝 شرح مأموریت', value: questUserData.dailyQuest.description, inline: false },
                                { name: '🎁 پاداش', value: `${questUserData.dailyQuest.reward} ${COIN_NAME}`, inline: true },
                                { name: '📊 پیشرفت', value: `${questUserData.dailyQuestProgress}/${questUserData.dailyQuest.goal}`, inline: true },
                                { name: '📈 تعداد مأموریت‌های تکمیل شده', value: `${questUserData.questsCompleted}`, inline: false }
                            )
                            .setFooter({ text: 'با تکمیل مأموریت‌ها پاداش دریافت کنید!' });

                        // اضافه کردن نوار پیشرفت
                        const progressPercentage = Math.floor((userData.dailyQuestProgress / userData.dailyQuest.goal) * 100);
                        const progressBar = createProgressBar(progressPercentage);

                        questEmbed.addFields({ name: '🔄 پیشرفت', value: progressBar, inline: false });

                        await interaction.reply({ embeds: [questEmbed] });
                        break;

                    case 'steal':
                        // دزدی از جیب کاربران دیگر
                        const targetUserSteal = interaction.options.getUser('user');

                        // بررسی خودکشی!
                        if (targetUserSteal.id === interaction.user.id) {
                            return await interaction.reply('❌ شما نمی‌توانید از خودتان دزدی کنید!');
                        }

                        // بررسی دزدی از ربات
                        if (targetUserSteal.bot) {
                            return await interaction.reply('❌ ربات‌ها چیزی برای دزدیده شدن ندارند!');
                        }

                        // بررسی امکان دزدی
                        const stealCheck = canSteal(interaction.user.id, targetUserSteal.id);
                        if (!stealCheck.allowed) {
                            return await interaction.reply(stealCheck.reason);
                        }

                        // محاسبه مقدار قابل دزدی
                        const stealerData = getUser(interaction.user.id);
                        const targetData = getUser(targetUserSteal.id);

                        // حداکثر 20% از موجودی جیب کاربر هدف
                        const maxStealAmount = Math.floor(targetData.balance * MAX_STEAL_PERCENTAGE);
                        let stolenAmount = Math.floor(Math.random() * maxStealAmount) + 1;

                        // کاربر ممکن است موجودی کمتری داشته باشد
                        stolenAmount = Math.min(stolenAmount, targetData.balance);

                        // بررسی شانس موفقیت (70% موفقیت)
                        const stealSuccess = Math.random() < 0.7;

                        if (stealSuccess) {
                            // دزدی موفق
                            stealerData.balance += stolenAmount;
                            targetData.balance -= stolenAmount;

                            // به‌روزرسانی آمار دزدی
                            stealerData.dailySteals++;
                            stealerData.stolenFrom[targetUserSteal.id] = Date.now();
                            targetData.lastTimeStolen = Date.now();

                            // افزودن XP برای دزدی موفق
                            const stealLeveledUp = addXP(interaction.user.id, 5);
                            let stealLevelUpMessage = '';
                            if (stealLeveledUp) {
                                stealLevelUpMessage = `\n🎉 تبریک! شما به سطح ${stealerData.level} ارتقا یافتید!`;
                            }

                            saveData();

                            const stealEmbed = new EmbedBuilder()
                                .setTitle('🥷 جیب‌زنی موفق!')
                                .setColor('#00FF00')
                                .setDescription(`شما با موفقیت **${stolenAmount} ${COIN_NAME}** از جیب ${targetUserSteal.username} دزدیدید!${stealLevelUpMessage}`)
                                .setFooter({ text: `هوشیار باشید! ممکن است کاربران دیگر هم از شما دزدی کنند!` });

                            await interaction.reply({ embeds: [stealEmbed] });
                        } else {
                            // دزدی ناموفق
                            // جریمه برای دزدی ناموفق (10% از مبلغی که می‌خواستید بدزدید)
                            const penalty = Math.floor(stolenAmount * 0.1);
                            stealerData.balance -= penalty;

                            // به‌روزرسانی آمار دزدی
                            stealerData.dailySteals++;
                            stealerData.stolenFrom[targetUserSteal.id] = Date.now();

                            saveData();

                            const failEmbed = new EmbedBuilder()
                                .setTitle('🚫 جیب‌زنی ناموفق!')
                                .setColor('#FF0000')
                                .setDescription(`مچ شما هنگام دزدی از ${targetUserSteal.username} گرفته شد! شما **${penalty} ${COIN_NAME}** به عنوان جریمه پرداخت کردید.`)
                                .setFooter({ text: `بهتر است دزدی نکنید!` });

                            await interaction.reply({ embeds: [failEmbed] });
                        }
                        break;

                    case 'transfer':
                        const targetUser = interaction.options.getUser('user');
                        const amount = interaction.options.getInteger('amount');

                        // بررسی‌های اولیه
                        if (targetUser.id === user.id) {
                            return await interaction.reply('❌ شما نمی‌توانید به خودتان سکه ارسال کنید!');
                        }

                        if (targetUser.bot) {
                            return await interaction.reply('❌ شما نمی‌توانید به ربات‌ها سکه ارسال کنید!');
                        }

                        if (amount <= 0) {
                            return await interaction.reply('❌ مقدار باید بیشتر از صفر باشد!');
                        }

                        if (userData.balance < amount) {
                            return await interaction.reply(`❌ موجودی شما کافی نیست! (موجودی فعلی: ${userData.balance} ${COIN_NAME})`);
                        }

                        // بررسی محدودیت‌های انتقال
                        const transferCheck = canTransferCoins(user.id, targetUser.id, amount);
                        if (!transferCheck.allowed) {
                            return await interaction.reply(transferCheck.reason);
                        }

                        // ایجاد دکمه تأیید
                        const confirmRow = new ActionRowBuilder()
                            .addComponents(
                                new ButtonBuilder()
                                    .setCustomId(`confirm_transfer_${targetUser.id}_${amount}`)
                                    .setLabel('تأیید انتقال')
                                    .setStyle(ButtonStyle.Success),
                                new ButtonBuilder()
                                    .setCustomId('cancel_transfer')
                                    .setLabel('لغو')
                                    .setStyle(ButtonStyle.Danger)
                            );

                        await interaction.reply({
                            content: `آیا از انتقال ${amount} ${COIN_NAME} به ${targetUser.username} اطمینان دارید؟`,
                            components: [confirmRow],
                            ephemeral: true
                        });
                        break;

                    case 'daily':
                        let lastDaily = userData.lastDaily || 0;
                        const dailyCurrentTime = Date.now();

                        if (dailyCurrentTime - lastDaily < 86400000) { // یک روز به میلی‌ثانیه
                            const remainingTime = 86400000 - (dailyCurrentTime - lastDaily);
                            const hours = Math.floor(remainingTime / 3600000);
                            const minutes = Math.floor((remainingTime % 3600000) / 60000);
                            return await interaction.reply(`⏳ شما قبلاً جایزه روزانه خود را دریافت کرده‌اید! ${hours} ساعت و ${minutes} دقیقه دیگر می‌توانید دوباره جایزه بگیرید.`);
                        }

                                            const dailyReward = 50;
                                            userData.balance += dailyReward;
                                            userData.lastDaily = dailyCurrentTime;

                                            // افزودن XP برای دریافت جایزه روزانه
                                            const dailyLeveledUp = addXP(user.id, 10);
                                            let dailyLevelUpMessage = '';
                                            if (dailyLeveledUp) {
                                                dailyLevelUpMessage = `\n🎉 تبریک! شما به سطح ${userData.level} ارتقا یافتید!`;
                                            }

                                            saveData();

                                            await interaction.reply(`✅ شما جایزه روزانه خود را دریافت کردید: ${dailyReward} ${COIN_NAME}!${dailyLevelUpMessage}`);
                                            break;

                                        case 'bankdeposit':
                                            const depositAmount = interaction.options.getInteger('amount');

                                            if (depositAmount <= 0) {
                                                return await interaction.reply('❌ مقدار باید بیشتر از صفر باشد!');
                                            }

                                            if (userData.balance < depositAmount) {
                                                return await interaction.reply('❌ موجودی کیف پول شما کافی نیست!');
                                            }

                                            userData.balance -= depositAmount;
                                            userData.bank = (userData.bank || 0) + depositAmount;
                                            saveData();

                                            await interaction.reply(`✅ مبلغ ${depositAmount} ${COIN_NAME} به حساب بانکی شما واریز شد.`);
                                            break;

                                        case 'bankwithdraw':
                                            const withdrawAmount = interaction.options.getInteger('amount');

                                            if (withdrawAmount <= 0) {
                                                return await interaction.reply('❌ مقدار باید بیشتر از صفر باشد!');
                                            }

                                            if (!userData.bank || userData.bank < withdrawAmount) {
                                                return await interaction.reply('❌ موجودی حساب بانکی شما کافی نیست!');
                                            }

                                            userData.bank -= withdrawAmount;
                                            userData.balance += withdrawAmount;
                                            saveData();

                                            await interaction.reply(`✅ مبلغ ${withdrawAmount} ${COIN_NAME} از حساب بانکی شما برداشت شد.`);
                                            break;

                                        case 'invest':
                                            const investAmount = interaction.options.getInteger('amount');

                                            if (investAmount <= 0) {
                                                return await interaction.reply('❌ مقدار باید بیشتر از صفر باشد!');
                                            }

                                            if (userData.balance < investAmount) {
                                                return await interaction.reply('❌ موجودی کیف پول شما کافی نیست!');
                                            }

                                            userData.balance -= investAmount;
                                            userData.investment = (userData.investment || 0) + investAmount;
                                            saveData();

                                            await interaction.reply(`✅ شما ${investAmount} ${COIN_NAME} را سرمایه‌گذاری کردید! سود ماهانه ${INVESTMENT_RATE * 100}% خواهد بود.`);
                                            break;

                                        case 'profile':
                                            const targetUserProfile = interaction.options.getUser('user') || user;
                                            const targetUserData = getUser(targetUserProfile.id);
                                            const totalBalance = targetUserData.balance + (targetUserData.bank || 0) + (targetUserData.investment || 0);

                                            // محاسبه اطلاعات لول
                                            const profileNextLevelXP = (targetUserData.level + 1) * 100;
                                            const levelProgress = Math.floor((targetUserData.xp / profileNextLevelXP) * 100);

                                            // ایجاد نوار پیشرفت لول
                                            const levelProgressBar = createProgressBar(levelProgress);

                                            // اطلاعات تیم
                                            let teamInfo = 'بدون تیم';
                                            if (targetUserData.team && global.teams && global.teams[targetUserData.team]) {
                                                const teamData = global.teams[targetUserData.team];
                                                const isLeader = teamData.leader === targetUserProfile.id;
                                                teamInfo = `${teamData.name} ${isLeader ? '👑' : '👤'} (${teamData.members.length} عضو)`;
                                            }

                                            // اطلاعات دستاوردها
                                            const achievements = targetUserData.achievements || [];
                                            let achievementsInfo = `${achievements.length}/${ACHIEVEMENTS.length} دستاورد`;

                                            // بررسی آمار بازی‌ها
                                            const stats = targetUserData.stats || { gamesPlayed: 0, gamesWon: 0, questsCompleted: 0 };

                                            // لیست دوستان
                                            const friendsCount = targetUserData.friends?.length || 0;

                                            const profileEmbed = new EmbedBuilder()
                                                .setTitle(`پروفایل ${targetUserProfile.username}`)
                                                .setThumbnail(targetUserProfile.displayAvatarURL())
                                                .addFields(
                                                    { name: '💰 کیف پول', value: `${targetUserData.balance} ${COIN_NAME}`, inline: true },
                                                    { name: '🏦 حساب بانکی', value: `${targetUserData.bank || 0} ${COIN_NAME}`, inline: true },
                                                    { name: '📈 سرمایه‌گذاری', value: `${targetUserData.investment || 0} ${COIN_NAME}`, inline: true },
                                                    { name: '📊 مجموع دارایی', value: `${totalBalance} ${COIN_NAME}`, inline: false },
                                                    { name: '🏆 سطح', value: `${targetUserData.level} (${targetUserData.xp}/${profileNextLevelXP} XP)`, inline: true },
                                                    { name: '🎮 تیم', value: teamInfo, inline: true },
                                                    { name: '📈 پیشرفت لول', value: levelProgressBar, inline: false },
                                                    { name: '🗂️ اطلاعات اجتماعی', value: `**دوستان**: ${friendsCount}\n**دستاوردها**: ${achievementsInfo}`, inline: true },
                                                    { name: '📊 آمار', value: `**بازی‌ها**: ${stats.gamesPlayed || 0}\n**پیروزی‌ها**: ${stats.gamesWon || 0}\n**کوئست‌ها**: ${targetUserData.questsCompleted || 0}`, inline: true }
                                                )
                                                .setColor('#00FFFF')
                                                .setFooter({ text: `عضو شده در: ${new Date(targetUserData.joinTime).toLocaleDateString()}`, iconURL: client.user.displayAvatarURL() });

                                            // اگر دستاوردی داشته باشد، آخرین دستاورد را نمایش می‌دهیم
                                            if (achievements.length > 0) {
                                                const latestAchievement = achievements[achievements.length - 1];
                                                profileEmbed.addFields({ 
                                                    name: '🏅 آخرین دستاورد', 
                                                    value: `**${latestAchievement.name}**\n${latestAchievement.description}`, 
                                                    inline: false 
                                                });
                                            }

                                            await interaction.reply({ embeds: [profileEmbed] });
                                            break;

                                        case 'menu':
                                            const menuEmbed = new EmbedBuilder()
                                                .setColor('#0099ff')
                                                .setTitle('🎮 منوی اصلی')
                                                .setDescription('لطفا یکی از گزینه‌ها را انتخاب کنید:')
                                                .setThumbnail(client.user.displayAvatarURL())
                                                .setFooter({ text: 'این منو فقط برای شما قابل مشاهده است', iconURL: interaction.user.displayAvatarURL() });

                                            const row1 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('economy')
                                                        .setLabel('💰 اقتصاد')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('games')
                                                        .setLabel('🎲 بازی‌ها')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('shop')
                                                        .setLabel('🛒 فروشگاه')
                                                        .setStyle(ButtonStyle.Danger)
                                                );

                                            const row2 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('quests')
                                                        .setLabel('📜 کوئست‌ها')
                                                        .setStyle(ButtonStyle.Secondary),
                                                    new ButtonBuilder()
                                                        .setCustomId('inventory')
                                                        .setLabel('🎒 کوله‌پشتی')
                                                        .setStyle(ButtonStyle.Secondary),
                                                    new ButtonBuilder()
                                                        .setCustomId('help')
                                                        .setLabel('❓ راهنما')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.reply({ embeds: [menuEmbed], components: [row1, row2], ephemeral: true });
                                            break;

                                        case 'setchannel':
                                            const channel = interaction.options.getChannel('channel');
                                            if (!allowedChannels.includes(channel.id)) {
                                                allowedChannels.push(channel.id);
                                            }
                                            await interaction.reply(`✅ کانال ${channel} به لیست کانال‌های مجاز اضافه شد.`);
                                            break;

                                        case 'addcoins':
                                            const userToAddCoins = interaction.options.getUser('user');
                                            const coinsAmount = interaction.options.getInteger('amount');

                                            if (coinsAmount <= 0) {
                                                return await interaction.reply('❌ مقدار باید بیشتر از صفر باشد!');
                                            }

                                            const userDataToAddCoins = getUser(userToAddCoins.id);
                                            userDataToAddCoins.balance += coinsAmount;
                                            saveData();

                                            await interaction.reply(`✅ مقدار ${coinsAmount} ${COIN_NAME} به کاربر ${userToAddCoins.username} اضافه شد.`);
                                            break;

                                        case 'shop':
                                            const shopEmbed = new EmbedBuilder()
                                                .setTitle('🛒 فروشگاه')
                                                .setColor('#FF00FF')
                                                .setDescription('برای خرید، بر روی دکمه مورد نظر کلیک کنید:');

                                            // اضافه کردن آیتم‌ها به امبد
                                            shopItems.forEach(item => {
                                                shopEmbed.addFields({ 
                                                    name: `${item.name} - ${item.price} ${COIN_NAME}`, 
                                                    value: item.description,
                                                    inline: true 
                                                });
                                            });

                                            // ایجاد دکمه‌ها برای خرید (حداکثر 5 دکمه در هر ردیف)
                                            const shopRow = new ActionRowBuilder();

                                            // اضافه کردن دکمه‌ها بر اساس آیتم‌های موجود (حداکثر 5 دکمه)
                                            const maxButtonsToShow = Math.min(shopItems.length, 5);
                                            for (let i = 0; i < maxButtonsToShow; i++) {
                                                shopRow.addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId(`buy_${shopItems[i].id}`)
                                                        .setLabel(`خرید ${shopItems[i].name}`)
                                                        .setStyle(ButtonStyle.Primary)
                                                );
                                            }

                                            await interaction.reply({ embeds: [shopEmbed], components: [shopRow] });
                                            break;
                                        case 'dice':
                                            const betAmount = interaction.options.getInteger('bet');
                                            const userData = getUser(interaction.user.id);

                                            if (userData.balance < betAmount) {
                                                return await interaction.reply({
                                                    content: `❌ موجودی شما برای شرط بندی ${betAmount} ${COIN_NAME} کافی نیست!`,
                                                    ephemeral: true
                                                });
                                            }

                                            // دکمه‌های شرط
                                            const diceBetOptions = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId(`dice_bet_higher_${betAmount}`)
                                                        .setLabel('عدد بزرگتر (شما > ربات)')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId(`dice_bet_lower_${betAmount}`)
                                                        .setLabel('عدد کوچکتر (شما < ربات)')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId(`dice_bet_equal_${betAmount}`)
                                                        .setLabel('مساوی (شما = ربات)')
                                                        .setStyle(ButtonStyle.Primary)
                                                );

                                            // امبد توضیحات شرط
                                            const diceBetEmbed = new EmbedBuilder()
                                                .setTitle('🎲 بازی تاس پیشرفته')
                                                .setColor('#9B59B6')
                                                .setDescription(`شما ${betAmount} ${COIN_NAME} شرط بسته‌اید. لطفاً نوع شرط خود را انتخاب کنید:`)
                                                .addFields(
                                                    { name: '📈 عدد بزرگتر', value: 'شرط می‌بندید که عدد تاس شما بزرگتر از عدد تاس ربات باشد.\n**ضریب برد**: 1.5x', inline: true },
                                                    { name: '📉 عدد کوچکتر', value: 'شرط می‌بندید که عدد تاس شما کوچکتر از عدد تاس ربات باشد.\n**ضریب برد**: 1.5x', inline: true },
                                                    { name: '🔄 مساوی', value: 'شرط می‌بندید که عدد تاس شما با عدد تاس ربات برابر باشد.\n**ضریب برد**: 5x', inline: true }
                                                )
                                                .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHR6c3Bqc2h3NGRzcWprMHhudnMyZmhsMnNtbHcyZ3ZzdnBxdjRrbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tG7vpy33b8QV9J1zHu/giphy.gif')
                                                .setFooter({ text: 'انتخاب نوع شرط به استراتژی شما بستگی دارد!' });

                                            await interaction.reply({ embeds: [diceBetEmbed], components: [diceBetOptions] });
                                            break;

                                        case 'dice_bet_higher_3':
                                        case 'dice_bet_higher_5':
                                        case 'dice_bet_higher_10':
                                        case 'dice_bet_higher_20':
                                        case 'dice_bet_higher_50':
                                        case 'dice_bet_higher_100':
                                        case 'dice_bet_lower_3':
                                        case 'dice_bet_lower_5':
                                        case 'dice_bet_lower_10':
                                        case 'dice_bet_lower_20': 
                                        case 'dice_bet_lower_50':
                                        case 'dice_bet_lower_100':
                                        case 'dice_bet_equal_3':
                                        case 'dice_bet_equal_5':
                                        case 'dice_bet_equal_10':
                                        case 'dice_bet_equal_20':
                                        case 'dice_bet_equal_50':
                                        case 'dice_bet_equal_100':
                                            // استخراج نوع شرط و مبلغ از کاستوم آیدی
                                            const betParts = interaction.customId.split('_');
                                            const betType = betParts[2]; // higher, lower, equal
                                            const betValue = parseInt(betParts[3]);

                                            const betUserData = getUser(interaction.user.id);

                                            // بررسی موجودی کافی
                                            if (betUserData.balance < betValue) {
                                                await interaction.update({
                                                    content: `❌ موجودی شما برای شرط بندی ${betValue} ${COIN_NAME} کافی نیست!`,
                                                    embeds: [],
                                                    components: []
                                                });
                                                return;
                                            }

                                            // نمایش انیمیشن تاس
                                            const rollingDiceBetEmbed = new EmbedBuilder()
                                                .setTitle('🎲 بازی تاس در حال اجرا...')
                                                .setColor('#9B59B6')
                                                .setDescription('تاس‌ها در حال چرخش هستند...')
                                                .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHR6c3Bqc2h3NGRzcWprMHhudnMyZmhsMnNtbHcyZ3ZzdnBxdjRrbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tG7vpy33b8QV9J1zHu/giphy.gif');

                                            await interaction.update({ embeds: [rollingDiceBetEmbed], components: [] });

                                            // تاخیر برای نمایش انیمیشن
                                            setTimeout(async () => {
                                                // تاس انداختن کاربر
                                                const userRollBet = Math.floor(Math.random() * 6) + 1;
                                                // تاس انداختن ربات
                                                const botRollBet = Math.floor(Math.random() * 6) + 1;

                                                // به‌روزرسانی آمار کوئست‌ها
                                                updateQuestProgress(interaction.user.id, 'play_games');

                                                // تعیین برنده بر اساس نوع شرط
                                                let resultBet = '';
                                                let winMultiplier = 0;
                                                let won = false;

                                                if (betType === 'higher') {
                                                    // شرط روی بزرگتر بودن عدد کاربر
                                                    if (userRollBet > botRollBet) {
                                                        winMultiplier = 1.5;
                                                        won = true;
                                                        resultBet = `🎉 تبریک! عدد شما بزرگتر بود و ${Math.floor(betValue * winMultiplier)} ${COIN_NAME} دریافت کردید!`;
                                                    } else {
                                                        resultBet = `😢 متأسفانه باختید! عدد شما بزرگتر نبود و ${betValue} ${COIN_NAME} از دست دادید.`;
                                                    }
                                                } else if (betType === 'lower') {
                                                    // شرط روی کوچکتر بودن عدد کاربر
                                                    if (userRollBet < botRollBet) {
                                                        winMultiplier = 1.5;
                                                        won = true;
                                                        resultBet = `🎉 تبریک! عدد شما کوچکتر بود و ${Math.floor(betValue * winMultiplier)} ${COIN_NAME} دریافت کردید!`;
                                                    } else {
                                                        resultBet = `😢 متأسفانه باختید! عدد شما کوچکتر نبود و ${betValue} ${COIN_NAME} از دست دادید.`;
                                                    }
                                                } else if (betType === 'equal') {
                                                    // شرط روی مساوی بودن اعداد
                                                    if (userRollBet === botRollBet) {
                                                        winMultiplier = 5;
                                                        won = true;
                                                        resultBet = `🎉 تبریک! اعداد مساوی بودند و ${Math.floor(betValue * winMultiplier)} ${COIN_NAME} دریافت کردید!`;
                                                    } else {
                                                        resultBet = `😢 متأسفانه باختید! اعداد مساوی نبودند و ${betValue} ${COIN_NAME} از دست دادید.`;
                                                    }
                                                }

                                                // به‌روزرسانی موجودی کاربر
                                                if (won) {
                                                    betUserData.balance += Math.floor(betValue * winMultiplier) - betValue; // کم کردن اصل شرط از جایزه
                                                } else {
                                                    betUserData.balance -= betValue;
                                                }

                                                saveData();

                                                // ایجاد امبد برای نمایش نتیجه
                                                const diceBetResultEmbed = new EmbedBuilder()
                                                    .setTitle('🎲 نتیجه بازی تاس')
                                                    .setColor(won ? '#00FF00' : '#FF0000')
                                                    .setDescription(`
                        **نوع شرط**: ${betType === 'higher' ? 'عدد بزرگتر' : (betType === 'lower' ? 'عدد کوچکتر' : 'مساوی')}
                        **تاس شما**: ${getDiceEmoji(userRollBet)} (${userRollBet})
                        **تاس ربات**: ${getDiceEmoji(botRollBet)} (${botRollBet})

                        ${resultBet}

                        موجودی فعلی: **${betUserData.balance} ${COIN_NAME}**`)
                                                    .setFooter({ text: 'می‌توانید دوباره امتحان کنید!' });

                                                // دکمه‌ها برای بازی مجدد
                                                const diceBetButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId(`dice_again_${betValue}`)
                                                            .setLabel(`🎲 بازی مجدد (${betValue} سکه)`)
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId(`dice_again_${betValue * 2}`)
                                                            .setLabel(`🎲 دو برابر (${betValue * 2} سکه)`)
                                                            .setStyle(ButtonStyle.Danger),
                                                        new ButtonBuilder()
                                                            .setCustomId('games')
                                                            .setLabel('🔙 بازگشت به بازی‌ها')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.editReply({ embeds: [diceBetResultEmbed], components: [diceBetButtons] });
                                            }, 3000);
                                            break;
                                    }
                                } catch (error) {
                                    console.error(`❌ خطا در دستور ${interaction.isCommand() ? interaction.commandName : 'تعامل دکمه'}:`, error);

                                    // بررسی می‌کنیم آیا قبلاً به تعامل پاسخ داده شده است یا خیر
                                    try {
                                        if (interaction.deferred || interaction.replied) {
                                            await interaction.followUp({ content: '❌ خطایی رخ داده است! لطفا دوباره امتحان کنید.', ephemeral: true });
                                        } else {
                                            await interaction.reply({ content: '❌ خطایی رخ داده است! لطفا دوباره امتحان کنید.', ephemeral: true });
                                        }
                                    } catch (followupError) {
                                        console.error('❌ خطا در ارسال پیام خطا:', followupError);
                                    }
                                }


                            // پردازش دکمه‌ها
                            if (interaction.isButton()) {
                                try {
                                    // بررسی دکمه‌های تأیید انتقال
                                    if (interaction.customId.startsWith('confirm_transfer_')) {
                                        const parts = interaction.customId.split('_');
                                        const targetId = parts[2];
                                        const amount = parseInt(parts[3]);

                                        const userData = getUser(interaction.user.id);

                                        // بررسی دوباره موجودی (ممکن است در زمان تأیید تغییر کرده باشد)
                                        if (userData.balance < amount) {
                                            return await interaction.update({
                                                content: '❌ موجودی شما کافی نیست!',
                                                components: []
                                            });
                                        }

                                        // بررسی مجدد محدودیت‌های انتقال
                                        const transferCheck = canTransferCoins(interaction.user.id, targetId, amount);
                                        if (!transferCheck.allowed) {
                                            return await interaction.update({
                                                content: transferCheck.reason,
                                                components: []
                                            });
                                        }

                                        const targetData = getUser(targetId);
                                        userData.balance -= amount;
                                        targetData.balance += amount;

                                        // ثبت انتقال در تاریخچه
                                        recordTransfer(interaction.user.id, targetId, amount);

                                        // افزودن XP بابت انتقال سکه
                                        const leveledUp = addXP(interaction.user.id, 5);
                                        let levelUpMessage = '';
                                        if (leveledUp) {
                                            levelUpMessage = `\n🎉 تبریک! شما به سطح ${userData.level} ارتقا یافتید!`;
                                        }

                                        saveData();

                                        await interaction.update({
                                            content: `✅ انتقال ${amount} ${COIN_NAME} با موفقیت انجام شد!${levelUpMessage}`,
                                            components: []
                                        });

                                        return;
                                    }

                                    if (interaction.customId === 'cancel_transfer') {
                                        await interaction.update({
                                            content: '❌ انتقال لغو شد.',
                                            components: []
                                        });
                                        return;
                                    }

                                    switch(interaction.customId) {
                                        case 'economy':
                                            const economyEmbed = new EmbedBuilder()
                                                .setColor('#0099ff')
                                                .setTitle('💰 سیستم اقتصادی')
                                                .setDescription('دستورات اقتصادی:')
                                                .addFields(
                                                    { name: '/balance', value: 'مشاهده موجودی شما', inline: true },
                                                    { name: '/spin', value: 'چرخاندن گردونه و دریافت جایزه', inline: true },
                                                    { name: '/daily', value: 'دریافت سکه روزانه', inline: true },
                                                    { name: '/transfer', value: 'انتقال سکه به کاربر دیگر', inline: true },
                                                    { name: '/bankdeposit', value: 'واریز سکه به حساب بانکی', inline: true },
                                                    { name: '/bankwithdraw', value: 'برداشت سکه از حساب بانکی', inline: true },
                                                    { name: '/invest', value: 'سرمایه‌گذاری سکه با نرخ سود ماهانه', inline: true },
                                                    { name: '/leaderboard', value: 'مشاهده لیست برترین کاربران', inline: true }
                                                );

                                            // دکمه‌های دسترسی سریع (ردیف اول)
                                            const economyButtons1 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_balance')
                                                        .setLabel('💰 موجودی')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_daily')
                                                        .setLabel('🌞 جایزه روزانه')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_spin')
                                                        .setLabel('🎡 گردونه شانس')
                                                        .setStyle(ButtonStyle.Primary)
                                                );

                                            // دکمه‌های دسترسی سریع (ردیف دوم)
                                            const economyButtons2 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_bankdeposit')
                                                        .setLabel('💳 واریز به بانک')
                                                        .setStyle(ButtonStyle.Secondary),
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_bankwithdraw')
                                                        .setLabel('💵 برداشت از بانک')
                                                        .setStyle(ButtonStyle.Secondary),
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_leaderboard')
                                                        .setLabel('🏆 برترین‌ها')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            // دکمه‌های دسترسی سریع (ردیف سوم)
                                            const economyButtons3 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_transfer')
                                                        .setLabel('🔄 انتقال سکه')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('quick_invest')
                                                        .setLabel('📈 سرمایه‌گذاری')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('back_to_menu')
                                                        .setLabel('🔙 بازگشت')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.update({ embeds: [economyEmbed], components: [economyButtons1, economyButtons2, economyButtons3] });
                                            break;

                                        case 'games':
                                            const gamesEmbed = new EmbedBuilder()
                                                .setColor('#00ff00')
                                                .setTitle('🎮 بازی‌های سرور')
                                                .setDescription('بازی‌ها و چالش‌های جذاب و متنوع را امتحان کنید و سکه بیشتری به دست آورید!')
                                                .addFields(
                                                    { name: '🎰 بازی‌های شانسی', value: 'گردونه شانس، شیر یا خط، تاس، جکپات و بخت‌آزمایی', inline: true },
                                                    { name: '🎯 بازی‌های مهارتی', value: 'سنگ کاغذ قیچی، حدس عدد، مسابقه سریع‌النگشت', inline: true },
                                                    { name: '⚔️ بازی‌های رقابتی', value: 'دوئل، جیب‌زنی، چالش‌های ویژه', inline: true }
                                                )
                                                .setImage('https://media.giphy.com/media/hpXdHPfFI5wTABdDx9/giphy.gif');

                                            const gameButtonsShort = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('games_chance')
                                                        .setLabel('🎰 بازی‌های شانسی')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('games_skill')
                                                        .setLabel('🎯 بازی‌های مهارتی')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('games_competitive')
                                                        .setLabel('⚔️ بازی‌های رقابتی')
                                                        .setStyle(ButtonStyle.Danger)
                                                );

                                            const gameButtonsFooter = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_jackpot')
                                                        .setEmoji('💎')
                                                        .setLabel('جکپات')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_lottery')
                                                        .setEmoji('🎟️')
                                                        .setLabel('بخت‌آزمایی')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('back_to_menu')
                                                        .setLabel('🔙 بازگشت')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.update({ embeds: [gamesEmbed], components: [gameButtonsShort, gameButtonsFooter] });
                                            break;

                                        case 'games_chance':
                                            // نمایش بازی‌های شانسی
                                            const chanceGamesEmbed = new EmbedBuilder()
                                                .setColor('#FF9900')
                                                .setTitle('🎰 بازی‌های شانسی')
                                                .setDescription('شانس خود را امتحان کنید و برنده جوایز بزرگ شوید!')
                                                .addFields(
                                                    { name: '🎡 گردونه شانس', value: 'چرخاندن گردونه و دریافت جایزه تصادفی (روزانه)', inline: true },
                                                    { name: '🎯 شیر یا خط', value: 'شانس خود را با پرتاب سکه امتحان کنید (شانس 50/50)', inline: true },
                                                    { name: '🎲 تاس', value: 'تاس بیندازید و بر اساس نتیجه برنده شوید', inline: true },
                                                    { name: '💎 جکپات', value: 'شرکت در قرعه‌کشی جکپات با شانس برنده شدن کل مخزن', inline: true },
                                                    { name: '🎟️ بخت‌آزمایی', value: 'خرید بلیط و شرکت در قرعه‌کشی هفتگی', inline: true },
                                                    { name: '🎁 لوت‌باکس', value: 'گشایش جعبه‌های شانس با جوایز متنوع', inline: true }
                                                );

                                            const chanceGameButtons1 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_wheel')
                                                        .setEmoji('🎡')
                                                        .setLabel('گردونه شانس')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_coinflip')
                                                        .setEmoji('🎯')
                                                        .setLabel('شیر یا خط')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_dice')
                                                        .setEmoji('🎲')
                                                        .setLabel('تاس')
                                                        .setStyle(ButtonStyle.Primary)
                                                );

                                            const chanceGameButtons2 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_jackpot')
                                                        .setEmoji('💎')
                                                        .setLabel('جکپات')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_lottery')
                                                        .setEmoji('🎟️')
                                                        .setLabel('بخت‌آزمایی')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('buy_lootbox')
                                                        .setEmoji('🎁')
                                                        .setLabel('لوت‌باکس (100 سکه)')
                                                        .setStyle(ButtonStyle.Success)
                                                );

                                            const chanceGameButtons3 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('games')
                                                        .setLabel('🔙 بازگشت به منوی بازی‌ها')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.update({ embeds: [chanceGamesEmbed], components: [chanceGameButtons1, chanceGameButtons2, chanceGameButtons3] });
                                            break;

                                        case 'games_skill':
                                            // نمایش بازی‌های مهارتی
                                            const skillGamesEmbed = new EmbedBuilder()
                                                .setColor('#00FFCC')
                                                .setTitle('🎯 بازی‌های مهارتی')
                                                .setDescription('مهارت و دقت خود را به چالش بکشید!')
                                                .addFields(
                                                    { name: '⚔️ سنگ کاغذ قیچی', value: 'بازی کلاسیک با ربات یا دوستان', inline: true },
                                                    { name: '🔢 حدس عدد', value: 'عدد مخفی بین 1 تا 100 را حدس بزنید', inline: true },
                                                    { name: '⌨️ سریع‌النگشت', value: 'سریع‌ترین کسی باشید که کلمه نمایش داده شده را تایپ می‌کند', inline: true },
                                                    { name: '🧠 چیستان', value: 'به سوالات و معماهای ربات پاسخ دهید', inline: true },
                                                    { name: '🎯 کلیک سریع', value: 'در زمان محدود تعداد کلیک‌های بیشتری انجام دهید', inline: true }
                                                );

                                            const skillGameButtons1 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_rps')
                                                        .setEmoji('⚔️')
                                                        .setLabel('سنگ کاغذ قیچی')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_numguess')
                                                        .setEmoji('🔢')
                                                        .setLabel('حدس عدد')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_fasttyping')
                                                        .setEmoji('⌨️')
                                                        .setLabel('سریع‌النگشت')
                                                        .setStyle(ButtonStyle.Primary)
                                                );

                                            const skillGameButtons2 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_riddle')
                                                        .setEmoji('🧠')
                                                        .setLabel('چیستان')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_fastclick')
                                                        .setEmoji('🎯')
                                                        .setLabel('کلیک سریع')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('games')
                                                        .setLabel('🔙 بازگشت')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.update({ embeds: [skillGamesEmbed], components: [skillGameButtons1, skillGameButtons2] });
                                            break;

                                        case 'games_competitive':
                                            // نمایش بازی‌های رقابتی
                                            const competitiveGamesEmbed = new EmbedBuilder()
                                                .setColor('#FF5555')
                                                .setTitle('⚔️ بازی‌های رقابتی')
                                                .setDescription('با کاربران دیگر رقابت کنید و برنده شوید!')
                                                .addFields(
                                                    { name: '🏆 دوئل', value: 'با دوستان خود دوئل کنید و برنده شوید', inline: true },
                                                    { name: '🥷 جیب‌زنی', value: 'دزدی از جیب کاربران دیگر در پنجره زمانی خاص', inline: true },
                                                    { name: '🏅 مسابقه هفتگی', value: 'رقابت با سایر اعضا در لیدربورد هفتگی', inline: true },
                                                    { name: '👑 سلطان سرور', value: 'رقابت برای کسب عنوان پادشاه سرور', inline: true },
                                                    { name: '🌪️ مبارزه گروهی', value: 'مبارزه همزمان چند کاربر با هم', inline: true }
                                                );

                                            const competitiveGameButtons1 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('play_duel')
                                                        .setEmoji('🏆')
                                                        .setLabel('دوئل')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('play_steal')
                                                        .setEmoji('🥷')
                                                        .setLabel('جیب‌زنی')
                                                        .setStyle(ButtonStyle.Danger),
                                                    new ButtonBuilder()
                                                        .setCustomId('weekly_competition')
                                                        .setEmoji('🏅')
                                                        .setLabel('مسابقه هفتگی')
                                                        .setStyle(ButtonStyle.Primary)
                                                );

                                            const competitiveGameButtons2 = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('server_king')
                                                        .setEmoji('👑')
                                                        .setLabel('سلطان سرور')
                                                        .setStyle(ButtonStyle.Success),
                                                    new ButtonBuilder()
                                                        .setCustomId('steal_info')
                                                        .setEmoji('ℹ️')
                                                        .setLabel('راهنمای جیب‌زنی')
                                                        .setStyle(ButtonStyle.Secondary),
                                                    new ButtonBuilder()
                                                        .setCustomId('games')
                                                        .setLabel('🔙 بازگشت')
                                                        .setStyle(ButtonStyle.Secondary)
                                                );

                                            await interaction.update({ embeds: [competitiveGamesEmbed], components: [competitiveGameButtons1, competitiveGameButtons2] });
                                            break;

                                        // دکمه‌های دسترسی سریع
                                        case 'quick_balance':
                                            // نمایش موجودی کاربر
                                            const userDataBalance = getUser(interaction.user.id);

                                            await interaction.reply({
                                                content: `💰 موجودی شما:
                                                **کیف پول**: ${userDataBalance.balance} ${COIN_NAME}
                                                **حساب بانکی**: ${userDataBalance.bank || 0} ${COIN_NAME}
                                                **سرمایه‌گذاری**: ${userDataBalance.investment || 0} ${COIN_NAME}`,
                                                ephemeral: true
                                            });
                                            break;

                                        case 'quick_daily':
                                            // اجرای همان کد دستور daily
                                            const userDailyData = getUser(interaction.user.id);
                                            const userLastDaily = userDailyData.lastDaily || 0;
                                            let nowDaily = Date.now();

                                            if (nowDaily - userLastDaily < 86400000) { // یک روز به میلی‌ثانیه
                                                const remainingTime = 86400000 - (nowDaily - userLastDaily);
                                                const hours = Math.floor(remainingTime / 3600000);
                                                const minutes = Math.floor((remainingTime % 3600000) / 60000);

                                                return await interaction.reply({
                                                    content: `⏳ شما قبلاً جایزه روزانه خود را دریافت کرده‌اید! ${hours} ساعت و ${minutes} دقیقه دیگر می‌توانید دوباره جایزه بگیرید.`,
                                                    ephemeral: true
                                                });
                                            }

                                            const quickDailyReward = 50;
                                            userDailyData.balance += quickDailyReward;
                                            userDailyData.lastDaily = nowDaily;
                                            saveData();

                                            await interaction.reply({
                                                content: `✅ شما جایزه روزانه خود را دریافت کردید: ${quickDailyReward} ${COIN_NAME}!`,
                                                ephemeral: true
                                            });
                                            break;

                                        case 'quick_spin':
                                            // اجرای همان کد دستور spin
                                            const userSpinData = getUser(interaction.user.id);
                                            const userLastSpin = userSpinData.lastSpin || 0;
                                            let nowSpin = Date.now();

                                            if (nowSpin - userLastSpin < 86400000) { // یک روز به میلی‌ثانیه
                                                const remainingTime = 86400000 - (nowSpin - userLastSpin);
                                                const hours = Math.floor(remainingTime / 3600000);
                                                const minutes = Math.floor((remainingTime % 3600000) / 60000);

                                                return await interaction.reply({
                                                    content: `⏳ شما امروز گردونه را چرخاندید! زمان باقی‌مانده تا چرخش بعدی: **${hours} ساعت و ${minutes} دقیقه**`,
                                                    ephemeral: true
                                                });
                                            }

                                            let spinReward = spinWheel();
                                            userSpinData.balance += spinReward;
                                            userSpinData.lastSpin = nowSpin;
                                            saveData();

                                            // ایجاد امبد برای نمایش بهتر نتیجه
                                            const quickSpinEmbed = new EmbedBuilder()
                                                .setTitle('🎡 گردونه شانس')
                                                .setColor(spinReward > 0 ? '#00FF00' : '#FF0000')
                                                .setDescription(spinReward > 0 
                                                    ? `تبریک! شما **${spinReward} ${COIN_NAME}** برنده شدید!` 
                                                    : 'متأسفانه این بار چیزی برنده نشدید! 😢')
                                                .setFooter({ text: 'می‌توانید فردا دوباره شانس خود را امتحان کنید!' });

                                            await interaction.reply({ embeds: [quickSpinEmbed], ephemeral: true });
                                            break;

                                        case 'quick_bankdeposit':
                                            // نمایش فرم واریز به بانک
                                            const bankDepositEmbed = new EmbedBuilder()
                                                .setColor('#0099ff')
                                                .setTitle('💳 واریز به حساب بانکی')
                                                .setDescription('لطفاً مبلغ واریز به حساب بانکی را از طریق دکمه‌های زیر انتخاب کنید:')
                                                .addFields(
                                                    { name: 'موجودی کیف پول شما', value: `${getUser(interaction.user.id).balance} ${COIN_NAME}`, inline: true },
                                                    { name: 'موجودی حساب بانکی شما', value: `${getUser(interaction.user.id).bank || 0} ${COIN_NAME}`, inline: true }
                                                );

                                            const depositButtons = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('deposit_10')
                                                        .setLabel('10 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('deposit_50')
                                                        .setLabel('50 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('deposit_100')
                                                        .setLabel('100 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('deposit_all')
                                                        .setLabel('همه سکه‌ها')
                                                        .setStyle(ButtonStyle.Danger)
                                                );

                                            await interaction.reply({ embeds: [bankDepositEmbed], components: [depositButtons], ephemeral: true });
                                            break;

                                        case 'quick_bankwithdraw':
                                            // نمایش فرم برداشت از بانک
                                            const bankWithdrawEmbed = new EmbedBuilder()
                                                .setColor('#0099ff')
                                                .setTitle('💵 برداشت از حساب بانکی')
                                                .setDescription('لطفاً مبلغ برداشت از حساب بانکی را از طریق دکمه‌های زیر انتخاب کنید:')
                                                .addFields(
                                                    { name: 'موجودی حساب بانکی شما', value: `${getUser(interaction.user.id).bank || 0} ${COIN_NAME}`, inline: true },
                                                    { name: 'موجودی کیف پول شما', value: `${getUser(interaction.user.id).balance} ${COIN_NAME}`, inline: true }
                                                );

                                            const withdrawButtons = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('withdraw_10')
                                                        .setLabel('10 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('withdraw_50')
                                                        .setLabel('50 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('withdraw_100')
                                                        .setLabel('100 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('withdraw_all')
                                                        .setLabel('همه سکه‌ها')
                                                        .setStyle(ButtonStyle.Danger)
                                                );

                                            await interaction.reply({ embeds: [bankWithdrawEmbed], components: [withdrawButtons], ephemeral: true });
                                            break;

                                        case 'quick_leaderboard':
                                            // نمایش لیست برترین کاربران
                                            let quickSortedUsers = Object.entries(users).sort((a, b) => 
                                                (b[1].balance + (b[1].bank || 0) + (b[1].investment || 0)) - 
                                                (a[1].balance + (a[1].bank || 0) + (a[1].investment || 0))
                                            );
                                            let quickLeaderboard = quickSortedUsers.slice(0, 10).map((u, i) => {
                                                const total = u[1].balance + (u[1].bank || 0) + (u[1].investment || 0);
                                                return `${i + 1}. <@${u[0]}> - ${total} ${COIN_NAME}`;
                                            }).join('\n');

                                            await interaction.reply({ 
                                                embeds: [
                                                    new EmbedBuilder()
                                                        .setTitle('🏆 لیست برترین کاربران')
                                                        .setDescription(quickLeaderboard)
                                                        .setColor('#FFD700')
                                                ],
                                                ephemeral: true
                                            });
                                            break;

                                        case 'quick_transfer':
                                            // نمایش فرم انتقال سکه
                                            const transferEmbed = new EmbedBuilder()
                                                .setColor('#FF5733')
                                                .setTitle('🔄 انتقال سکه به کاربر دیگر')
                                                .setDescription('برای انتقال سکه به کاربر دیگر، لطفاً از دستور `/transfer` استفاده کنید.\n\nمثال: `/transfer user:@username amount:100`')
                                                .addFields(
                                                    { name: 'موجودی شما', value: `${getUser(interaction.user.id).balance} ${COIN_NAME}`, inline: true }
                                                );

                                            await interaction.reply({ embeds: [transferEmbed], ephemeral: true });
                                            break;

                                        case 'quick_invest':
                                            // نمایش فرم سرمایه‌گذاری
                                            const investEmbed = new EmbedBuilder()
                                                .setColor('#00FF00')
                                                .setTitle('📈 سرمایه‌گذاری سکه')
                                                .setDescription(`با سرمایه‌گذاری سکه، ماهانه ${INVESTMENT_RATE * 100}% سود دریافت خواهید کرد! مبلغ مورد نظر را انتخاب کنید:`)
                                                .addFields(
                                                    { name: 'موجودی کیف پول شما', value: `${getUser(interaction.user.id).balance} ${COIN_NAME}`, inline: true },
                                                    { name: 'سرمایه‌گذاری فعلی شما', value: `${getUser(interaction.user.id).investment || 0} ${COIN_NAME}`, inline: true }
                                                );

                                            const investButtons = new ActionRowBuilder()
                                                .addComponents(
                                                    new ButtonBuilder()
                                                        .setCustomId('invest_100')
                                                        .setLabel('100 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('invest_500')
                                                        .setLabel('500 سکه')
                                                        .setStyle(ButtonStyle.Primary),
                                                    new ButtonBuilder()
                                                        .setCustomId('invest_1000')
                                                        .setLabel('1000 سکه')
                                                        .setStyle(ButtonStyle.Danger)
                                                );

                                            await interaction.reply({ embeds: [investEmbed], components: [investButtons], ephemeral: true });
                                            break;

                                        case 'play_wheel':
                                            // مشابه quick_spin اما با پیام متفاوت
                                            const playWheelUserData = getUser(interaction.user.id);
                                            const playWheelLastSpin = playWheelUserData.lastSpin || 0;
                                            const playWheelNowSpin = Date.now();

                                            if (playWheelNowSpin - playWheelLastSpin < 86400000) {
                                                const remainingTime = 86400000 - (playWheelNowSpin - playWheelLastSpin);
                                                const hours = Math.floor(remainingTime / 3600000);
                                                const minutes = Math.floor((remainingTime % 3600000) / 60000);

                                                return await interaction.reply({
                                                    content: `⏳ شما امروز گردونه را چرخاندید! زمان باقی‌مانده تا چرخش بعدی: **${hours} ساعت و ${minutes} دقیقه**`,
                                                    ephemeral: true
                                                });
                                            }

                                            const playWheelReward = spinWheel();
                                            playWheelUserData.balance += playWheelReward;
                                            playWheelUserData.lastSpin = playWheelNowSpin;
                                            saveData();

                                                const wheelEmbed = new EmbedBuilder()
                                                    .setTitle('🎡 گردونه شانس')
                                                    .setColor(playWheelReward > 0 ? '#00FF00' : '#FF0000')
                                                    .setDescription(playWheelReward > 0 
                                                        ? `گردونه می‌چرخد... و متوقف می‌شود!\n\n🎉 تبریک! شما **${playWheelReward} ${COIN_NAME}** برنده شدید!` 
                                                        : 'گردونه می‌چرخد... و متوقف می‌شود!\n\n😢 متأسفانه این بار چیزی برنده نشدید!')
                                                    .setFooter({ text: 'می‌توانید فردا دوباره شانس خود را امتحان کنید!' });

                                                const backToGamesButton = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('games')
                                                            .setLabel('🔙 بازگشت به بازی‌ها')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.reply({ embeds: [wheelEmbed], components: [backToGamesButton], ephemeral: true });
                                                break;

                                            case 'play_coinflip':
                                                // بازی شیر یا خط
                                                const coinflipEmbed = new EmbedBuilder()
                                                    .setTitle('🎯 شیر یا خط')
                                                    .setColor('#1ABC9C')
                                                    .setDescription('شیر یا خط؟ شانس خود را امتحان کنید و شرط ببندید!\n\nبرای شروع، شیر یا خط را انتخاب کنید و مبلغ شرط خود را مشخص کنید:');

                                                const coinflipButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('coinflip_heads_10')
                                                            .setLabel('شیر - 10 سکه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('coinflip_tails_10')
                                                            .setLabel('خط - 10 سکه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('games')
                                                            .setLabel('🔙 بازگشت')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                const coinflipButtons2 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('coinflip_heads_50')
                                                            .setLabel('شیر - 50 سکه')
                                                            .setStyle(ButtonStyle.Danger),
                                                        new ButtonBuilder()
                                                            .setCustomId('coinflip_tails_50')
                                                            .setLabel('خط - 50 سکه')
                                                            .setStyle(ButtonStyle.Danger)
                                                    );

                                                await interaction.reply({ embeds: [coinflipEmbed], components: [coinflipButtons, coinflipButtons2], ephemeral: true });
                                                break;

                                            case 'play_dice':
                                                // ایجاد امبد برای بازی تاس
                                                const diceGameEmbed = new EmbedBuilder()
                                                    .setTitle('🎲 بازی تاس')
                                                    .setColor('#6642A9')
                                                    .setDescription('به بازی تاس خوش آمدید! مبلغ شرط خود را انتخاب کنید و نحوه بازی را مشخص کنید:');

                                                const diceBetButtons1 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('dice_game_10_bot')
                                                            .setLabel('🤖 بازی با ربات (10 سکه)')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('dice_game_50_bot')
                                                            .setLabel('🤖 بازی با ربات (50 سکه)')
                                                            .setStyle(ButtonStyle.Danger)
                                                    );

                                                const diceBetButtons2 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('dice_game_10_player')
                                                            .setLabel('👥 بازی با دوستان (10 سکه)')
                                                            .setStyle(ButtonStyle.Success),
                                                        new ButtonBuilder()
                                                            .setCustomId('dice_game_50_player')
                                                            .setLabel('👥 بازی با دوستان (50 سکه)')
                                                            .setStyle(ButtonStyle.Success)
                                                    );

                                                const diceBetButtons3 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('games')
                                                            .setLabel('🔙 بازگشت')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.reply({ embeds: [diceGameEmbed], components: [diceBetButtons1, diceBetButtons2, diceBetButtons3], ephemeral: true });
                                                break;

                                            case 'help':
                                                const helpEmbed = new EmbedBuilder()
                                                    .setColor('#ffff00')
                                                    .setTitle('❓ راهنما')
                                                    .setDescription('لیست دستورات ربات:')
                                                    .addFields(
                                                        { name: 'دستورات اقتصادی', value: '/balance, /spin, /daily, /transfer, /bankdeposit, /bankwithdraw, /invest, /leaderboard, /steal', inline: false },
                                                        { name: 'دستورات عمومی', value: '/ping, /profile, /menu', inline: false },
                                                        { name: 'دستورات مدیریتی', value: '/setchannel, /addcoins (فقط ادمین‌ها)', inline: false }
                                                    );

                                                // دکمه برگشت به منوی اصلی
                                                const backButton = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [helpEmbed], components: [backButton] });
                                                break;

                                            case 'quests':
                                                // بررسی و تخصیص مأموریت روزانه
                                                const questInfoResult = checkAndAssignDailyQuest(interaction.user.id);
                                                const questUserData = getUser(interaction.user.id);

                                                // ساخت امبد برای نمایش مأموریت‌ها
                                                const questsEmbed = new EmbedBuilder()
                                                    .setColor('#9B59B6')
                                                    .setTitle('📜 کوئست‌ها')
                                                    .setDescription('سیستم مأموریت‌های روزانه به شما کمک می‌کند تا با انجام چالش‌های مختلف، سکه و جوایز بیشتری به دست آورید!')
                                                    .addFields(
                                                        { name: '🎯 مأموریت فعلی روزانه', value: questUserData.dailyQuest ? `${questUserData.dailyQuest.description} - پیشرفت: ${questUserData.dailyQuestProgress}/${questUserData.dailyQuest.goal}` : 'مأموریتی تنظیم نشده! از دستور /quest استفاده کنید.', inline: false },
                                                        { name: '🎁 پاداش مأموریت فعلی', value: questUserData.dailyQuest ? `${questUserData.dailyQuest.reward} ${COIN_NAME}` : '0', inline: true },
                                                        { name: '🏆 مأموریت‌های تکمیل شده', value: `${questUserData.questsCompleted || 0}`, inline: true },
                                                        { name: '📊 آمار فعالیت‌ها', value: `پیام‌ها: ${questUserData.questStats.chat_messages || 0}\nبازی‌ها: ${questUserData.questStats.play_games || 0}\nجیب‌زنی‌ها: ${questUserData.questStats.steal_attempt || 0}`, inline: false }
                                                    );

                                                // اضافه کردن نوار پیشرفت برای مأموریت فعلی
                                                if (questUserData.dailyQuest) {
                                                    const progressPercentage = Math.floor((questUserData.dailyQuestProgress / questUserData.dailyQuest.goal) * 100);
                                                    const progressBar = createProgressBar(progressPercentage);
                                                    questsEmbed.addFields({ name: '🔄 پیشرفت مأموریت فعلی', value: progressBar, inline: false });
                                                }

                                                // دکمه‌های کوئست
                                                const questButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('refresh_quest')
                                                            .setLabel('🔄 بررسی مأموریت')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [questsEmbed], components: [questButtons] });
                                                break;

                                            case 'refresh_quest':
                                                // بررسی و به‌روزرسانی مأموریت روزانه
                                                const refreshQuestResult = checkAndAssignDailyQuest(interaction.user.id);
                                                const refreshQuestUserData = getUser(interaction.user.id);

                                                // ساخت امبد برای نمایش مأموریت به‌روز شده
                                                const refreshQuestEmbed = new EmbedBuilder()
                                                    .setTitle('🎯 مأموریت روزانه')
                                                    .setColor('#FFD700')
                                                    .setDescription(refreshQuestResult.isNew ? '🆕 یک مأموریت جدید برای شما تعیین شد!' : 'مأموریت فعلی شما:')
                                                    .addFields(
                                                        { name: '📝 شرح مأموریت', value: refreshQuestUserData.dailyQuest.description, inline: false },
                                                        { name: '🎁 پاداش', value: `${refreshQuestUserData.dailyQuest.reward} ${COIN_NAME}`, inline: true },
                                                        { name: '📊 پیشرفت', value: `${refreshQuestUserData.dailyQuestProgress}/${refreshQuestUserData.dailyQuest.goal}`, inline: true },
                                                        { name: '📈 تعداد مأموریت‌های تکمیل شده', value: `${refreshQuestUserData.questsCompleted || 0}`, inline: false }
                                                    )
                                                    .setFooter({ text: 'با تکمیل مأموریت‌ها پاداش دریافت کنید!' });

                                                // اضافه کردن نوار پیشرفت
                                                const refreshProgressPercentage = Math.floor((refreshQuestUserData.dailyQuestProgress / refreshQuestUserData.dailyQuest.goal) * 100);
                                                const refreshProgressBar = createProgressBar(refreshProgressPercentage);

                                                refreshQuestEmbed.addFields({ name: '🔄 پیشرفت', value: refreshProgressBar, inline: false });

                                                // دکمه‌های رفرش
                                                const refreshQuestButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('quests')
                                                            .setLabel('🔙 بازگشت به منوی کوئست‌ها')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [refreshQuestEmbed], components: [refreshQuestButtons] });
                                                break;

                                            case 'buy_lottery_ticket':
                                                // خرید بلیط بخت‌آزمایی
                                                const ticketResult = buyLotteryTicket(interaction.user.id);

                                                if (!ticketResult.success) {
                                                    await interaction.reply({
                                                        content: ticketResult.reason,
                                                        ephemeral: true
                                                    });
                                                    return;
                                                }

                                                // به‌روزرسانی آمار کوئست‌ها
                                                updateQuestProgress(interaction.user.id, 'shop_purchase');

                                                // امبد تأیید خرید بلیط
                                                const ticketSuccessEmbed = new EmbedBuilder()
                                                    .setTitle('🎟️ خرید بلیط بخت‌آزمایی')
                                                    .setColor('#00FF00')
                                                    .setDescription(`✅ شما با موفقیت یک بلیط بخت‌آزمایی خریداری کردید!`)
                                                    .addFields(
                                                        { name: '🎫 تعداد بلیط‌های شما', value: `${ticketResult.ticketNumber}/${MAX_TICKETS_PER_WEEK}`, inline: true },
                                                        { name: '💰 جایزه فعلی', value: `${lotteryPool} ${COIN_NAME}`, inline: true },
                                                        { name: '⏱️ زمان قرعه‌کشی بعدی', value: `<t:${Math.floor(nextLotteryDraw / 1000)}:R>`, inline: false },
                                                        { name: '🔄 شانس برنده شدن', value: `${((ticketResult.ticketNumber / lotteryTickets.length) * 100).toFixed(2)}%`, inline: false }
                                                    )
                                                    .setFooter({ text: 'برنده بخت‌آزمایی هر هفته به صورت تصادفی انتخاب می‌شود.' });

                                                // دکمه خرید بلیط دیگر
                                                const ticketButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('buy_lottery_ticket')
                                                            .setLabel(`خرید بلیط دیگر (${LOTTERY_TICKET_PRICE} سکه)`)
                                                            .setStyle(ButtonStyle.Success)
                                                            .setEmoji('🎟️'),
                                                        new ButtonBuilder()
                                                            .setCustomId('lottery_info')
                                                            .setLabel('اطلاعات بخت‌آزمایی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                            .setEmoji('ℹ️')
                                                    );

                                                await interaction.update({ embeds: [ticketSuccessEmbed], components: [ticketButtons] });
                                                break;

                                            case 'lottery_info':
                                                // نمایش اطلاعات بخت‌آزمایی
                                                const infoUserData = getUser(interaction.user.id);

                                                // تعیین زمان باقی‌مانده تا قرعه‌کشی بعدی
                                                const timeToInfoDraw = nextLotteryDraw - Date.now();
                                                const daysToInfoNext = Math.floor(timeToInfoDraw / (24 * 60 * 60 * 1000));
                                                const hoursToInfoNext = Math.floor((timeToInfoDraw % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000));

                                                // شانس کاربر
                                                const userTickets = infoUserData.lotteryTickets || 0;
                                                const userChanceInfo = lotteryTickets.length > 0 ? ((userTickets / lotteryTickets.length) * 100).toFixed(2) : '0.00';

                                                // لیست 5 خریدار اخیر بلیط
                                                let recentBuyersList = '';
                                                if (lotteryTickets.length > 0) {
                                                    const recentBuyers = lotteryTickets.slice(-5).reverse();
                                                    recentBuyersList = recentBuyers.map((ticket, index) => `${index + 1}. <@${ticket.userId}> - <t:${Math.floor(ticket.purchaseTime / 1000)}:R>`).join('\n');
                                                } else {
                                                    recentBuyersList = 'هنوز هیچ بلیطی خریداری نشده است!';
                                                }

                                                const lotteryInfoDetailEmbed = new EmbedBuilder()
                                                    .setTitle('🎟️ اطلاعات بخت‌آزمایی سرور')
                                                    .setColor('#FF9900')
                                                    .setDescription(`هر هفته یک نفر برنده کل جایزه می‌شود. هر چه بلیط بیشتری داشته باشید، شانس بیشتری دارید!`)
                                                    .addFields(
                                                        { name: '💰 جایزه فعلی', value: `${lotteryPool} ${COIN_NAME}`, inline: true },
                                                        { name: '🎫 تعداد بلیط‌های شما', value: `${userTickets}/${MAX_TICKETS_PER_WEEK}`, inline: true },
                                                        { name: '🔄 شانس شما', value: `${userChanceInfo}%`, inline: true },
                                                        { name: '🎯 تعداد کل بلیط‌ها', value: `${lotteryTickets.length} بلیط`, inline: true },
                                                        { name: '⏱️ زمان قرعه‌کشی بعدی', value: `${daysToInfoNext} روز و ${hoursToInfoNext} ساعت دیگر`, inline: true },
                                                        { name: '🛒 خریداران اخیر', value: recentBuyersList, inline: false }
                                                    )
                                                    .setFooter({ text: 'برنده بخت‌آزمایی هر هفته به صورت تصادفی انتخاب می‌شود.' });

                                                // دکمه‌های خرید بلیط و بازگشت
                                                const infoTicketButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('buy_lottery_ticket')
                                                            .setLabel(`خرید بلیط (${LOTTERY_TICKET_PRICE} سکه)`)
                                                            .setStyle(ButtonStyle.Success)
                                                            .setEmoji('🎟️'),
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [lotteryInfoDetailEmbed], components: [infoTicketButtons] });
                                                break;

                                            case 'confirm_jackpot':
                                            case 'confirm_jackpot_10':
                                            case 'confirm_jackpot_20':
                                            case 'confirm_jackpot_50':
                                            case 'confirm_jackpot_100':
                                                // استخراج مقدار مشارکت از کاستوم آیدی
                                                const jackpotParts = interaction.customId.split('_');
                                                const jackpotContributionAmount = parseInt(jackpotParts[2] || '0');

                                                // ثبت مشارکت کاربر در جکپات
                                                const jackpotResult = joinJackpot(interaction.user.id, jackpotContributionAmount);

                                                if (!jackpotResult.success) {
                                                    await interaction.update({
                                                        content: jackpotResult.reason,
                                                        embeds: [],
                                                        components: []
                                                    });
                                                    return;
                                                }

                                                // به‌روزرسانی آمار کوئست‌ها
                                                updateQuestProgress(interaction.user.id, 'shop_purchase');

                                                // امبد تأیید شرکت در جکپات
                                                const jackpotSuccessEmbed = new EmbedBuilder()
                                                    .setTitle('💎 شرکت در جکپات')
                                                    .setColor('#00FF00')
                                                    .setDescription(`✅ شما با موفقیت با ${jackpotResult.amount} ${COIN_NAME} در جکپات شرکت کردید!`)
                                                    .addFields(
                                                        { name: '💰 مجموع جکپات فعلی', value: `${jackpotResult.totalPool} ${COIN_NAME}`, inline: true },
                                                        { name: '🎲 شانس شما', value: `${jackpotResult.chance}%`, inline: true },
                                                        { name: '👥 تعداد شرکت‌کنندگان', value: `${jackpotPlayers.length} نفر`, inline: true },
                                                        { name: '⏱️ زمان قرعه‌کشی', value: 'پس از رسیدن به 10 نفر شرکت کننده یا 10,000 سکه', inline: false }
                                                    )
                                                    .setFooter({ text: 'می‌توانید مجدداً با مبالغ بیشتر در جکپات شرکت کنید تا شانس خود را افزایش دهید.' });

                                                // دکمه شرکت مجدد
                                                const jackpotSuccessButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('jackpot_again')
                                                            .setLabel('شرکت مجدد در جکپات')
                                                            .setStyle(ButtonStyle.Primary)
                                                            .setEmoji('💎'),
                                                        new ButtonBuilder()
                                                            .setCustomId('jackpot_info')
                                                            .setLabel('اطلاعات جکپات')
                                                            .setStyle(ButtonStyle.Secondary)
                                                            .setEmoji('ℹ️')
                                                    );

                                                await interaction.update({ embeds: [jackpotSuccessEmbed], components: [jackpotSuccessButtons] });

                                                // بررسی شرایط قرعه‌کشی
                                                if (jackpotPlayers.length >= 10 || jackpotPool >= 10000) {
                                                    // انجام قرعه‌کشی
                                                    const jackpotWinner = drawJackpotWinner();
                                                    if (jackpotWinner) {
                                                        // اعلام برنده در کانال
                                                        const winnerAnnounceEmbed = new EmbedBuilder()
                                                            .setTitle('🎉 برنده جکپات مشخص شد!')
                                                            .setColor('#FF00FF')
                                                            .setDescription(`تبریک! <@${jackpotWinner.userId}> برنده **${jackpotWinner.prize} ${COIN_NAME}** در جکپات شد!`)
                                                            .addFields(
                                                                { name: '🎲 شانس برنده', value: `${jackpotWinner.chance}%`, inline: true },
                                                                { name: '👥 تعداد شرکت‌کنندگان', value: `${jackpotPlayers.length} نفر`, inline: true },
                                                                { name: '🎮 جکپات بعدی', value: 'از همین الان می‌توانید در جکپات جدید شرکت کنید!', inline: false }
                                                            )
                                                            .setFooter({ text: 'جکپات بعدی با مبلغ 1000 سکه شروع می‌شود.' });

                                                        await interaction.channel.send({ embeds: [winnerAnnounceEmbed] });
                                                    }
                                                }
                                                break;

                                            case 'cancel_jackpot':
                                                // انصراف از شرکت در جکپات
                                                await interaction.update({
                                                    content: '❌ شما از شرکت در جکپات انصراف دادید.',
                                                    embeds: [],
                                                    components: []
                                                });
                                                break;

                                            case 'jackpot_again':
                                                // درخواست شرکت مجدد در جکپات
                                                const jackpotAgainEmbed = new EmbedBuilder()
                                                    .setTitle('💎 شرکت مجدد در جکپات')
                                                    .setColor('#9B59B6')
                                                    .setDescription('لطفاً مبلغ مورد نظر برای شرکت مجدد در جکپات را انتخاب کنید:')
                                                    .addFields(
                                                        { name: '💰 مجموع جکپات فعلی', value: `${jackpotPool} ${COIN_NAME}`, inline: true },
                                                        { name: '👤 موجودی شما', value: `${getUser(interaction.user.id).balance} ${COIN_NAME}`, inline: true }
                                                    );

                                                // دکمه‌های انتخاب مبلغ
                                                const jackpotAgainButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('confirm_jackpot_10')
                                                            .setLabel('10 سکه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('confirm_jackpot_50')
                                                            .setLabel('50 سکه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('confirm_jackpot_100')
                                                            .setLabel('100 سکه')
                                                            .setStyle(ButtonStyle.Danger)
                                                    );

                                                await interaction.update({ embeds: [jackpotAgainEmbed], components: [jackpotAgainButtons] });
                                                break;

                                            case 'jackpot_info':
                                                // نمایش اطلاعات جکپات
                                                const jackpotInfoUserData = getUser(interaction.user.id);

                                                // محاسبه شانس کاربر
                                                const userContribution = jackpotInfoUserData.jackpotContribution || 0;
                                                const userJackpotChance = jackpotPool > 0 ? ((userContribution / jackpotPool) * 100).toFixed(2) : '0.00';

                                                // لیست شرکت‌کنندگان فعلی
                                                let participantsInfoList = '';
                                                if (jackpotPlayers.length > 0) {
                                                    // لیست شرکت‌کنندگان با شانس آنها
                                                    participantsInfoList = jackpotPlayers.map((player, index) => {
                                                        const playerChance = ((player.amount / jackpotPool) * 100).toFixed(2);
                                                        return `${index + 1}. <@${player.userId}> - ${player.amount} ${COIN_NAME} (شانس: ${playerChance}%)`;
                                                    }).join('\n');
                                                } else {
                                                    participantsInfoList = 'هنوز هیچ کاربری در این دوره از جکپات شرکت نکرده است!';
                                                }

                                                const jackpotInfoEmbed = new EmbedBuilder()
                                                    .setTitle('💎 اطلاعات جکپات سرور')
                                                    .setColor('#9B59B6')
                                                    .setDescription('در جکپات، هر چه مبلغ بیشتری شرکت کنید، شانس برنده شدن شما بیشتر است!')
                                                    .addFields(
                                                        { name: '💰 مجموع جکپات فعلی', value: `${jackpotPool} ${COIN_NAME}`, inline: true },
                                                        { name: '🎲 شانس شما', value: `${userJackpotChance}%`, inline: true },
                                                        { name: '👥 تعداد شرکت‌کنندگان', value: `${jackpotPlayers.length} نفر`, inline: true },
                                                        { name: '🧮 مشارکت شما', value: `${userContribution} ${COIN_NAME}`, inline: true },
                                                        { name: '⏱️ زمان قرعه‌کشی', value: 'پس از رسیدن به 10 نفر شرکت کننده یا 10,000 سکه', inline: true },
                                                        { name: '👥 شرکت‌کنندگان فعلی', value: participantsInfoList, inline: false }
                                                    )
                                                    .setFooter({ text: 'شانس برنده شدن متناسب با مبلغ شرکت شماست.' });

                                                // دکمه‌های اطلاعات جکپات
                                                const jackpotInfoButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('jackpot_again')
                                                            .setLabel('شرکت در جکپات')
                                                            .setStyle(ButtonStyle.Primary)
                                                            .setEmoji('💎'),
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [jackpotInfoEmbed], components: [jackpotInfoButtons] });
                                                break;

                                            case 'inventory':
                                                // استفاده از نام متغیر متفاوت برای جلوگیری از تداخل با userData در scope بالاتر
                                                const inventoryUserData = getUser(interaction.user.id);

                                                // بررسی اینکه آیا کاربر آیتمی در کوله‌پشتی دارد (با محافظت بیشتر)
                                                const inventoryItems = Array.isArray(inventoryUserData.inventory) ? 
                                                    inventoryUserData.inventory : [];

                                                const inventoryEmbed = new EmbedBuilder()
                                                    .setColor('#F1C40F')
                                                    .setTitle('🎒 کوله‌پشتی شما')
                                                    .setThumbnail(interaction.user.displayAvatarURL());

                                                if (inventoryItems.length === 0) {
                                                    inventoryEmbed.setDescription('شما هیچ آیتمی در کوله‌پشتی خود ندارید! می‌توانید از فروشگاه آیتم‌هایی خریداری کنید.');
                                                } else {
                                                    inventoryEmbed.setDescription('آیتم‌های موجود در کوله‌پشتی شما:');
                                                    inventoryItems.forEach(item => {
                                                        inventoryEmbed.addFields({ name: item.name, value: item.description, inline: true });
                                                    });
                                                }

                                                // دکمه برگشت به منوی اصلی
                                                const inventoryBackButton = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [inventoryEmbed], components: [inventoryBackButton] });
                                                break;

                                            case 'admin_coins':
                                                // بررسی دسترسی مدیر
                                                if (!hasAdminRole(interaction.member)) {
                                                    return await interaction.reply({
                                                        content: '❌ شما دسترسی لازم برای این بخش را ندارید!',
                                                        ephemeral: true
                                                    });
                                                }

                                                const coinManagementEmbed = new EmbedBuilder()
                                                    .setTitle('💰 مدیریت سکه')
                                                    .setColor('#FFD700')
                                                    .setDescription('از این بخش می‌توانید موجودی سکه کاربران را مدیریت کنید.')
                                                    .addFields(
                                                        { name: '/setcoin', value: 'تنظیم دقیق مقدار سکه کاربر', inline: true },
                                                        { name: '/addcoins', value: 'اضافه کردن سکه به کاربر', inline: true }
                                                    );

                                                const backToAdminButton = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_admin')
                                                            .setLabel('🔙 بازگشت به پنل مدیریت')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [coinManagementEmbed], components: [backToAdminButton] });
                                                break;

                                            case 'admin_shop':
                                                // بررسی دسترسی مدیر
                                                if (!hasAdminRole(interaction.member)) {
                                                    return await interaction.reply({
                                                        content: '❌ شما دسترسی لازم برای این بخش را ندارید!',
                                                        ephemeral: true
                                                    });
                                                }

                                                // نمایش لیست آیتم‌های فروشگاه
                                                let shopItemList = '';
                                                shopItems.forEach(item => {
                                                    shopItemList += `**شناسه**: \`${item.id}\`\n**نام**: ${item.name}\n**قیمت**: ${item.price} ${COIN_NAME}\n**توضیحات**: ${item.description}\n\n`;
                                                });

                                                const shopManagementEmbed = new EmbedBuilder()
                                                    .setTitle('🛒 مدیریت فروشگاه')
                                                    .setColor('#FF00FF')
                                                    .setDescription('از این بخش می‌توانید آیتم‌های فروشگاه را مدیریت کنید.')
                                                    .addFields(
                                                        { name: '/additem', value: 'اضافه کردن آیتم جدید به فروشگاه', inline: true },
                                                        { name: '/removeitem', value: 'حذف آیتم از فروشگاه', inline: true },
                                                        { name: '📋 لیست آیتم‌های فعلی', value: shopItemList || 'هیچ آیتمی در فروشگاه وجود ندارد!', inline: false }
                                                    );

                                                await interaction.update({ embeds: [shopManagementEmbed], components: [backToAdminButton] });
                                                break;

                                            case 'admin_data':
                                                // بررسی دسترسی مدیر
                                                if (!hasAdminRole(interaction.member)) {
                                                    return await interaction.reply({
                                                        content: '❌ شما دسترسی لازم برای این بخش را ندارید!',
                                                        ephemeral: true
                                                    });
                                                }

                                                const dataManagementEmbed = new EmbedBuilder()
                                                    .setTitle('📋 مدیریت داده‌ها')
                                                    .setColor('#1ABC9C')
                                                    .setDescription('از این بخش می‌توانید داده‌های کاربران را مدیریت کنید.')
                                                    .addFields(
                                                        { name: '/resetdata', value: 'بازنشانی داده‌های یک کاربر', inline: true },
                                                        { name: 'تعداد کاربران ثبت شده', value: `${Object.keys(users).length} کاربر`, inline: true }
                                                    );

                                                // دکمه‌های مدیریت داده
                                                const dataManagementButtons = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('export_data')
                                                            .setLabel('📤 دریافت فایل داده‌ها')
                                                            .setStyle(ButtonStyle.Primary),
                                                        backToAdminButton.components[0]
                                                    );

                                                await interaction.update({ embeds: [dataManagementEmbed], components: [dataManagementButtons] });
                                                break;

                                            case 'back_to_admin':
                                                // بازگشت به پنل مدیریت
                                                const adminPanelEmbedReturn = new EmbedBuilder()
                                                    .setTitle('🛠️ پنل مدیریت')
                                                    .setColor('#FF0000')
                                                    .setDescription('خوش آمدید مدیر گرامی! از این پنل می‌توانید ربات را مدیریت کنید.')
                                                    .addFields(
                                                        { name: '📊 آمار', value: `تعداد کاربران: ${Object.keys(users).length}\nتعداد آیتم‌های فروشگاه: ${shopItems.length}`, inline: false },
                                                        { name: '💰 مدیریت سکه', value: 'تنظیم یا اضافه کردن سکه به کاربران', inline: true },
                                                        { name: '🛒 مدیریت فروشگاه', value: 'اضافه یا حذف کردن آیتم‌های فروشگاه', inline: true },
                                                        { name: '📋 مدیریت داده‌ها', value: 'بازنشانی یا مدیریت داده‌های کاربران', inline: true }
                                                    )
                                                    .setFooter({ text: 'دسترسی فقط برای مدیران مجاز' });

                                                // دکمه‌های پنل مدیریت
                                                const adminPanelRow1Return = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('admin_coins')
                                                            .setLabel('💰 مدیریت سکه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('admin_shop')
                                                            .setLabel('🛒 مدیریت فروشگاه')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('admin_data')
                                                            .setLabel('📋 مدیریت داده‌ها')
                                                            .setStyle(ButtonStyle.Primary)
                                                    );

                                                await interaction.update({ embeds: [adminPanelEmbedReturn], components: [adminPanelRow1Return] });
                                                break;

                                            case 'export_data':
                                                // بررسی دسترسی مدیر
                                                if (!hasAdminRole(interaction.member)) {
                                                    return await interaction.reply({
                                                        content: '❌ شما دسترسی لازم برای این عملیات را ندارید!',
                                                        ephemeral: true
                                                    });
                                                }

                                                await interaction.reply({
                                                    content: '📤 فایل داده‌های ربات:',
                                                    files: [DATA_FILE],
                                                    ephemeral: true
                                                });
                                                break;

                                            case 'back_to_menu':
                                                // بازگشت به منوی اصلی
                                                const mainMenuEmbed = new EmbedBuilder()
                                                    .setColor('#0099ff')
                                                    .setTitle('🎮 منوی اصلی')
                                                    .setDescription('لطفا یکی از گزینه‌ها را انتخاب کنید:')
                                                    .setThumbnail(client.user.displayAvatarURL())
                                                    .setFooter({ text: 'این منو فقط برای شما قابل مشاهده است', iconURL: interaction.user.displayAvatarURL() });

                                                const mainRow1 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('economy')
                                                            .setLabel('💰 اقتصاد')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('games')
                                                            .setLabel('🎲 بازی‌ها')
                                                            .setStyle(ButtonStyle.Success),
                                                        new ButtonBuilder()
                                                            .setCustomId('shop')
                                                            .setLabel('🛒 فروشگاه')
                                                            .setStyle(ButtonStyle.Danger)
                                                    );

                                                const mainRow2 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('quests')
                                                            .setLabel('📜 کوئست‌ها')
                                                            .setStyle(ButtonStyle.Secondary),
                                                        new ButtonBuilder()
                                                            .setCustomId('social_menu')
                                                            .setLabel('👥 اجتماعی')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('help')
                                                            .setLabel('❓ راهنما')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [mainMenuEmbed], components: [mainRow1, mainRow2] });
                                                break;

                                            case 'social_menu':
                                                // منوی اجتماعی
                                                const socialEmbed = new EmbedBuilder()
                                                    .setColor('#FF00FF')
                                                    .setTitle('👥 بخش اجتماعی')
                                                    .setDescription('در این بخش می‌توانید دوستان خود را مدیریت کنید و در تیم‌ها شرکت کنید:')
                                                    .setFooter({ text: 'با دوستان خود ارتباط برقرار کنید و در چالش‌های گروهی شرکت کنید!' });

                                                const socialRow1 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('friends_menu')
                                                            .setLabel('👫 دوستان')
                                                            .setStyle(ButtonStyle.Primary),
                                                        new ButtonBuilder()
                                                            .setCustomId('teams_menu')
                                                            .setLabel('🎮 تیم‌ها')
                                                            .setStyle(ButtonStyle.Success),
                                                        new ButtonBuilder()
                                                            .setCustomId('achievements_menu')
                                                            .setLabel('🏆 دستاوردها')
                                                            .setStyle(ButtonStyle.Danger)
                                                    );

                                                const socialRow2 = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('back_to_menu')
                                                            .setLabel('🔙 بازگشت به منوی اصلی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [socialEmbed], components: [socialRow1, socialRow2] });
                                                break;

                                            case 'friends_menu':
                                                // منوی دوستان
                                                const friendsUserData = getUser(interaction.user.id);
                                                const friendsList = friendsUserData.friends;
                                                const friendRequestsList = friendsUserData.friendRequests;

                                                let friendsListText = '';
                                                if (friendsList.length > 0) {
                                                    friendsListText = friendsList.map((friendId, index) => `${index + 1}. <@${friendId}>`).join('\n');
                                                } else {
                                                    friendsListText = 'شما هنوز دوستی ندارید!';
                                                }

                                                let requestsListText = '';
                                                if (friendRequestsList.length > 0) {
                                                    requestsListText = friendRequestsList.map((requesterId, index) => `${index + 1}. <@${requesterId}>`).join('\n');
                                                } else {
                                                    requestsListText = 'هیچ درخواست دوستی جدیدی ندارید!';
                                                }

                                                const friendsMenuEmbed = new EmbedBuilder()
                                                    .setTitle('👫 مدیریت دوستان')
                                                    .setColor('#00FFFF')
                                                    .addFields(
                                                        { name: '🫂 دوستان شما', value: friendsListText, inline: false },
                                                        { name: '📨 درخواست‌های دوستی', value: requestsListText, inline: false }
                                                    )
                                                    .setFooter({ text: 'برای مدیریت دوستان از دستورات /friend استفاده کنید' });

                                                const friendsMenuRow = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('social_menu')
                                                            .setLabel('🔙 بازگشت به منوی اجتماعی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [friendsMenuEmbed], components: [friendsMenuRow] });
                                                break;

                                            case 'teams_menu':
                                                // منوی تیم‌ها
                                                const teamsUserData = getUser(interaction.user.id);

                                                let teamInfoText = '';
                                                if (teamsUserData.team && global.teams && global.teams[teamsUserData.team]) {
                                                    const team = global.teams[teamsUserData.team];
                                                    const isLeader = team.leader === interaction.user.id;

                                                    teamInfoText = `**نام تیم**: ${team.name}\n` +
                                                                   `**تعداد اعضا**: ${team.members.length}\n` +
                                                                   `**نقش شما**: ${isLeader ? '👑 رهبر تیم' : '👤 عضو تیم'}\n` +
                                                                   `**امتیاز تیم**: ${team.score}\n` +
                                                                   `**آمار**: 🏆 ${team.wins} پیروزی | 💔 ${team.losses} شکست`;
                                                } else {
                                                    teamInfoText = 'شما در هیچ تیمی نیستید!\n\nبرای ایجاد تیم جدید از دستور `/team create` استفاده کنید یا با دستور `/team join` به یک تیم بپیوندید.';
                                                }

                                                const teamsMenuEmbed = new EmbedBuilder()
                                                    .setTitle('🎮 مدیریت تیم')
                                                    .setColor('#FF00FF')
                                                    .setDescription(teamInfoText)
                                                    .setFooter({ text: 'برای مدیریت تیم از دستورات /team استفاده کنید' });

                                                const teamsMenuRow = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('team_challenge_menu')
                                                            .setLabel('🌪️ چالش تیمی')
                                                            .setStyle(ButtonStyle.Danger)
                                                            .setDisabled(teamsUserData.team === null),
                                                        new ButtonBuilder()
                                                            .setCustomId('social_menu')
                                                            .setLabel('🔙 بازگشت به منوی اجتماعی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [teamsMenuEmbed], components: [teamsMenuRow] });
                                                break;

                                            case 'achievements_menu':
                                                // منوی دستاوردها
                                                const achUserData = getUser(interaction.user.id);
                                                const achievements = achUserData.achievements || [];

                                                // ایجاد لیست دستاوردهای کسب شده
                                                let unlockedAchs = '';
                                                if (achievements.length > 0) {
                                                    unlockedAchs = achievements.map((achievement, index) => 
                                                        `${index + 1}. **${achievement.name}** - ${achievement.description}`
                                                    ).join('\n');
                                                } else {
                                                    unlockedAchs = 'شما هنوز هیچ دستاوردی کسب نکرده‌اید!';
                                                }

                                                // بررسی دستاوردهایی که نزدیک به کسب هستند
                                                let nextAchievements = '';
                                                let count = 0;

                                                for (const achievement of ACHIEVEMENTS) {
                                                    if (!achievements.some(a => a.id === achievement.id)) {
                                                        nextAchievements += `🔒 **${achievement.name}** - ${achievement.description}\n   💰 پاداش: ${achievement.reward} ${COIN_NAME}\n\n`;
                                                        count++;
                                                        if (count >= 3) break;
                                                    }
                                                }

                                                if (count === 0) {
                                                    nextAchievements = 'شما همه دستاوردها را کسب کرده‌اید!';
                                                }

                                                const achMenuEmbed = new EmbedBuilder()
                                                    .setTitle('🏆 دستاوردها و افتخارات')
                                                    .setColor('#FFD700')
                                                    .setDescription(`شما تاکنون ${achievements.length} از ${ACHIEVEMENTS.length} دستاورد را کسب کرده‌اید!`)
                                                    .addFields(
                                                        { name: '🔓 دستاوردهای اخیر', value: unlockedAchs, inline: false },
                                                        { name: '👀 دستاوردهای بعدی', value: nextAchievements, inline: false }
                                                    )
                                                    .setFooter({ text: 'برای مشاهده لیست کامل دستاوردها از دستور /achievements استفاده کنید' });

                                                const achMenuRow = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('social_menu')
                                                            .setLabel('🔙 بازگشت به منوی اجتماعی')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [achMenuEmbed], components: [achMenuRow] });
                                                break;

                                            case 'team_challenge_menu':
                                                // منوی چالش تیمی
                                                const challengeUserData = getUser(interaction.user.id);

                                                // بررسی اینکه کاربر در تیمی باشد
                                                if (challengeUserData.team === null) {
                                                    return await interaction.update({
                                                        content: '❌ شما در هیچ تیمی نیستید! ابتدا با استفاده از دستور `/team join` به یک تیم بپیوندید یا با دستور `/team create` یک تیم جدید بسازید.',
                                                        embeds: [],
                                                        components: []
                                                    });
                                                }

                                                const challengeMenuEmbed = new EmbedBuilder()
                                                    .setTitle('🌪️ چالش تیمی')
                                                    .setColor('#FF5733')
                                                    .setDescription('در چالش تیمی، تیم شما با یک تیم دیگر به رقابت می‌پردازد و برنده بر اساس امتیازات مختلف تعیین می‌شود. هر عضو تیم برنده، مبلغ شرط را دریافت می‌کند.')
                                                    .addFields(
                                                        { name: '📝 نحوه انجام چالش', value: 'برای شروع چالش تیمی، از دستور زیر استفاده کنید:\n`/teamchallenge team_id:[شناسه تیم حریف] bet:[مبلغ شرط]`', inline: false },
                                                        { name: '⚠️ شرایط', value: '- هر عضو تیم باید موجودی کافی برای شرکت در چالش داشته باشد\n- فقط رهبر تیم می‌تواند چالش ایجاد کند\n- رهبر تیم حریف باید چالش را بپذیرد', inline: false }
                                                    )
                                                    .setFooter({ text: 'با چالش تیمی، امتیاز و اعتبار تیم خود را افزایش دهید!' });

                                                const challengeMenuRow = new ActionRowBuilder()
                                                    .addComponents(
                                                        new ButtonBuilder()
                                                            .setCustomId('teams_menu')
                                                            .setLabel('🔙 بازگشت به منوی تیم')
                                                            .setStyle(ButtonStyle.Secondary)
                                                    );

                                                await interaction.update({ embeds: [challengeMenuEmbed], components: [challengeMenuRow] });
                                                break;

                                            // دکمه‌های مدیریت تیم
                                            case 'team_accept':
                                                // پذیرش دعوت به تیم
                                                const acceptTeamId = interaction.customId.split('_')[2];

                                                // بررسی اینکه فقط کاربر دعوت شده بتواند دعوت را بپذیرد
                                                if (interaction.message.mentions.users.first().id !== interaction.user.id) {
                                                    return await interaction.reply({
                                                        content: '❌ فقط کاربر دعوت شده می‌تواند این دعوت را بپذیرد!',
                                                        ephemeral: true
                                                    });
                                                }

                                                const acceptTeamResult = joinTeam(interaction.user.id, acceptTeamId);

                                                if (!acceptTeamResult.success) {
                                                    return await interaction.update({
                                                        content: acceptTeamResult.reason,
                                                        embeds: [],
                                                        components: []
                                                    });
                                                }

                                                // بررسی دستاورد بازیکن تیمی
                                                const acceptTeamAchievements = checkAchievement(interaction.user.id, 'team_player');
                                                let acceptTeamAchievementText = '';

                                                if (acceptTeamAchievements.length > 0) {
                                                    acceptTeamAchievementText = `\n\n🏆 **${interaction.user.username} دستاورد جدیدی کسب کرد!**\n"${acceptTeamAchievements[0].name}" - ${acceptTeamAchievements[0].reward} ${COIN_NAME} جایزه`;
                                                }

                                                await interaction.update({
                                                    content: `✅ ${interaction.user.username} به تیم "${acceptTeamResult.teamName}" پیوست!${acceptTeamAchievementText}`,
                                                    embeds: [],
                                                    components: []
                                                });
                                                break;

                                            case 'team_reject':
                                                // رد دعوت به تیم
                                                if (interaction.message.mentions.users.first().id !== interaction.user.id) {
                                                    return await interaction.reply({
                                                        content: '❌ فقط کاربر دعوت شده می‌تواند این دعوت را رد کند!',
                                                        ephemeral: true
                                                    });
                                                }

                                                await interaction.update({
                                                    content: `❌ ${interaction.user.username} دعوت به تیم را رد کرد.`,
                                                    embeds: [],
                                                    components: []
                                                });
                                                break;

                                            // دکمه‌های چالش تیمی
                                            case 'challenge_accept':
                                                // پذیرش چالش تیمی
                                                const challengeParts = interaction.customId.split('_');
                                                const team1Id = challengeParts[2];
                                                const team2Id = challengeParts[3];
                                                const teamChallengeBet = parseInt(challengeParts[4]);

                                                // بررسی اینکه فقط رهبر تیم دوم بتواند چالش را بپذیرد
                                                if (!global.teams || !global.teams[team2Id] || global.teams[team2Id].leader !== interaction.user.id) {
                                                    return await interaction.reply({
                                                        content: '❌ فقط رهبر تیم حریف می‌تواند این چالش را بپذیرد!',
                                                        ephemeral: true
                                                    });
                                                }

                                                // شروع چالش تیمی
                                                await startTeamChallenge(team1Id, team2Id, teamChallengeBet, interaction);
                                                break;

                                            case 'challenge_reject':
                                                // رد چالش تیمی
                                                const challengeMessage = interaction.message;

                                                // بررسی اینکه فقط رهبر تیم دوم بتواند چالش را رد کند
                                                const mentionedUser = challengeMessage.mentions.users.first();

                                                if (mentionedUser.id !== interaction.user.id) {
                                                    return await interaction.reply({
                                                        content: '❌ فقط رهبر تیم حریف می‌تواند این چالش را رد کند!',
                                                        ephemeral: true
                                                    });
                                                }

                                                await interaction.update({
                                                    content: `❌ ${interaction.user.username} چالش تیمی را رد کرد.`,
                                                    embeds: [],
                                                    components: []
                                                });
                                                break;

                                            // منوی فروشگاه
                                            case 'shop':
                                                const shopEmbed = new EmbedBuilder()
                                                    .setTitle('🛒 فروشگاه')
                                                    .setColor('#FF00FF')
                                                    .setDescription('فروشگاه با قیمت‌های پویا - قیمت‌ها بر اساس عرضه و تقاضا تغییر می‌کنند:');

                                                // ساعت به‌روزرسانی بعدی قیمت‌ها
                                                const nextUpdateTime = lastMarketUpdate + MARKET_UPDATE_INTERVAL;
                                                const timeToUpdate = Math.max(0, nextUpdateTime - Date.now());
                                                const hoursToUpdate = Math.floor(timeToUpdate / (60 * 60 * 1000));
                                                const minutesToUpdate = Math.floor((timeToUpdate % (60 * 60 * 1000)) / (60 * 1000));

                                                // اضافه کردن آیتم‌ها به امبد با قیمت‌های پویا
                                                shopItems.forEach(item => {
                                                    const basePrice = item.price;
                                                    const actualPrice = getActualItemPrice(item.id);

                                                                            // تعیین وضعیت قیمت (افزایش یا کاهش)
                                                                            let priceStatus = '';
                                                                            if (actualPrice > basePrice) {
                                                                                const increase = Math.round((actualPrice / basePrice - 1) * 100);
                                                                                priceStatus = `📈 ${increase}%+`;
                                                                            } else if (actualPrice < basePrice) {
                                                                                const decrease = Math.round((1 - actualPrice / basePrice) * 100);
                                                                                priceStatus = `📉 ${decrease}%-`;
                                                                            } else {
                                                                                priceStatus = '⚖️ ثابت';
                                                                            }

                                                                            shopEmbed.addFields({ 
                                                                                name: `${item.name} - ${actualPrice} ${COIN_NAME} ${priceStatus}`, 
                                                                                value: item.description,
                                                                                inline: true 
                                                                            });
                                                                        });

                                                                        // زمان به‌روزرسانی بعدی
                                                                        shopEmbed.addFields({ 
                                                                            name: '⏱️ به‌روزرسانی بعدی قیمت‌ها', 
                                                                            value: `${hoursToUpdate} ساعت و ${minutesToUpdate} دقیقه دیگر`, 
                                                                            inline: false 
                                                                        });

                                                                        // ایجاد دکمه‌ها برای خرید (حداکثر 5 دکمه در هر ردیف)
                                                                        const shopRow = new ActionRowBuilder();

                                                                        // اضافه کردن دکمه‌ها بر اساس آیتم‌های موجود (حداکثر 5 دکمه)
                                                                        const maxButtonsToShow = Math.min(shopItems.length, 5);
                                                                        for (let i = 0; i < maxButtonsToShow; i++) {
                                                                            shopRow.addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`buy_${shopItems[i].id}`)
                                                                                    .setLabel(`خرید ${shopItems[i].name}`)
                                                                                    .setStyle(ButtonStyle.Primary)
                                                                            );
                                                                        }

                                                                        // دکمه تاریخچه قیمت‌ها
                                                                        const marketHistoryRow = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('market_history')
                                                                                    .setLabel('📊 تاریخچه قیمت‌ها')
                                                                                    .setStyle(ButtonStyle.Success),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('back_to_menu')
                                                                                    .setLabel('🔙 بازگشت به منوی اصلی')
                                                                                    .setStyle(ButtonStyle.Secondary)
                                                                            );

                                                                        await interaction.update({ embeds: [shopEmbed], components: [shopRow, marketHistoryRow] });
                                                                        break;

                                                                    case 'market_history':
                                                                        // نمایش تاریخچه قیمت‌های بازار
                                                                        const market = global.market || { history: [], lastUpdated: Date.now() };

                                                                        let historyText = '';
                                                                        if (market.history.length > 0) {
                                                                            // نمایش 5 تغییر آخر
                                                                            const recentHistory = market.history.slice(-5).reverse();

                                                                            historyText = recentHistory.map((entry, index) => {
                                                                                const date = new Date(entry.timestamp);
                                                                                const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;

                                                                                // برای هر آیتم، تغییرات قیمت را محاسبه می‌کنیم
                                                                                let priceChanges = '';
                                                                                for (const itemId in entry.changes.after) {
                                                                                    const before = entry.changes.before[itemId] || 1.0;
                                                                                    const after = entry.changes.after[itemId];
                                                                                    const changePercent = Math.round((after / before - 1) * 100);

                                                                                    // پیدا کردن نام آیتم
                                                                                    const item = shopItems.find(i => i.id === itemId);
                                                                                    if (item) {
                                                                                        const icon = changePercent > 0 ? '📈' : (changePercent < 0 ? '📉' : '⚖️');
                                                                                        priceChanges += `${item.name}: ${icon} ${changePercent > 0 ? '+' : ''}${changePercent}%\n`;
                                                                                    }
                                                                                }

                                                                                return `**به‌روزرسانی ${index + 1}** (${formattedDate}):\n${priceChanges}`;
                                                                            }).join('\n\n');
                                                                        } else {
                                                                            historyText = 'هنوز هیچ تاریخچه‌ای ثبت نشده است!';
                                                                        }

                                                                        const marketHistoryEmbed = new EmbedBuilder()
                                                                            .setTitle('📊 تاریخچه تغییرات قیمت بازار')
                                                                            .setColor('#4CD964')
                                                                            .setDescription('قیمت‌ها بر اساس عرضه و تقاضا هر 12 ساعت تغییر می‌کنند:')
                                                                            .addFields(
                                                                                { name: '📝 تغییرات اخیر', value: historyText, inline: false },
                                                                                { name: '💡 نکته', value: 'از تغییرات قیمت به نفع خود استفاده کنید! هنگام کاهش قیمت بخرید و هنگام افزایش قیمت بفروشید.', inline: false }
                                                                            )
                                                                            .setFooter({ text: `آخرین به‌روزرسانی: ${new Date(market.lastUpdated).toLocaleString()}` });

                                                                        const backToShopRow = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('shop')
                                                                                    .setLabel('🔙 بازگشت به فروشگاه')
                                                                                    .setStyle(ButtonStyle.Secondary)
                                                                            );

                                                                        await interaction.update({ embeds: [marketHistoryEmbed], components: [backToShopRow] });
                                                                        break;

                                                                    // بازی شیر یا خط
                                                                    case 'coinflip_heads_10':
                                                                    case 'coinflip_tails_10':
                                                                    case 'coinflip_heads_50':
                                                                    case 'coinflip_tails_50':
                                                                        const parts = interaction.customId.split('_');
                                                                        const choice = parts[1]; // heads یا tails
                                                                        const betAmount = parseInt(parts[2]); // 10 یا 50

                                                                        if (getUser(interaction.user.id).balance < betAmount) {
                                                                            await interaction.reply({ 
                                                                                content: `❌ موجودی شما کافی نیست! شما به ${betAmount - getUser(interaction.user.id).balance} ${COIN_NAME} بیشتر نیاز دارید.`, 
                                                                                ephemeral: true 
                                                                            });
                                                                            return;
                                                                        }

                                                                        // تعیین نتیجه تصادفی (شیر یا خط)
                                                                        const result = Math.random() < 0.5 ? 'heads' : 'tails';
                                                                        const won = choice === result;

                                                                        // بروزرسانی موجودی
                                                                        if (won) {
                                                                            getUser(interaction.user.id).balance += betAmount;
                                                                        } else {
                                                                            getUser(interaction.user.id).balance -= betAmount;
                                                                        }
                                                                        saveData();

                                                                        // ایجاد امبد برای نمایش نتیجه
                                                                        const coinflipResultEmbed = new EmbedBuilder()
                                                                            .setTitle('🎯 نتیجه شیر یا خط')
                                                                            .setColor(won ? '#00FF00' : '#FF0000')
                                                                            .setDescription(`سکه به هوا پرتاب شد و نتیجه...

                                                    ${result === 'heads' ? '**شیر** آمد!' : '**خط** آمد!'}

                                                    ${won ? `🎉 تبریک! شما برنده شدید و **${betAmount} ${COIN_NAME}** برنده شدید!` : `😢 متأسفانه باختید و **${betAmount} ${COIN_NAME}** از دست دادید!`}

                                                    موجودی فعلی: **${getUser(interaction.user.id).balance} ${COIN_NAME}**`);

                                                                        const playAgainRow = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('play_coinflip')
                                                                                    .setLabel('🔄 بازی دوباره')
                                                                                    .setStyle(ButtonStyle.Primary),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('games')
                                                                                    .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                    .setStyle(ButtonStyle.Secondary)
                                                                            );

                                                                        await interaction.update({ embeds: [coinflipResultEmbed], components: [playAgainRow] });
                                                                        break;

                                                                    // پردازش دکمه‌های فروشگاه
                                                                    case 'buy_lootbox':
                                                                        // سیستم لوت‌باکس پیشرفته
                                                                        const lootboxUserData = getUser(interaction.user.id);
                                                                        const lootboxCost = 100;

                                                                        // بررسی موجودی
                                                                        if (lootboxUserData.balance < lootboxCost) {
                                                                            await interaction.reply({
                                                                                content: `❌ موجودی شما برای خرید لوت‌باکس کافی نیست! (نیاز به ${lootboxCost} ${COIN_NAME})`,
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        // کم کردن هزینه
                                                                        lootboxUserData.balance -= lootboxCost;

                                                                        // به‌روزرسانی آمار کوئست‌ها
                                                                        updateQuestProgress(interaction.user.id, 'shop_purchase');

                                                                        // انیمیشن باز کردن لوت‌باکس
                                                                        const openingLootboxEmbed = new EmbedBuilder()
                                                                            .setTitle('🎁 در حال باز کردن لوت‌باکس')
                                                                            .setColor('#FF00FF')
                                                                            .setDescription('لوت‌باکس در حال باز شدن است...')
                                                                            .setImage('https://media.giphy.com/media/QxPLEnaOQ07qRiOaxW/giphy.gif');

                                                                        await interaction.reply({ embeds: [openingLootboxEmbed] });

                                                                        // تأخیر برای نمایش انیمیشن
                                                                        setTimeout(async () => {
                                                                            // تعیین جوایز ممکن به همراه احتمال آنها
                                                                            const lootboxPrizes = [
                                                                                { type: 'coins', amount: 50, chance: 25, name: '50 سکه', description: 'یک جایزه معمولی', rarity: 'common' },
                                                                                { type: 'coins', amount: 100, chance: 20, name: '100 سکه', description: 'بازگشت هزینه لوت‌باکس', rarity: 'common' },
                                                                                { type: 'coins', amount: 200, chance: 15, name: '200 سکه', description: 'سود دو برابر!', rarity: 'uncommon' },
                                                                                { type: 'coins', amount: 500, chance: 7, name: '500 سکه', description: 'جایزه بزرگ!', rarity: 'rare' },
                                                                                { type: 'coins', amount: 1000, chance: 3, name: '1000 سکه', description: 'گنج عظیم!', rarity: 'epic' },
                                                                                { type: 'boost', name: 'بوستر XP دو برابر', chance: 10, duration: 24, description: 'XP دو برابر به مدت 24 ساعت', rarity: 'uncommon' },
                                                                                { type: 'boost', name: 'بوستر شانس دزدی', chance: 8, duration: 12, description: 'افزایش شانس موفقیت در دزدی به مدت 12 ساعت', rarity: 'rare' },
                                                                                { type: 'item', name: 'طلسم محافظ دزدی', chance: 5, description: 'محافظت از شما در برابر دزدی‌های آینده', rarity: 'epic' },
                                                                                { type: 'item', name: 'نشان VIP موقت', chance: 4, description: 'دسترسی به امکانات VIP به مدت 3 روز', rarity: 'rare' },
                                                                                { type: 'nothing', chance: 3, name: 'هیچی!', description: 'متأسفانه این بار شانس با شما یار نبود!', rarity: 'common' }
                                                                            ];

                                                                            // انتخاب جایزه بر اساس شانس
                                                                            let totalChance = 0;
                                                                            for (const prize of lootboxPrizes) {
                                                                                totalChance += prize.chance;
                                                                            }

                                                                            const random = Math.random() * totalChance;
                                                                            let cumulativeChance = 0;
                                                                            let selectedPrize = null;

                                                                            for (const prize of lootboxPrizes) {
                                                                                cumulativeChance += prize.chance;
                                                                                if (random < cumulativeChance) {
                                                                                    selectedPrize = prize;
                                                                                    break;
                                                                                }
                                                                            }

                                                                            // اعمال جایزه به کاربر
                                                                            let resultMessage = '';

                                                                            if (selectedPrize.type === 'coins') {
                                                                                // جایزه سکه
                                                                                lootboxUserData.balance += selectedPrize.amount;
                                                                                resultMessage = `شما **${selectedPrize.amount} ${COIN_NAME}** دریافت کردید!`;
                                                                            } else if (selectedPrize.type === 'boost') {
                                                                                // جایزه بوست
                                                                                if (!lootboxUserData.boosts) {
                                                                                    lootboxUserData.boosts = [];
                                                                                }

                                                                                const expireTime = Date.now() + (selectedPrize.duration * 60 * 60 * 1000);

                                                                                lootboxUserData.boosts.push({
                                                                                    name: selectedPrize.name,
                                                                                    description: selectedPrize.description,
                                                                                    expireTime: expireTime
                                                                                });

                                                                                resultMessage = `شما **${selectedPrize.name}** دریافت کردید! (فعال تا ${new Date(expireTime).toLocaleString()})`;
                                                                            } else if (selectedPrize.type === 'item') {
                                                                                // جایزه آیتم
                                                                                if (!lootboxUserData.inventory) {
                                                                                    lootboxUserData.inventory = [];
                                                                                }

                                                                                lootboxUserData.inventory.push({
                                                                                    name: selectedPrize.name,
                                                                                    description: selectedPrize.description,
                                                                                    rarity: selectedPrize.rarity,
                                                                                    obtainedTime: Date.now()
                                                                                });

                                                                                resultMessage = `شما آیتم **${selectedPrize.name}** را به دست آوردید!`;
                                                                            } else if (selectedPrize.type === 'nothing') {
                                                                                // هیچی نبردید
                                                                                resultMessage = `متأسفانه این بار شانس با شما یار نبود! هیچ جایزه‌ای دریافت نکردید.`;
                                                                            }

                                                                            saveData();

                                                                            // ایجاد رنگ بر اساس نادر بودن جایزه
                                                                            let rarityColor = '#FFFFFF';
                                                                            switch (selectedPrize.rarity) {
                                                                                case 'common':
                                                                                    rarityColor = '#AAAAAA';
                                                                                    break;
                                                                                case 'uncommon':
                                                                                    rarityColor = '#55FF55';
                                                                                    break;
                                                                                case 'rare':
                                                                                    rarityColor = '#5555FF';
                                                                                    break;
                                                                                case 'epic':
                                                                                    rarityColor = '#AA00AA';
                                                                                    break;
                                                                                case 'legendary':
                                                                                    rarityColor = '#FFAA00';
                                                                                    break;
                                                                            }

                                                                            // ایجاد embeded برای نمایش نتیجه
                                                                            const lootboxResultEmbed = new EmbedBuilder()
                                                                                .setTitle(`🎁 نتیجه لوت‌باکس - ${selectedPrize.name}`)
                                                                                .setColor(rarityColor)
                                                                                .setDescription(`${resultMessage}\n\n**توضیحات**: ${selectedPrize.description}`)
                                                                                .addFields(
                                                                                    { name: '💰 موجودی جدید', value: `${lootboxUserData.balance} ${COIN_NAME}`, inline: true },
                                                                                    { name: '🎲 نادر بودن', value: `${selectedPrize.rarity === 'common' ? 'معمولی' : (selectedPrize.rarity === 'uncommon' ? 'غیرمعمول' : (selectedPrize.rarity === 'rare' ? 'نادر' : (selectedPrize.rarity === 'epic' ? 'حماسی' : 'افسانه‌ای')))}`, inline: true }
                                                                                )
                                                                                .setFooter({ text: 'می‌توانید با خرید لوت‌باکس‌های بیشتر شانس خود را دوباره امتحان کنید!' });

                                                                            // دکمه‌های خرید مجدد و بازگشت
                                                                            const lootboxResultButtons = new ActionRowBuilder()
                                                                                .addComponents(
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId('buy_lootbox')
                                                                                        .setLabel(`خرید لوت‌باکس دیگر (${lootboxCost} سکه)`)
                                                                                        .setStyle(ButtonStyle.Primary)
                                                                                        .setEmoji('🎁'),
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId('inventory')
                                                                                        .setLabel('مشاهده کوله‌پشتی')
                                                                                        .setStyle(ButtonStyle.Success),
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId('games')
                                                                                        .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                        .setStyle(ButtonStyle.Secondary)
                                                                                );

                                                                            await interaction.editReply({ embeds: [lootboxResultEmbed], components: [lootboxResultButtons] });
                                                                        }, 3000);
                                                                        break;

                                                                    case 'buy_role_vip':
                                                                    case 'buy_custom_color':
                                                                    default:
                                                                        // پردازش دکمه‌های واریز به بانک
                                                                        if (interaction.customId.startsWith('deposit_')) {
                                                                            const option = interaction.customId.split('_')[1];
                                                                            const depositUserData = getUser(interaction.user.id);
                                                                            let depositAmount = 0;

                                                                            if (option === 'all') {
                                                                                // واریز تمام سکه‌ها
                                                                                depositAmount = depositUserData.balance;
                                                                            } else {
                                                                                // واریز مقدار مشخص
                                                                                depositAmount = parseInt(option);
                                                                            }

                                                                            if (depositAmount <= 0) {
                                                                                await interaction.update({
                                                                                    content: '❌ مقدار باید بیشتر از صفر باشد!',
                                                                                    embeds: [],
                                                                                    components: [],
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            if (depositUserData.balance < depositAmount) {
                                                                                await interaction.update({
                                                                                    content: '❌ موجودی کیف پول شما کافی نیست!',
                                                                                    embeds: [],
                                                                                    components: [],
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            depositUserData.balance -= depositAmount;
                                                                            depositUserData.bank = (depositUserData.bank || 0) + depositAmount;
                                                                            saveData();

                                                                            await interaction.update({
                                                                                content: `✅ مبلغ ${depositAmount} ${COIN_NAME} به حساب بانکی شما واریز شد.\n\n**موجودی کیف پول**: ${depositUserData.balance} ${COIN_NAME}\n**موجودی حساب بانکی**: ${depositUserData.bank} ${COIN_NAME}`,
                                                                                embeds: [],
                                                                                components: [],
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        // پردازش دکمه‌های برداشت از بانک
                                                                        if (interaction.customId.startsWith('withdraw_')) {
                                                                            const option = interaction.customId.split('_')[1];
                                                                            const withdrawUserData = getUser(interaction.user.id);
                                                                            let withdrawAmount = 0;

                                                                            if (option === 'all') {
                                                                                // برداشت تمام سکه‌ها
                                                                                withdrawAmount = withdrawUserData.bank || 0;
                                                                            } else {
                                                                                // برداشت مقدار مشخص
                                                                                withdrawAmount = parseInt(option);
                                                                            }

                                                                            if (withdrawAmount <= 0) {
                                                                                await interaction.update({
                                                                                    content: '❌ مقدار باید بیشتر از صفر باشد!',
                                                                                    embeds: [],
                                                                                    components: [],
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            if (!withdrawUserData.bank || withdrawUserData.bank < withdrawAmount) {
                                                                                await interaction.update({
                                                                                    content: '❌ موجودی حساب بانکی شما کافی نیست!',
                                                                                    embeds: [],
                                                                                    components: [],
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            withdrawUserData.bank -= withdrawAmount;
                                                                            withdrawUserData.balance += withdrawAmount;
                                                                            saveData();

                                                                            await interaction.update({
                                                                                content: `✅ مبلغ ${withdrawAmount} ${COIN_NAME} از حساب بانکی شما برداشت شد.\n\n**موجودی کیف پول**: ${withdrawUserData.balance} ${COIN_NAME}\n**موجودی حساب بانکی**: ${withdrawUserData.bank} ${COIN_NAME}`,
                                                                                embeds: [],
                                                                                components: [],
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        // پردازش دکمه‌های سرمایه‌گذاری
                                                                        if (interaction.customId.startsWith('invest_')) {
                                                                            const investAmount = parseInt(interaction.customId.split('_')[1]);
                                                                            const investUserData = getUser(interaction.user.id);

                                                                            if (investUserData.balance < investAmount) {
                                                                                await interaction.update({
                                                                                    content: '❌ موجودی کیف پول شما کافی نیست!',
                                                                                    embeds: [],
                                                                                    components: [],
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            investUserData.balance -= investAmount;
                                                                            investUserData.investment = (investUserData.investment || 0) + investAmount;
                                                                            saveData();

                                                                            await interaction.update({
                                                                                content: `✅ شما ${investAmount} ${COIN_NAME} را سرمایه‌گذاری کردید! سود ماهانه ${INVESTMENT_RATE * 100}% خواهد بود.\n\n**موجودی کیف پول**: ${investUserData.balance} ${COIN_NAME}\n**سرمایه‌گذاری فعلی**: ${investUserData.investment} ${COIN_NAME}`,
                                                                                embeds: [],
                                                                                components: [],
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        // اگر دکمه خرید آیتم باشد
                                                                        if (interaction.customId.startsWith('buy_')) {
                                                                            const itemId = interaction.customId.replace('buy_', '');
                                                                            const item = shopItems.find(i => i.id === itemId);

                                                                            if (!item) {
                                                                                await interaction.reply({ 
                                                                                    content: '❌ این آیتم در فروشگاه موجود نیست!', 
                                                                                    ephemeral: true 
                                                                                });
                                                                                return;
                                                                            }

                                                                            const buyerData = getUser(interaction.user.id);

                                                                            if (buyerData.balance < item.price) {
                                                                                await interaction.reply({ 
                                                                                    content: `❌ موجودی شما کافی نیست! شما به ${item.price - buyerData.balance} ${COIN_NAME} بیشتر نیاز دارید.`, 
                                                                                    ephemeral: true 
                                                                                });
                                                                                return;
                                                                            }

                                                                            buyerData.balance -= item.price;

                                                                            // اضافه کردن آیتم به کوله‌پشتی کاربر
                                                                            if (!buyerData.inventory) {
                                                                                buyerData.inventory = [];
                                                                            }

                                                                            buyerData.inventory.push({
                                                                                id: item.id,
                                                                                name: item.name,
                                                                                description: item.description,
                                                                                purchaseDate: Date.now()
                                                                            });

                                                                            saveData();

                                                                            // اقدامات خاص برای آیتم‌های مختلف
                                                                            if (item.id === 'role_vip') {
                                                                                // اعطای رول VIP (اگر در محیط سرور باشیم)
                                                                                try {
                                                                                    // می‌توان در آینده کد اعطای رول را اینجا اضافه کرد
                                                                                    // await interaction.member.roles.add('ROLE_ID_FOR_VIP');
                                                                                } catch (error) {
                                                                                    console.error('خطا در اعطای رول:', error);
                                                                                }
                                                                            } else if (item.id === 'lootbox') {
                                                                                // جوایز تصادفی جعبه شانس
                                                                                const prizes = [
                                                                                    { type: 'coins', amount: 100, chance: 40 },
                                                                                    { type: 'coins', amount: 500, chance: 20 },
                                                                                    { type: 'coins', amount: 1000, chance: 5 },
                                                                                    { type: 'nothing', chance: 35 }
                                                                                ];

                                                                                // انتخاب جایزه بر اساس شانس
                                                                                let totalChance = 0;
                                                                                const roll = Math.random() * 100;
                                                                                let prize = null;

                                                                                for (const p of prizes) {
                                                                                    totalChance += p.chance;
                                                                                    if (roll <= totalChance) {
                                                                                        prize = p;
                                                                                        break;
                                                                                    }
                                                                                }

                                                                                // اعمال جایزه
                                                                                if (prize.type === 'coins') {
                                                                                    buyerData.balance += prize.amount;
                                                                                    saveData();
                                                                                    await interaction.reply({ 
                                                                                        content: `✅ شما ${item.name} را خریدید و باز کردید!\n🎉 تبریک! شما از جعبه شانس **${prize.amount} ${COIN_NAME}** برنده شدید!`, 
                                                                                        ephemeral: true 
                                                                                    });
                                                                                    return;
                                                                                } else {
                                                                                    await interaction.reply({ 
                                                                                        content: `✅ شما ${item.name} را خریدید و باز کردید!\n😔 متأسفانه این بار شانس با شما یار نبود و چیزی از جعبه شانس بدست نیاوردید.`, 
                                                                                        ephemeral: true 
                                                                                    });
                                                                                    return;
                                                                                }
                                                                            }

                                                                            await interaction.reply({ 
                                                                                content: `✅ شما با موفقیت ${item.name} را به قیمت ${item.price} ${COIN_NAME} خریداری کردید!`, 
                                                                                ephemeral: true 
                                                                            });
                                                                            return;
                                                                        }
                                                                        break;


                                                                    case 'dice_again_10':
                                                                    case 'dice_again_20':
                                                                    case 'dice_again_50':
                                                                    case 'dice_again_100':
                                                                        const bet = parseInt(interaction.customId.split('_')[2]);
                                                                        const userDataDiceAgain = getUser(interaction.user.id);
                                                                        // اطمینان از به‌روزرسانی پروفایل کاربر
                                                                        saveData();
                                                                        if (userDataDiceAgain.balance < bet) {
                                                                            await interaction.reply({
                                                                                content: `❌ موجودی شما برای شرط بندی ${bet} ${COIN_NAME} کافی نیست!`,
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }
                                                                        const userRollAgain = Math.floor(Math.random() * 6) + 1;
                                                                        const botRollAgain = Math.floor(Math.random() * 6) + 1;

                                                                        let resultAgain = '';
                                                                        if (userRollAgain > botRollAgain) {
                                                                            userDataDiceAgain.balance += bet;
                                                                            resultAgain = `🎉 تبریک! شما برنده شدید و ${bet} ${COIN_NAME} دریافت کردید!`;
                                                                        } else if (userRollAgain < botRollAgain) {
                                                                            userDataDiceAgain.balance -= bet;
                                                                            resultAgain = `😢 متأسفانه باختید و ${bet} ${COIN_NAME} از دست دادید!`;
                                                                        } else {
                                                                            resultAgain = `😐 مساوی شد! هیچ سکه‌ای رد و بدل نشد.`;
                                                                        }
                                                                        saveData();
                                                                        const diceEmbedAgain = new EmbedBuilder()
                                                                            .setTitle('🎲 بازی تاس')
                                                                            .setColor(userRollAgain > botRollAgain ? '#00FF00' : (userRollAgain < botRollAgain ? '#FF0000' : '#FFFF00'))
                                                                            .setDescription(`
                                                    **تاس شما**: ${getDiceEmoji(userRollAgain)} (${userRollAgain})
                                                    **تاس ربات**: ${getDiceEmoji(botRollAgain)} (${botRollAgain})

                                                    ${resultAgain}

                                                    موجودی فعلی: **${userDataDiceAgain.balance} ${COIN_NAME}**`)
                                                                            .setFooter({ text: 'می‌توانید دوباره امتحان کنید!' });

                                                                        const diceButtonsAgain = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`dice_again_${bet}`)
                                                                                    .setLabel(`🎲 بازی مجدد (${bet} سکه)`)
                                                                                    .setStyle(ButtonStyle.Primary),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`dice_again_${bet * 2}`)
                                                                                    .setLabel(`🎲 دو برابر (${bet * 2} سکه)`)
                                                                                    .setStyle(ButtonStyle.Danger),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('games')
                                                                                    .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                    .setStyle(ButtonStyle.Secondary)
                                                                            );
                                                                        await interaction.update({ embeds: [diceEmbedAgain], components: [diceButtonsAgain] });
                                                                        break;

                                                                    case 'dice_game_10_bot':
                                                                    case 'dice_game_50_bot':
                                                                        const betAmountDice = interaction.customId === 'dice_game_10_bot' ? 10 : 50;
                                                                        const userDataDice = getUser(interaction.user.id);

                                                                        if (userDataDice.balance < betAmountDice) {
                                                                            await interaction.reply({
                                                                                content: `❌ موجودی شما برای شرط بندی ${betAmountDice} ${COIN_NAME} کافی نیست!`,
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        // ایجاد امبد اولیه برای نمایش انیمیشن تاس
                                                                        const rollingDiceEmbed = new EmbedBuilder()
                                                                            .setTitle('🎲 بازی تاس')
                                                                            .setColor('#6642A9')
                                                                            .setDescription('تاس در حال چرخش است...')
                                                                            .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHR6c3Bqc2h3NGRzcWprMHhudnMyZmhsMnNtbHcyZ3ZzdnBxdjRrbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tG7vpy33b8QV9J1zHu/giphy.gif');

                                                                        // ارسال پیام اولیه با انیمیشن
                                                                        const diceMessage = await interaction.reply({ 
                                                                            embeds: [rollingDiceEmbed], 
                                                                            fetchReply: true 
                                                                        });

                                                                        // تأخیر برای نمایش انیمیشن (3 ثانیه)
                                                                        setTimeout(async () => {
                                                                            const userRollDice = Math.floor(Math.random() * 6) + 1;
                                                                            const botRollDice = Math.floor(Math.random() * 6) + 1;

                                                                            let resultDice = '';
                                                                            if (userRollDice > botRollDice) {
                                                                                userDataDice.balance += betAmountDice;
                                                                                resultDice = `🎉 تبریک! شما برنده شدید و ${betAmountDice} ${COIN_NAME} دریافت کردید!`;
                                                                            } else if (userRollDice < botRollDice) {
                                                                                userDataDice.balance -= betAmountDice;
                                                                                resultDice = `😢 متأسفانه باختید و ${betAmountDice} ${COIN_NAME} از دست دادید!`;
                                                                            } else {
                                                                                resultDice = `😐 مساوی شد! هیچ سکه‌ای رد و بدل نشد.`;
                                                                            }

                                                                            saveData();

                                                                            const diceResultEmbed = new EmbedBuilder()
                                                                                .setTitle('🎲 بازی تاس')
                                                                                .setColor(userRollDice > botRollDice ? '#00FF00' : (userRollDice < botRollDice ? '#FF0000' : '#FFFF00'))
                                                                                .setDescription(`
                                                    **تاس شما**: ${getDiceEmoji(userRollDice)} (${userRollDice})
                                                    **تاس ربات**: ${getDiceEmoji(botRollDice)} (${botRollDice})

                                                    ${resultDice}

                                                    موجودی فعلی: **${userDataDice.balance} ${COIN_NAME}**`)
                                                                                .setFooter({ text: 'می‌توانید دوباره امتحان کنید!' });

                                                                            const diceGameButtons = new ActionRowBuilder()
                                                                                .addComponents(
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId(`dice_again_${betAmountDice}`)
                                                                                        .setLabel(`🎲 بازی مجدد (${betAmountDice} سکه)`)
                                                                                        .setStyle(ButtonStyle.Primary),
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId(`dice_again_${betAmountDice * 2}`)
                                                                                        .setLabel(`🎲 دو برابر (${betAmountDice * 2} سکه)`)
                                                                                        .setStyle(ButtonStyle.Danger),
                                                                                    new ButtonBuilder()
                                                                                        .setCustomId('games')
                                                                                        .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                        .setStyle(ButtonStyle.Secondary)
                                                                                );

                                                                            await interaction.editReply({ embeds: [diceResultEmbed], components: [diceGameButtons] });
                                                                        }, 3000);
                                                                        break;

                                                                    case 'dice_game_10_player':
                                                                    case 'dice_game_50_player':
                                                                        const betAmountMulti = interaction.customId === 'dice_game_10_player' ? 10 : 50;
                                                                        const userDataMulti = getUser(interaction.user.id);

                                                                        if (userDataMulti.balance < betAmountMulti) {
                                                                            await interaction.reply({
                                                                                content: `❌ موجودی شما برای شرط بندی ${betAmountMulti} ${COIN_NAME} کافی نیست!`,
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        const challengeEmbed = new EmbedBuilder()
                                                                            .setTitle('🎲 دعوت به بازی تاس')
                                                                            .setColor('#6642A9')
                                                                            .setDescription(`${interaction.user} شما را به یک دوئل تاس با شرط ${betAmountMulti} ${COIN_NAME} دعوت کرده است!\n\nبرای پذیرفتن این چالش، دکمه قبول را فشار دهید.`)
                                                                            .setFooter({ text: 'این درخواست پس از 60 ثانیه منقضی می‌شود' });

                                                                        const challengeButtons = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`dice_accept_${interaction.user.id}_${betAmountMulti}`)
                                                                                    .setLabel('✅ قبول چالش')
                                                                                    .setStyle(ButtonStyle.Success),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('dice_reject')
                                                                                    .setLabel('❌ رد کردن')
                                                                                    .setStyle(ButtonStyle.Danger)
                                                                            );

                                                                        await interaction.reply({ 
                                                                            content: 'لطفاً کاربری که می‌خواهید با او بازی کنید را منشن کنید:',
                                                                            ephemeral: true 
                                                                        });

                                                                        // منتظر پاسخ کاربر برای منشن کردن رقیب
                                                                        const filter = m => m.author.id === interaction.user.id && m.mentions.users.size > 0;
                                                                        const channel = interaction.channel;

                                                                        try {
                                                                            const collected = await channel.awaitMessages({ filter, max: 1, time: 30000, errors: ['time'] });
                                                                            const targetUser = collected.first().mentions.users.first();

                                                                            // حذف پیام منشن
                                                                            await collected.first().delete().catch(console.error);

                                                                            if (targetUser.id === interaction.user.id) {
                                                                                await interaction.followUp({
                                                                                    content: '❌ شما نمی‌توانید با خودتان بازی کنید!',
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            // بررسی موجودی کاربر هدف
                                                                            const targetUserData = getUser(targetUser.id);
                                                                            if (targetUserData.balance < betAmountMulti) {
                                                                                await interaction.followUp({
                                                                                    content: `❌ کاربر ${targetUser.username} موجودی کافی برای این بازی ندارد!`,
                                                                                    ephemeral: true
                                                                                });
                                                                                return;
                                                                            }

                                                                            const challengeMessage = await interaction.followUp({ 
                                                                                content: `${targetUser}`,
                                                                                embeds: [challengeEmbed], 
                                                                                components: [challengeButtons] 
                                                                            });

                                                                            // منتظر پاسخ کاربر دوم می‌مانیم
                                                                            const buttonFilter = i => 
                                                                                (i.customId === `dice_accept_${interaction.user.id}_${betAmountMulti}` || 
                                                                                 i.customId === 'dice_reject') && 
                                                                                i.user.id === targetUser.id;

                                                                            const buttonCollector = interaction.channel.createMessageComponentCollector({ 
                                                                                filter: buttonFilter, 
                                                                                time: 60000 
                                                                            });

                                                                            buttonCollector.on('collect', async i => {
                                                                                if (i.customId === 'dice_reject') {
                                                                                    await i.update({ 
                                                                                        content: `${targetUser.username} چالش را رد کرد!`, 
                                                                                        embeds: [], 
                                                                                        components: [] 
                                                                                    });
                                                                                    buttonCollector.stop();
                                                                                    return;
                                                                                }

                                                                                // کاربر چالش را پذیرفت - شروع بازی
                                                                                await i.update({ 
                                                                                    content: `${targetUser.username} چالش را پذیرفت! بازی شروع می‌شود...`,
                                                                                    embeds: [],
                                                                                    components: []
                                                                                });

                                                                                // ایجاد امبد اولیه برای نمایش انیمیشن تاس
                                                                                const multiRollingEmbed = new EmbedBuilder()
                                                                                    .setTitle('🎲 دوئل تاس')
                                                                                    .setColor('#6642A9')
                                                                                    .setDescription(`**${interaction.user.username}** vs **${targetUser.username}**\n\nتاس‌ها در حال چرخش هستند...`)
                                                                                    .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHR6c3Bqc2h3NGRzcWprMHhudnMyZmhsMnNtbHcyZ3ZzdnBxdjRrbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tG7vpy33b8QV9J1zHu/giphy.gif');

                                                                                await i.editReply({ 
                                                                                    content: '',
                                                                                    embeds: [multiRollingEmbed], 
                                                                                    components: [] 
                                                                                });

                                                                                // تأخیر برای نمایش انیمیشن (3 ثانیه)
                                                                                setTimeout(async () => {
                                                                                    const player1Roll = Math.floor(Math.random() * 6) + 1;
                                                                                    const player2Roll = Math.floor(Math.random() * 6) + 1;

                                                                                    let resultText = '';
                                                                                    if (player1Roll > player2Roll) {
                                                                                        // کاربر اول برنده شد
                                                                                        userDataMulti.balance += betAmountMulti;
                                                                                        targetUserData.balance -= betAmountMulti;
                                                                                        resultText = `🎉 **${interaction.user.username}** برنده شد و ${betAmountMulti} ${COIN_NAME} دریافت کرد!`;
                                                                                    } else if (player1Roll < player2Roll) {
                                                                                        // کاربر دوم برنده شد
                                                                                        userDataMulti.balance -= betAmountMulti;
                                                                                        targetUserData.balance += betAmountMulti;
                                                                                        resultText = `🎉 **${targetUser.username}** برنده شد و ${betAmountMulti} ${COIN_NAME} دریافت کرد!`;
                                                                                    } else {
                                                                                        // مساوی
                                                                                        resultText = `😐 بازی مساوی شد! هیچ سکه‌ای رد و بدل نشد.`;
                                                                                    }

                                                                                    saveData();

                                                                                    const duelResultEmbed = new EmbedBuilder()
                                                                                        .setTitle('🎲 نتیجه دوئل تاس')
                                                                                        .setColor(player1Roll > player2Roll ? '#00FF00' : (player1Roll < player2Roll ? '#FF0000' : '#FFFF00'))
                                                                                        .setDescription(`
                                                    **${interaction.user.username}**: ${getDiceEmoji(player1Roll)} (${player1Roll})
                                                    **${targetUser.username}**: ${getDiceEmoji(player2Roll)} (${player2Roll})

                                                    ${resultText}`)
                                                                                        .setFooter({ text: 'بازی به پایان رسید' });

                                                                                    const rematchButton = new ActionRowBuilder()
                                                                                        .addComponents(
                                                                                            new ButtonBuilder()
                                                                                                .setCustomId(`dice_rematch_${interaction.user.id}_${targetUser.id}_${betAmountMulti}`)
                                                                                                .setLabel('🔄 بازی مجدد')
                                                                                                .setStyle(ButtonStyle.Primary)
                                                                                        );

                                                                                    await i.editReply({ 
                                                                                        embeds: [duelResultEmbed], 
                                                                                        components: [rematchButton] 
                                                                                    });
                                                                                }, 3000);
                                                                            });

                                                                            buttonCollector.on('end', collected => {
                                                                                if (collected.size === 0) {
                                                                                    interaction.followUp({ 
                                                                                        content: '⏱️ زمان انتظار برای پاسخ به چالش به پایان رسید!',
                                                                                        ephemeral: true
                                                                                    });
                                                                                }
                                                                            });
                                                                        } catch (err) {
                                                                            console.error(err);
                                                                            await interaction.followUp({
                                                                                content: '❌ شما هیچ کاربری را منشن نکردید یا زمان انتظار به پایان رسید!',
                                                                                ephemeral: true
                                                                            });
                                                                        }
                                                                        break;

                                                                    case 'play_steal':
                                                                        // پنجره جیب‌زنی
                                                                        const isStealActive = checkStealWindow();

                                                                        if (!isStealActive) {
                                                                            await interaction.reply({
                                                                                content: '❌ جیب‌زنی فقط در زمان‌های خاصی از روز فعال است! الان زمان جیب‌زنی نیست.',
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        const stealEmbed = new EmbedBuilder()
                                                                            .setTitle('🥷 جیب‌زنی')
                                                                            .setColor('#FF5555')
                                                                            .setDescription('پنجره جیب‌زنی فعال است! برای دزدی از جیب کاربران دیگر، از دستور `/steal` استفاده کنید.\n\nمثال: `/steal user:@username`\n\n**نکته**: فقط سکه‌های موجود در جیب (کیف پول) قابل دزدی هستند. برای محافظت از سکه‌های خود، آنها را در بانک نگهداری کنید!')
                                                                            .addFields(
                                                                                { name: '⚠️ هشدار', value: 'امکان ناموفق بودن جیب‌زنی وجود دارد که منجر به جریمه شما خواهد شد!' },
                                                                                { name: '📝 محدودیت‌ها', value: `- حداکثر ${MAX_DAILY_STEALS} بار جیب‌زنی در روز\n- حداکثر 1 بار دزدی از هر کاربر در روز\n- حداکثر ${MAX_STEAL_PERCENTAGE * 100}% از موجودی جیب کاربر قابل سرقت است` }
                                                                            );

                                                                        await interaction.reply({ embeds: [stealEmbed], ephemeral: true });
                                                                        break;

                                                                    case 'steal_info':
                                                                        // راهنمای جیب‌زنی
                                                                        const stealInfoEmbed = new EmbedBuilder()
                                                                            .setTitle('ℹ️ راهنمای سیستم جیب‌زنی')
                                                                            .setColor('#3498DB')
                                                                            .setDescription('سیستم جیب‌زنی به شما امکان دزدی از سکه‌های کاربران دیگر را می‌دهد، اما با محدودیت‌هایی همراه است:')
                                                                            .addFields(
                                                                                { name: '⏰ پنجره زمانی', value: 'جیب‌زنی فقط در یک بازه زمانی 15 دقیقه‌ای در روز فعال است. این بازه زمانی به صورت تصادفی تعیین می‌شود.' },
                                                                                { name: '🛡️ محافظت کاربران جدید', value: `کاربران جدید تا ${NEW_USER_PROTECTION_DAYS} روز اول از سرقت محافظت می‌شوند.` },
                                                                                { name: '🔒 امنیت', value: 'فقط سکه‌های موجود در جیب (کیف پول) قابل دزدی هستند. سکه‌های داخل بانک ایمن هستند.' },
                                                                                { name: '⚖️ محدودیت‌ها', value: `- حداکثر ${MAX_DAILY_STEALS} بار جیب‌زنی در روز\n- حداکثر 1 بار دزدی از هر کاربر در روز\n- حداکثر ${MAX_STEAL_PERCENTAGE * 100}% از موجودی جیب کاربر قابل سرقت است\n- کاربرانی که اخیراً از آنها دزدی شده، شانس بیشتری برای مقاومت دارند` },
                                                                                { name: '⚠️ ریسک', value: 'در صورت ناموفق بودن دزدی، شما جریمه خواهید شد!' }
                                                                            )
                                                                            .setFooter({ text: 'برای محافظت از سکه‌های خود، آنها را در بانک نگهداری کنید!' });

                                                                        await interaction.reply({ embeds: [stealInfoEmbed], ephemeral: true });
                                                                        break;

                                                                    case 'dice_rematch':
                                                                        // پردازش درخواست بازی مجدد
                                                                        const rematchParts = interaction.customId.split('_');
                                                                        const player1Id = rematchParts[2];
                                                                        const player2Id = rematchParts[3];
                                                                        const rematchBet = parseInt(rematchParts[4]);

                                                                        // بررسی اینکه کدام بازیکن دکمه را فشار داده است
                                                                        if (interaction.user.id !== player1Id && interaction.user.id !== player2Id) {
                                                                            await interaction.reply({
                                                                                content: '❌ شما جزو بازیکنان این بازی نیستید!',
                                                                                ephemeral: true
                                                                            });
                                                                            return;
                                                                        }

                                                                        const opponent = interaction.user.id === player1Id ? player2Id : player1Id;

                                                                        // ایجاد دکمه‌های قبول یا رد بازی مجدد
                                                                        const rematchEmbed = new EmbedBuilder()
                                                                            .setTitle('🎲 درخواست بازی مجدد')
                                                                            .setColor('#6642A9')
                                                                            .setDescription(`${interaction.user} درخواست بازی مجدد با شرط ${rematchBet} ${COIN_NAME} داده است!`)
                                                                            .setFooter({ text: 'این درخواست پس از 30 ثانیه منقضی می‌شود' });

                                                                        const rematchButtons = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`dice_accept_rematch_${player1Id}_${player2Id}_${rematchBet}`)
                                                                                    .setLabel('✅ قبول')
                                                                                    .setStyle(ButtonStyle.Success),
                                                                                new ButtonBuilder()
                                                                                    .setCustomId('dice_reject_rematch')
                                                                                    .setLabel('❌ رد کردن')
                                                                                    .setStyle(ButtonStyle.Danger)
                                                                            );

                                                                        await interaction.update({ 
                                                                            embeds: [rematchEmbed], 
                                                                            components: [rematchButtons] 
                                                                        });

                                                                        // منتظر پاسخ حریف می‌مانیم
                                                                        const rematchFilter = i => 
                                                                            (i.customId === `dice_accept_rematch_${player1Id}_${player2Id}_${rematchBet}` || 
                                                                             i.customId === 'dice_reject_rematch') && 
                                                                            i.user.id === opponent;

                                                                        const rematchCollector = interaction.channel.createMessageComponentCollector({ 
                                                                            filter: rematchFilter, 
                                                                            time: 30000 
                                                                        });

                                                                        rematchCollector.on('collect', async i => {
                                                                            if (i.customId === 'dice_reject_rematch') {
                                                                                await i.update({ 
                                                                                    content: `<@${opponent}> درخواست بازی مجدد را رد کرد!`, 
                                                                                    embeds: [], 
                                                                                    components: [] 
                                                                                });
                                                                                rematchCollector.stop();
                                                                                return;
                                                                            }

                                                                            // بررسی موجودی هر دو بازیکن
                                                                            const player1Data = getUser(player1Id);
                                                                            const player2Data = getUser(player2Id);

                                                                            if (player1Data.balance < rematchBet || player2Data.balance < rematchBet) {
                                                                                await i.update({
                                                                                    content: '❌ یکی از بازیکنان موجودی کافی ندارد!',
                                                                                    embeds: [],
                                                                                    components: []
                                                                                });
                                                                                return;
                                                                            }

                                                                            // شروع بازی مجدد
                                                                            await i.update({ 
                                                                                content: `<@${opponent}> درخواست را پذیرفت! بازی مجدد شروع می‌شود...`,
                                                                                embeds: [],
                                                                                components: []
                                                                            });

                                                                            // مشابه کد بازی قبلی...
                                                                            const rematchRollingEmbed = new EmbedBuilder()
                                                                                .setTitle('🎲 دوئل تاس (بازی مجدد)')
                                                                                .setColor('#6642A9')
                                                                                .setDescription(`**<@${player1Id}>** vs **<@${player2Id}>**\n\nتاس‌ها در حال چرخش هستند...`)
                                                                                .setImage('https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExbHR6c3Bqc2h3NGRzcWprMHhudnMyZmhsMnNtbHcyZ3ZzdnBxdjRrbiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/tG7vpy33b8QV9J1zHu/giphy.gif');

                                                                            await i.editReply({ 
                                                                                content: '',
                                                                                embeds: [rematchRollingEmbed], 
                                                                                components: [] 
                                                                            });

                                                                            // تأخیر برای نمایش انیمیشن (3 ثانیه)
                                                                            setTimeout(async () => {
                                                                                const player1Roll = Math.floor(Math.random() * 6) + 1;
                                                                                const player2Roll = Math.floor(Math.random() * 6) + 1;

                                                                                                            let resultText = '';
                                                                                                            if (player1Roll > player2Roll) {
                                                                                                                // کاربر اول برنده شد
                                                                                                                player1Data.balance += rematchBet;
                                                                                                                player2Data.balance -= rematchBet;
                                                                                                                resultText = `🎉 **<@${player1Id}>** برنده شد و ${rematchBet} ${COIN_NAME} دریافت کرد!`;
                                                                                                            } else if (player1Roll < player2Roll) {
                                                                                                                // کاربر دوم برنده شد
                                                                                                                player1Data.balance -= rematchBet;
                                                                                                                player2Data.balance += rematchBet;
                                                                                                                resultText = `🎉 **<@${player2Id}>** برنده شد و ${rematchBet} ${COIN_NAME} دریافت کرد!`;
                                                                                                            } else {
                                                                                                                // مساوی
                                                                                                                resultText = `😐 بازی مساوی شد! هیچ سکه‌ای رد و بدل نشد.`;
                                                                                                            }

                                                                                                            saveData();

                                                                                                            const rematchResultEmbed = new EmbedBuilder()
                                                                                                                .setTitle('🎲 نتیجه دوئل تاس')
                                                                                                                .setColor(player1Roll > player2Roll ? '#00FF00' : (player1Roll < player2Roll ? '#FF0000' : '#FFFF00'))
                                                                                                                .setDescription(`
                                                                                **<@${player1Id}>**: ${getDiceEmoji(player1Roll)} (${player1Roll})
                                                                                **<@${player2Id}>**: ${getDiceEmoji(player2Roll)} (${player2Roll})

                                                                                ${resultText}`)
                                                                                                                .setFooter({ text: 'بازی به پایان رسید' });

                                                                                                            const rematchButtonAgain = new ActionRowBuilder()
                                                                                                                .addComponents(
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId(`dice_rematch_${player1Id}_${player2Id}_${rematchBet}`)
                                                                                                                        .setLabel('🔄 بازی مجدد')
                                                                                                                        .setStyle(ButtonStyle.Primary)
                                                                                                                );

                                                                                                            await i.editReply({ 
                                                                                                                embeds: [rematchResultEmbed], 
                                                                                                                components: [rematchButtonAgain] 
                                                                                                            });
                                                                                                        }, 3000);
                                                                                                    });

                                                                                                    rematchCollector.on('end', collected => {
                                                                                                        if (collected.size === 0) {
                                                                                                            interaction.editReply({ 
                                                                                                                content: '⏱️ زمان انتظار برای پاسخ به بازی مجدد به پایان رسید!',
                                                                                                                embeds: [],
                                                                                                                components: []
                                                                                                            });
                                                                                                        }
                                                                                                    });
                                                                                                    break;

                                                                                                case 'adminpanel':
                                                                                                    // بررسی دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای استفاده از پنل مدیریت را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    // ایجاد پنل مدیریت
                                                                                                    const adminPanelEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🛠️ پنل مدیریت')
                                                                                                        .setColor('#FF0000')
                                                                                                        .setDescription('خوش آمدید مدیر گرامی! از این پنل می‌توانید ربات را مدیریت کنید.')
                                                                                                        .addFields(
                                                                                                            { name: '📊 آمار', value: `تعداد کاربران: ${Object.keys(users).length}\nتعداد آیتم‌های فروشگاه: ${shopItems.length}`, inline: false },
                                                                                                            { name: '💰 مدیریت سکه', value: 'تنظیم یا اضافه کردن سکه به کاربران', inline: true },
                                                                                                            { name: '🛒 مدیریت فروشگاه', value: 'اضافه یا حذف کردن آیتم‌های فروشگاه', inline: true },
                                                                                                            { name: '📋 مدیریت داده‌ها', value: 'بازنشانی یا مدیریت داده‌های کاربران', inline: true }
                                                                                                        )
                                                                                                        .setFooter({ text: 'دسترسی فقط برای مدیران مجاز' });

                                                                                                    // دکمه‌های پنل مدیریت
                                                                                                    const adminPanelRow1 = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('admin_coins')
                                                                                                                .setLabel('💰 مدیریت سکه')
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('admin_shop')
                                                                                                                .setLabel('🛒 مدیریت فروشگاه')
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('admin_data')
                                                                                                                .setLabel('📋 مدیریت داده‌ها')
                                                                                                                .setStyle(ButtonStyle.Primary)
                                                                                                        );

                                                                                                    await interaction.reply({ embeds: [adminPanelEmbed], components: [adminPanelRow1], ephemeral: true });
                                                                                                    break;

                                                                                                case 'friend':
                                                                                                    const friendSubcommand = interaction.options.getSubcommand();

                                                                                                    switch(friendSubcommand) {
                                                                                                        case 'add':
                                                                                                            const requestTargetUser = interaction.options.getUser('user');

                                                                                                            if (requestTargetUser.bot) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ شما نمی‌توانید به ربات‌ها درخواست دوستی بدهید!',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            const requestResult = sendFriendRequest(interaction.user.id, requestTargetUser.id);

                                                                                                            if (!requestResult.success) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: requestResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            await interaction.reply({
                                                                                                                content: `✅ درخواست دوستی به ${requestTargetUser.username} ارسال شد!`,
                                                                                                                ephemeral: true
                                                                                                            });
                                                                                                            break;

                                                                                                        case 'accept':
                                                                                                            const requesterUser = interaction.options.getUser('user');
                                                                                                            const acceptResult = acceptFriendRequest(interaction.user.id, requesterUser.id);

                                                                                                            if (!acceptResult.success) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: acceptResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            await interaction.reply({
                                                                                                                content: `✅ شما و ${requesterUser.username} اکنون دوست هستید!`,
                                                                                                                ephemeral: false
                                                                                                            });
                                                                                                            break;

                                                                                                        case 'list':
                                                                                                            const userData = getUser(interaction.user.id);
                                                                                                            const friendList = userData.friends;
                                                                                                            const requestList = userData.friendRequests;

                                                                                                            let friendsText = '';
                                                                                                            if (friendList.length > 0) {
                                                                                                                friendsText = friendList.map((friendId, index) => `${index + 1}. <@${friendId}>`).join('\n');
                                                                                                            } else {
                                                                                                                friendsText = 'شما هنوز دوستی ندارید!';
                                                                                                            }

                                                                                                            let requestsText = '';
                                                                                                            if (requestList.length > 0) {
                                                                                                                requestsText = requestList.map((requesterId, index) => `${index + 1}. <@${requesterId}>`).join('\n');
                                                                                                            } else {
                                                                                                                requestsText = 'هیچ درخواست دوستی جدیدی ندارید!';
                                                                                                            }

                                                                                                            const friendsEmbed = new EmbedBuilder()
                                                                                                                .setTitle('👥 لیست دوستان')
                                                                                                                .setColor('#00FFFF')
                                                                                                                .addFields(
                                                                                                                    { name: '🫂 دوستان شما', value: friendsText, inline: false },
                                                                                                                    { name: '📨 درخواست‌های دوستی', value: requestsText, inline: false }
                                                                                                                )
                                                                                                                .setFooter({ text: 'برای پذیرش درخواست از دستور /friend accept استفاده کنید' });

                                                                                                            await interaction.reply({ embeds: [friendsEmbed] });
                                                                                                            break;

                                                                                                        case 'remove':
                                                                                                            const friendToRemove = interaction.options.getUser('user');
                                                                                                            const removeResult = removeFriend(interaction.user.id, friendToRemove.id);

                                                                                                            if (!removeResult.success) {
                                                                                                                return await interaction.reply ({
                                                                                                                    content: removeResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            await interaction.reply({
                                                                                                                content: `✅ ${friendToRemove.username} از لیست دوستان شما حذف شد.`,
                                                                                                                ephemeral: true
                                                                                                            });
                                                                                                            break;
                                                                                                    }
                                                                                                    break;

                                                                                                case 'team':
                                                                                                    const teamSubcommand = interaction.options.getSubcommand();

                                                                                                    switch(teamSubcommand) {
                                                                                                        case 'create':
                                                                                                            const teamName = interaction.options.getString('name');

                                                                                                            // محدودیت طول نام تیم
                                                                                                            if (teamName.length < 3 || teamName.length > 20) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ نام تیم باید بین 3 تا 20 کاراکتر باشد!',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            const createResult = createTeam(interaction.user.id, teamName);

                                                                                                            if (!createResult.success) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: createResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            // بررسی دستاورد بازیکن تیمی
                                                                                                            const newAchievements = checkAchievement(interaction.user.id, 'team_player');
                                                                                                            let achievementText = '';

                                                                                                            if (newAchievements.length > 0) {
                                                                                                                achievementText = `\n\n🏆 **دستاورد جدید!**\nشما دستاورد "${newAchievements[0].name}" را کسب کردید و ${newAchievements[0].reward} ${COIN_NAME} جایزه گرفتید!`;
                                                                                                            }

                                                                                                            const teamEmbed = new EmbedBuilder()
                                                                                                                .setTitle('🎮 تیم جدید ایجاد شد!')
                                                                                                                .setColor('#FF00FF')
                                                                                                                .setDescription(`✅ تیم "${teamName}" با موفقیت ایجاد شد!\n\n**شناسه تیم**: ${createResult.teamId}\n\nشما اکنون رهبر این تیم هستید. از این شناسه برای دعوت دوستان خود استفاده کنید.${achievementText}`)
                                                                                                                .setFooter({ text: 'برای دعوت دوستان از دستور /team invite استفاده کنید' });

                                                                                                            await interaction.reply({ embeds: [teamEmbed] });
                                                                                                            break;

                                                                                                        case 'join':
                                                                                                            const teamId = interaction.options.getString('id');
                                                                                                            const joinResult = joinTeam(interaction.user.id, teamId);

                                                                                                            if (!joinResult.success) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: joinResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            // بررسی دستاورد بازیکن تیمی
                                                                                                            const teamAchievements = checkAchievement(interaction.user.id, 'team_player');
                                                                                                            let teamAchievementText = '';

                                                                                                            if (teamAchievements.length > 0) {
                                                                                                                teamAchievementText = `\n\n🏆 **دستاورد جدید!**\nشما دستاورد "${teamAchievements[0].name}" را کسب کردید و ${teamAchievements[0].reward} ${COIN_NAME} جایزه گرفتید!`;
                                                                                                            }

                                                                                                            await interaction.reply({
                                                                                                                content: `✅ شما با موفقیت به تیم "${joinResult.teamName}" پیوستید!${teamAchievementText}`,
                                                                                                                ephemeral: false
                                                                                                            });
                                                                                                            break;

                                                                                                        case 'leave':
                                                                                                            const leaveResult = leaveTeam(interaction.user.id);

                                                                                                            if (!leaveResult.success) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: leaveResult.reason,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            await interaction.reply({
                                                                                                                content: leaveResult.message,
                                                                                                                ephemeral: true
                                                                                                            });
                                                                                                            break;

                                                                                                        case 'info':
                                                                                                            const teamUserData = getUser(interaction.user.id);

                                                                                                            // بررسی اینکه کاربر در تیمی باشد
                                                                                                            if (teamUserData.team === null) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ شما در هیچ تیمی نیستید! ابتدا با استفاده از دستور `/team join` به یک تیم بپیوندید یا با دستور `/team create` یک تیم جدید بسازید.',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            // بررسی وجود تیم
                                                                                                            if (!global.teams || !global.teams[teamUserData.team]) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ اطلاعات تیم شما یافت نشد! لطفاً با استفاده از دستور `/team join` به یک تیم بپیوندید یا با دستور `/team create` یک تیم جدید بسازید.',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            const teamData = global.teams[teamUserData.team];
                                                                                                            const membersList = teamData.members.map((memberId, index) => `${index + 1}. <@${memberId}>${memberId === teamData.leader ? ' 👑' : ''}`).join('\n');

                                                                                                            const teamInfoEmbed = new EmbedBuilder()
                                                                                                                .setTitle(`🎮 اطلاعات تیم "${teamData.name}"`)
                                                                                                                .setColor('#FF00FF')
                                                                                                                .addFields(
                                                                                                                    { name: '👑 رهبر تیم', value: `<@${teamData.leader}>`, inline: true },
                                                                                                                    { name: '📊 امتیاز تیم', value: `${teamData.score}`, inline: true },
                                                                                                                    { name: '📈 آمار', value: `🏆 پیروزی‌ها: ${teamData.wins}\n💔 شکست‌ها: ${teamData.losses}`, inline: true },
                                                                                                                    { name: '👥 اعضای تیم', value: membersList, inline: false },
                                                                                                                    { name: '🆔 شناسه تیم', value: teamData.id, inline: false },
                                                                                                                    { name: '📅 تاریخ ایجاد', value: `<t:${Math.floor(teamData.createdAt / 1000)}:R>`, inline: false }
                                                                                                                )
                                                                                                                .setFooter({ text: 'برای دعوت دوستان از دستور /team invite استفاده کنید' });

                                                                                                            await interaction.reply({ embeds: [teamInfoEmbed] });
                                                                                                            break;

                                                                                                        case 'invite':
                                                                                                            const inviteTarget = interaction.options.getUser('user');

                                                                                                            if (inviteTarget.bot) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ شما نمی‌توانید ربات‌ها را به تیم دعوت کنید!',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            const inviterData = getUser(interaction.user.id);

                                                                                                            // بررسی اینکه کاربر در تیمی باشد
                                                                                                            if (inviterData.team === null) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: '❌ شما در هیچ تیمی نیستید! ابتدا با استفاده از دستور `/team join` به یک تیم بپیوندید یا با دستور `/team create` یک تیم جدید بسازید.',
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            // بررسی اینکه فرد دعوت شده در تیم نباشد
                                                                                                            const targetData = getUser(inviteTarget.id);
                                                                                                            if (targetData.team !== null) {
                                                                                                                return await interaction.reply({
                                                                                                                    content: `❌ کاربر ${inviteTarget.username} در حال حاضر در یک تیم است!`,
                                                                                                                    ephemeral: true
                                                                                                                });
                                                                                                            }

                                                                                                            // ایجاد دکمه‌های تأیید دعوت
                                                                                                            const inviteEmbed = new EmbedBuilder()
                                                                                                                .setTitle('🎮 دعوت به تیم')
                                                                                                                .setColor('#FF00FF')
                                                                                                                .setDescription(`${interaction.user} شما را به تیم "${global.teams[inviterData.team].name}" دعوت کرده است!`)
                                                                                                                .setFooter({ text: 'برای پذیرفتن یا رد دعوت، از دکمه‌های زیر استفاده کنید' });

                                                                                                            const inviteButtons = new ActionRowBuilder()
                                                                                                                .addComponents(
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId(`team_accept_${inviterData.team}`)
                                                                                                                        .setLabel('✅ پذیرفتن دعوت')
                                                                                                                        .setStyle(ButtonStyle.Success),
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId(`team_reject`)
                                                                                                                        .setLabel('❌ رد دعوت')
                                                                                                                        .setStyle(ButtonStyle.Danger)
                                                                                                                );

                                                                                                            await interaction.reply({ 
                                                                                                                content: `${inviteTarget}`,
                                                                                                                embeds: [inviteEmbed],
                                                                                                                components: [inviteButtons]
                                                                                                            });
                                                                                                            break;
                                                                                                    }
                                                                                                    break;

                                                                                                case 'achievements':
                                                                                                    const achievementsUserData = getUser(interaction.user.id);
                                                                                                    const userAchievements = achievementsUserData.achievements || [];

                                                                                                    // ایجاد لیست دستاوردهای کسب شده
                                                                                                    let unlockedAchievements = '';
                                                                                                    if (userAchievements.length > 0) {
                                                                                                        unlockedAchievements = userAchievements.map((achievement, index) => 
                                                                                                            `${index + 1}. **${achievement.name}** - ${achievement.description}\n   🕒 کسب شده در: <t:${Math.floor(achievement.acquiredAt / 1000)}:R>`
                                                                                                        ).join('\n\n');
                                                                                                    } else {
                                                                                                        unlockedAchievements = 'شما هنوز هیچ دستاوردی کسب نکرده‌اید!';
                                                                                                    }

                                                                                                    // ایجاد لیست دستاوردهای قفل شده
                                                                                                    const lockedAchievements = ACHIEVEMENTS
                                                                                                        .filter(achievement => !userAchievements.some(a => a.id === achievement.id))
                                                                                                        .map((achievement, index) => 
                                                                                                            `${index + 1}. **${achievement.name}** - ${achievement.description}\n   💰 پاداش: ${achievement.reward} ${COIN_NAME}`
                                                                                                        ).join('\n\n');

                                                                                                    const achievementsEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🏆 دستاوردها و افتخارات')
                                                                                                        .setColor('#FFD700')
                                                                                                        .setDescription(`دستاوردهای شما (${userAchievements.length}/${ACHIEVEMENTS.length} دستاورد کسب شده)`)
                                                                                                        .addFields(
                                                                                                            { name: '🔓 دستاوردهای کسب شده', value: unlockedAchievements, inline: false },
                                                                                                            { name: '🔒 دستاوردهای قفل شده', value: lockedAchievements || 'شما همه دستاوردها را کسب کرده‌اید!', inline: false }
                                                                                                        )
                                                                                                        .setFooter({ text: 'با انجام فعالیت‌های مختلف، دستاوردهای بیشتری کسب کنید!' });

                                                                                                    await interaction.reply({ embeds: [achievementsEmbed] });
                                                                                                    break;

                                                                                                case 'teamchallenge':
                                                                                                    const challengeTeamId = interaction.options.getString('team_id');
                                                                                                    const challengeBet = interaction.options.getInteger('bet');

                                                                                                    if (challengeBet <= 0) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ مبلغ شرط باید بیشتر از صفر باشد!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const challengerData = getUser(interaction.user.id);

                                                                                                    // بررسی اینکه کاربر در تیمی باشد
                                                                                                    if (challengerData.team === null) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما در هیچ تیمی نیستید! ابتدا با استفاده از دستور `/team join` به یک تیم بپیوندید یا با دستور `/team create` یک تیم جدید بسازید.',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    // بررسی اینکه تیم مورد چالش وجود داشته باشد
                                                                                                    if (!global.teams || !global.teams[challengeTeamId]) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ تیم مورد نظر یافت نشد!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    // بررسی اینکه کاربر رهبر تیم باشد
                                                                                                    if (global.teams[challengerData.team].leader !== interaction.user.id) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ فقط رهبر تیم می‌تواند چالش گروهی ایجاد کند!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    // بررسی اینکه تیم‌ها یکسان نباشند
                                                                                                    if (challengerData.team === challengeTeamId) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما نمی‌توانید تیم خود را به چالش بکشید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const teamChallengeEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🌪️ دعوت به چالش گروهی')
                                                                                                        .setColor('#FF5733')
                                                                                                        .setDescription(`${interaction.user} به نمایندگی از تیم **${global.teams[challengerData.team].name}** تیم شما را به یک چالش گروهی دعوت کرده است!\n\nشرط: ${challengeBet} ${COIN_NAME} برای هر عضو`)
                                                                                                        .addFields(
                                                                                                            { name: 'تیم دعوت کننده', value: `${global.teams[challengerData.team].name} - ${global.teams[challengerData.team].members.length} عضو`, inline: true },
                                                                                                            { name: 'تیم دعوت شده', value: `${global.teams[challengeTeamId].name} - ${global.teams[challengeTeamId].members.length} عضو`, inline: true }
                                                                                                        )
                                                                                                        .setFooter({ text: 'برای پذیرفتن یا رد چالش، از دکمه‌های زیر استفاده کنید' });

                                                                                                    const teamChallengeButtons = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId(`challenge_accept_${challengerData.team}_${challengeTeamId}_${challengeBet}`)
                                                                                                                .setLabel('✅ پذیرفتن چالش')
                                                                                                                .setStyle(ButtonStyle.Success),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('challenge_reject')
                                                                                                                .setLabel('❌ رد چالش')
                                                                                                                .setStyle(ButtonStyle.Danger)
                                                                                                        );

                                                                                                    await interaction.reply({ 
                                                                                                        content: `<@${global.teams[challengeTeamId].leader}>`,
                                                                                                        embeds: [teamChallengeEmbed],
                                                                                                        components: [teamChallengeButtons] 
                                                                                                    });
                                                                                                    break;

                                                                                                case 'setcoin':
                                                                                                    // بررسی  دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای این دستور را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const targetUserCoin = interaction.options.getUser('user');
                                                                                                    const newAmount = interaction.options.getInteger('amount');

                                                                                                    if (newAmount < 0) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ مقدار سکه نمی‌تواند منفی باشد!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const targetUserData = getUser(targetUserCoin.id);
                                                                                                    const oldAmount = targetUserData.balance;
                                                                                                    targetUserData.balance = newAmount;
                                                                                                    saveData();

                                                                                                    await interaction.reply({
                                                                                                        content: `✅ موجودی سکه کاربر ${targetUserCoin.username} از ${oldAmount} به ${newAmount} ${COIN_NAME} تغییر کرد.`,
                                                                                                        ephemeral: true
                                                                                                    });
                                                                                                    break;

                                                                                                case 'restart':
                                                                                                    // بررسی دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای راه‌اندازی مجدد ربات را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    await interaction.reply({
                                                                                                        content: '🔄 در حال راه‌اندازی مجدد ربات... لطفاً صبر کنید.'
                                                                                                    });

                                                                                                    // ذخیره داده‌ها قبل از راه‌اندازی مجدد
                                                                                                    saveData();

                                                                                                    try {
                                                                                                        // ثبت دوباره دستورات و راه‌اندازی مجدد ربات
                                                                                                        await rest.put(Routes.applicationCommands(CLIENT_ID), { body: commands });

                                                                                                        // اعلام تکمیل راه‌اندازی مجدد
                                                                                                        await interaction.editReply({
                                                                                                            content: '✅ ربات با موفقیت راه‌اندازی مجدد شد و دستورات به‌روزرسانی شدند!'
                                                                                                        });
                                                                                                    } catch (error) {
                                                                                                        console.error('❌ خطا در راه‌اندازی مجدد:', error);
                                                                                                        await interaction.editReply({
                                                                                                            content: '❌ خطا در راه‌اندازی مجدد ربات! لطفاً دوباره تلاش کنید یا با توسعه‌دهنده تماس بگیرید.'
                                                                                                        });
                                                                                                    }
                                                                                                    break;

                                                                                                case 'additem':
                                                                                                    // بررسی دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای این دستور را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const itemName = interaction.options.getString('name');
                                                                                                    const itemPrice = interaction.options.getInteger('price');
                                                                                                    const itemDesc = interaction.options.getString('description');

                                                                                                    if (itemPrice < 0) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ قیمت آیتم نمی‌تواند منفی باشد!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    // ایجاد شناسه منحصر به فرد برای آیتم
                                                                                                    const itemId = 'item_' + Date.now();

                                                                                                    // اضافه کردن آیتم جدید
                                                                                                    shopItems.push({
                                                                                                        id: itemId,
                                                                                                        name: itemName,
                                                                                                        price: itemPrice,
                                                                                                        description: itemDesc
                                                                                                    });

                                                                                                    saveData();

                                                                                                    await interaction.reply({
                                                                                                        content: `✅ آیتم جدید "${itemName}" با قیمت ${itemPrice} ${COIN_NAME} به فروشگاه اضافه شد.`,
                                                                                                        ephemeral: true
                                                                                                    });
                                                                                                    break;

                                                                                                case 'removeitem':
                                                                                                    // بررسی دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای این دستور را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const itemIdToRemove = interaction.options.getString('id');
                                                                                                    const itemIndex = shopItems.findIndex(item => item.id === itemIdToRemove);

                                                                                                    if (itemIndex === -1) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ آیتم با شناسه مورد نظر یافت نشد!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const removedItem = shopItems.splice(itemIndex, 1)[0];
                                                                                                    saveData();

                                                                                                    await interaction.reply({
                                                                                                        content: `✅ آیتم "${removedItem.name}" با موفقیت از فروشگاه حذف شد.`,
                                                                                                        ephemeral: true
                                                                                                    });
                                                                                                    break;

                                                                                                case 'resetdata':
                                                                                                    // بررسی دسترسی مدیر
                                                                                                    if (!hasAdminRole(interaction.member)) {
                                                                                                        return await interaction.reply({
                                                                                                            content: '❌ شما دسترسی لازم برای این دستور را ندارید!',
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }

                                                                                                    const userToReset = interaction.options.getUser('user');

                                                                                                    if (users[userToReset.id]) {
                                                                                                        delete users[userToReset.id];
                                                                                                        saveData();
                                                                                                        await interaction.reply({
                                                                                                            content: `✅ داده‌های کاربر ${userToReset.username} با موفقیت بازنشانی شد.`,
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    } else {
                                                                                                        await interaction.reply({
                                                                                                            content: `❓ کاربر ${userToReset.username} داده‌ای در سیستم ندارد.`,
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                    }
                                                                                                    break;

                                                                                                case 'play_rps':
                                                                                                    // بازی سنگ کاغذ قیچی
                                                                                                    const rpsEmbed = new EmbedBuilder()
                                                                                                        .setTitle('⚔️ سنگ کاغذ قیچی')
                                                                                                        .setColor('#1ABC9C')
                                                                                                        .setDescription('با ربات یا با دوستان خود بازی کنید:\n\n🪨 سنگ\n📄 کاغذ\n✂️ قیچی');

                                                                                                    const rpsButtons1 = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('rps_bot_10')
                                                                                                                .setLabel('🤖 بازی با ربات (10 سکه)')
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('rps_bot_50')
                                                                                                                .setLabel('🤖 بازی با ربات (50 سکه)')
                                                                                                                .setStyle(ButtonStyle.Danger)
                                                                                                        );

                                                                                                    const rpsButtons2 = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('rps_player_10')
                                                                                                                .setLabel('👥 بازی با دوستان (10 سکه)')
                                                                                                                .setStyle(ButtonStyle.Success),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('rps_player_50')
                                                                                                                .setLabel('👥 بازی با دوستان (50 سکه)')
                                                                                                                .setStyle(ButtonStyle.Success)
                                                                                                        );

                                                                                                    const rpsButtons3 = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                             new ButtonBuilder()
                                                                                                                .setCustomId('games')
                                                                                                                .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                                                .setStyle(ButtonStyle.Secondary)
                                                                                                        );

                                                                                                    await interaction.reply({ embeds: [rpsEmbed], components: [rpsButtons1, rpsButtons2, rpsButtons3], ephemeral: true });
                                                                                                    break;

                                                                                                case 'rps_bot_10':
                                                                                                case 'rps_bot_50':
                                                                                                    const rpsBetAmount = interaction.customId === 'rps_bot_10' ? 10 : 50;
                                                                                                    const rpsUserData = getUser(interaction.user.id);

                                                                                                    if (rpsUserData.balance < rpsBetAmount) {
                                                                                                        await interaction.reply({
                                                                                                            content: `❌ موجودی شما برای شرط بندی ${rpsBetAmount} ${COIN_NAME} کافی نیست!`,
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                        return;
                                                                                                    }

                                                                                                    const rpsChoiceEmbed = new EmbedBuilder()
                                                                                                        .setTitle('⚔️ سنگ کاغذ قیچی')
                                                                                                        .setColor('#1ABC9C')
                                                                                                        .setDescription(`شما در حال بازی با ربات هستید (شرط: ${rpsBetAmount} ${COIN_NAME})\n\nانتخاب خود را انجام دهید:`)
                                                                                                        .setImage('https://media.giphy.com/media/UTYEpCJtlKoFsEKWBj/giphy.gif');

                                                                                                    const rpsChoiceButtons = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId(`rps_choice_rock_${rpsBetAmount}`)
                                                                                                                .setEmoji('🪨')
                                                                                                                .setLabel('سنگ')
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId(`rps_choice_paper_${rpsBetAmount}`)
                                                                                                                .setEmoji('📄')
                                                                                                                .setLabel('کاغذ')
                                                                                                                .setStyle(ButtonStyle.Success),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId(`rps_choice_scissors_${rpsBetAmount}`)
                                                                                                                .setEmoji('✂️')
                                                                                                                .setLabel('قیچی')
                                                                                                                .setStyle(ButtonStyle.Danger)
                                                                                                        );

                                                                                                    await interaction.reply({ embeds: [rpsChoiceEmbed], components: [rpsChoiceButtons], ephemeral: true });
                                                                                                    break;

                                                                                                case 'rps_choice_rock_10':
                                                                                                case 'rps_choice_rock_50':
                                                                                                case 'rps_choice_paper_10':
                                                                                                case 'rps_choice_paper_50':
                                                                                                case 'rps_choice_scissors_10':
                                                                                                case 'rps_choice_scissors_50':
                                                                                                    // پردازش انتخاب بازیکن در بازی سنگ کاغذ قیچی
                                                                                                    const rpsParts = interaction.customId.split('_');
                                                                                                    const userChoice = rpsParts[2]; // rock, paper, scissors
                                                                                                    const rpsBet = parseInt(rpsParts[3]); // 10 یا 50

                                                                                                    const rpsUser = getUser(interaction.user.id);

                                                                                                    if (rpsUser.balance < rpsBet) {
                                                                                                        await interaction.reply({
                                                                                                            content: `❌ موجودی شما برای شرط بندی ${rpsBet} ${COIN_NAME} کافی نیست!`,
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                        return;
                                                                                                    }

                                                                                                    // انتخاب تصادفی ربات
                                                                                                    const choices = ['rock', 'paper', 'scissors'];
                                                                                                    const botChoice = choices[Math.floor(Math.random() * choices.length)];

                                                                                                    // تعیین برنده
                                                                                                    let rpsResult = '';
                                                                                                    let resultColor = '#FFFF00'; // زرد برای مساوی

                                                                                                    if (userChoice === botChoice) {
                                                                                                        // مساوی
                                                                                                        rpsResult = '😐 مساوی! هیچ سکه‌ای رد و بدل نشد.';
                                                                                                    } else if (
                                                                                                        (userChoice === 'rock' && botChoice === 'scissors') ||
                                                                                                        (userChoice === 'paper' && botChoice === 'rock') ||
                                                                                                        (userChoice === 'scissors' && botChoice === 'paper')
                                                                                                    ) {
                                                                                                        // کاربر برنده شد
                                                                                                        rpsUser.balance += rpsBet;
                                                                                                        rpsResult = `🎉 تبریک! شما برنده شدید و ${rpsBet} ${COIN_NAME} دریافت کردید!`;
                                                                                                        resultColor = '#00FF00'; // سبز برای برد
                                                                                                    } else {
                                                                                                        // ربات برنده شد
                                                                                                        rpsUser.balance -= rpsBet;
                                                                                                        rpsResult = `😢 متأسفانه باختید و ${rpsBet} ${COIN_NAME} از دست دادید!`;
                                                                                                        resultColor = '#FF0000'; // قرمز برای باخت
                                                                                                    }

                                                                                                    saveData();

                                                                                                    // تبدیل انتخاب‌ها به ایموجی
                                                                                                    const choiceToEmoji = {
                                                                                                        'rock': '🪨 سنگ',
                                                                                                        'paper': '📄 کاغذ',
                                                                                                        'scissors': '✂️ قیچی'
                                                                                                    };

                                                                                                    const rpsResultEmbed = new EmbedBuilder()
                                                                                                        .setTitle('⚔️ نتیجه بازی سنگ کاغذ قیچی')
                                                                                                        .setColor(resultColor)
                                                                                                        .setDescription(`
                                                                                **انتخاب شما**: ${choiceToEmoji[userChoice]}
                                                                                **انتخاب ربات**: ${choiceToEmoji[botChoice]}

                                                                                ${rpsResult}

                                                                                موجودی فعلی: **${rpsUser.balance} ${COIN_NAME}**`)
                                                                                                        .setFooter({ text: 'می‌توانید دوباره بازی کنید' });

                                                                                                    const rpsPlayAgainButtons = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId(`rps_bot_${rpsBet}`)
                                                                                                                .setLabel(`🔄 بازی مجدد (${rpsBet} سکه)`)
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('play_rps')
                                                                                                                .setLabel('🔙 بازگشت به منوی بازی')
                                                                                                                .setStyle(ButtonStyle.Secondary)
                                                                                                        );

                                                                                                    await interaction.update({ embeds: [rpsResultEmbed], components: [rpsPlayAgainButtons] });
                                                                                                    break;

                                                                                                case 'play_numguess':
                                                                                                    // بازی حدس عدد
                                                                                                    const numGuessEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🔢 بازی حدس عدد')
                                                                                                        .setColor('#E67E22')
                                                                                                        .setDescription('من یک عدد بین 1 تا 100 انتخاب می‌کنم و شما باید آن را حدس بزنید!\n\nهر بازی 20 سکه هزینه دارد، اما اگر برنده شوید جایزه بیشتری دریافت می‌کنید. هر چه زودتر حدس بزنید، جایزه بیشتری می‌گیرید!');

                                                                                                    const numGuessButtons = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('numguess_start')
                                                                                                                .setLabel('🎮 شروع بازی (20 سکه)')
                                                                                                                .setStyle(ButtonStyle.Success),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('games')
                                                                                                                .setLabel('🔙 بازگشت')
                                                                                                                .setStyle(ButtonStyle.Secondary)
                                                                                                        );

                                                                                                    await interaction.reply({ embeds: [numGuessEmbed], components: [numGuessButtons], ephemeral: true });
                                                                                                    break;

                                                                                                case 'numguess_start':
                                                                                                    const numGuessUser = getUser(interaction.user.id);
                                                                                                    const numGuessCost = 20;

                                                                                                    if (numGuessUser.balance < numGuessCost) {
                                                                                                        await interaction.reply({
                                                                                                            content: `❌ موجودی شما برای این بازی کافی نیست! شما به ${numGuessCost - numGuessUser.balance} ${COIN_NAME} بیشتر نیاز دارید.`,
                                                                                                            ephemeral: true
                                                                                                        });
                                                                                                        return;
                                                                                                    }

                                                                                                    // کم کردن هزینه بازی
                                                                                                    numGuessUser.balance  -= numGuessCost;
                                                                                                    saveData();

                                                                                                    // استفاده از Map برای ذخیره اطلاعات بازی هر کاربر
                                                                                                    if (!client.numGuessGames) client.numGuessGames = new Map();

                                                                                                    // انتخاب یک عدد تصادفی بین 1 تا 100
                                                                                                    const secretNumber = Math.floor(Math.random() * 100) + 1;

                                                                                                    // ذخیره اطلاعات بازی در یک آبجکت موقت
                                                                                                    const gameData = {
                                                                                                        number: secretNumber,
                                                                                                        attempts: 0,
                                                                                                        maxAttempts: 10,
                                                                                                        startTime: Date.now()
                                                                                                    };

                                                                                                    const startGameEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🔢 بازی حدس عدد')
                                                                                                        .setColor('#E67E22')
                                                                                                        .setDescription(`من یک عدد بین 1 تا 100 انتخاب کرده‌ام! شما ${gameData.maxAttempts} فرصت دارید تا آن را حدس بزنید.\n\nیک عدد را در چت بنویسید (عدد بین 1 تا 100).`)
                                                                                                        .setFooter({ text: `تلاش 0/${gameData.maxAttempts} | موجودی فعلی: ${numGuessUser.balance} ${COIN_NAME}` });

                                                                                                    await interaction.reply({ embeds: [startGameEmbed] });

                                                                                                    // منتظر ورودی کاربر می‌مانیم
                                                                                                    const numGuessFilter = m => m.author.id === interaction.user.id && !isNaN(m.content) && parseInt(m.content) >= 1 && parseInt(m.content) <= 100;

                                                                                                    const numGuessCollector = interaction.channel.createMessageCollector({
                                                                                                        filter: numGuessFilter,
                                                                                                        time: 300000, // 5 دقیقه
                                                                                                        max: gameData.maxAttempts
                                                                                                    });

                                                                                                    numGuessCollector.on('collect', async message => {
                                                                                                        // حذف پیام کاربر
                                                                                                        await message.delete().catch(console.error);

                                                                                                        const guess = parseInt(message.content);
                                                                                                        gameData.attempts++;

                                                                                                        let resultMessage = '';

                                                                                                        if (guess === gameData.number) {
                                                                                                            // کاربر برنده شد!
                                                                                                            numGuessCollector.stop('win');

                                                                                                            // محاسبه جایزه بر اساس تعداد تلاش
                                                                                                            const baseReward = 100;
                                                                                                            const attemptFactor = 1 - (gameData.attempts / gameData.maxAttempts) * 0.5; // بین 0.5 تا 1
                                                                                                            const timeFactor = Math.max(0.5, 1 - (Date.now() - gameData.startTime) / 300000); // حداکثر 1، حداقل 0.5
                                                                                                            const reward = Math.round(baseReward * attemptFactor * timeFactor);

                                                                                                            numGuessUser.balance += reward;
                                                                                                            saveData();

                                                                                                            resultMessage = `🎉 تبریک! شما با ${gameData.attempts} تلاش برنده شدید!\n\n**جایزه شما**: ${reward} ${COIN_NAME}`;

                                                                                                            const winEmbed = new EmbedBuilder()
                                                                                                                .setTitle('🔢 بازی حدس عدد - برنده شدید!')
                                                                                                                .setColor('#00FF00')
                                                                                                                .setDescription(`عدد مخفی **${gameData.number}** بود!\n\n${resultMessage}\n\nموجودی فعلی: **${numGuessUser.balance} ${COIN_NAME}**`)
                                                                                                                .setFooter({ text: `تلاش ${gameData.attempts}/${gameData.maxAttempts}` });

                                                                                                            const playAgainButton = new ActionRowBuilder()
                                                                                                                .addComponents(
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId('numguess_start')
                                                                                                                        .setLabel('🔄 بازی مجدد')
                                                                                                                        .setStyle(ButtonStyle.Primary),
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId('games')
                                                                                                                        .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                                                        .setStyle(ButtonStyle.Secondary)
                                                                                                                );

                                                                                                            await interaction.followUp({ embeds: [winEmbed], components: [playAgainButton] });
                                                                                                            return;
                                                                                                        }

                                                                                                        if (guess < gameData.number) {
                                                                                                            resultMessage = `📈 عدد بزرگتر است (${guess} < ?)`;
                                                                                                        } else {
                                                                                                            resultMessage = `📉 عدد کوچکتر است (${guess} > ?)`;
                                                                                                        }

                                                                                                        if (gameData.attempts >= gameData.maxAttempts) {
                                                                                                            // تلاش‌ها تمام شد
                                                                                                            numGuessCollector.stop('lose');
                                                                                                            return;
                                                                                                        }

                                                                                                        const guessEmbed = new EmbedBuilder()
                                                                                                            .setTitle('🔢 بازی حدس عدد')
                                                                                                            .setColor('#E67E22')
                                                                                                            .setDescription(`${resultMessage}\n\nیک عدد دیگر را حدس بزنید.`)
                                                                                                            .setFooter({ text: `تلاش ${gameData.attempts}/${gameData.maxAttempts}` });

                                                                                                        await interaction.followUp({ embeds: [guessEmbed] });
                                                                                                    });

                                                                                                    numGuessCollector.on('end', async (collected, reason) => {
                                                                                                        if (reason === 'win') {
                                                                                                            // قبلاً پیام برنده شدن نمایش داده شده است
                                                                                                            return;
                                                                                                        }

                                                                                                        if (reason === 'time') {
                                                                                                            await interaction.followUp({
                                                                                                                content: `⏱️ زمان به پایان رسید! عدد مخفی **${gameData.number}** بود.`,
                                                                                                                ephemeral: true
                                                                                                            });
                                                                                                        } else if (reason === 'lose') {
                                                                                                            const loseEmbed = new EmbedBuilder()
                                                                                                                .setTitle('🔢 بازی حدس عدد - باختید!')
                                                                                                                .setColor('#FF0000')
                                                                                                                .setDescription(`متأسفانه فرصت‌های شما تمام شد! عدد مخفی **${gameData.number}** بود.\n\nموجودی فعلی: **${numGuessUser.balance} ${COIN_NAME}**`)
                                                                                                                .setFooter({ text: `تلاش ${gameData.attempts}/${gameData.maxAttempts}` });

                                                                                                            const playAgainButton = new ActionRowBuilder()
                                                                                                                .addComponents(
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId('numguess_start')
                                                                                                                        .setLabel('🔄 بازی مجدد')
                                                                                                                        .setStyle(ButtonStyle.Primary),
                                                                                                                    new ButtonBuilder()
                                                                                                                        .setCustomId('games')
                                                                                                                        .setLabel('🔙 بازگشت به بازی‌ها')
                                                                                                                        .setStyle(ButtonStyle.Secondary)
                                                                                                                );

                                                                                                            await interaction.followUp({ embeds: [loseEmbed], components: [playAgainButton] });
                                                                                                        }
                                                                                                    });
                                                                                                    break;

                                                                                                case 'play_duel':
                                                                                                    // بازی دوئل - مبارزه با کاربران دیگر
                                                                                                    const duelEmbed = new EmbedBuilder()
                                                                                                        .setTitle('🏆 دوئل')
                                                                                                        .setColor('#8E44AD')
                                                                                                        .setDescription('با دوستان خود به دوئل بپردازید و برنده شوید!\n\nشما می‌توانید یک کاربر را به دوئل دعوت کنید و با شانس و مهارت برنده مشخص می‌شود.');

                                                                                                    const duelButtons = new ActionRowBuilder()
                                                                                                        .addComponents(
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('duel_start_50')
                                                                                                                .setLabel('🏆 دوئل 50 سکه')
                                                                                                                .setStyle(ButtonStyle.Primary),
                                                                                                            new ButtonBuilder()
                                                                                                                .setCustomId('duel_start_100')
                                                                                                                .setLabel('🏆 دوئل 100 سکه')
                                                                                                                .setStyle(ButtonStyle.Danger),
                                                                                                            new ButtonBuilder()
                                                                                                                 .setCustomId('games')
                                                                                                                .setLabel('🔙 بازگشت')
                                                                                                                .setStyle(ButtonStyle.Secondary)
                                                                                                        );

                                                                                                    await interaction.reply({ embeds: [duelEmbed], components: [duelButtons], ephemeral: true });
                                                                                                    break;

                                                            case 'duel_start_50':
                                                            case 'duel_start_100':
                                                                const duelBet = interaction.customId === 'duel_start_50' ? 50 : 100;
                                                                const duelUserData = getUser(interaction.user.id);

                                                                if (duelUserData.balance < duelBet) {
                                                                    await interaction.reply({
                                                                        content: `❌ موجودی شما برای این دوئل کافی نیست! شما به ${duelBet - duelUserData.balance} ${COIN_NAME} بیشتر نیاز دارید.`,
                                                                        ephemeral: true
                                                                    });
                                                                    return;
                                                                }

                                                                await interaction.reply({ 
                                                                    content: 'لطفاً کاربری که می‌خواهید با او دوئل کنید را منشن کنید:',
                                                                    ephemeral: true 
                                                                });

                                                                // منتظر پاسخ کاربر برای منشن کردن رقیب
                                                                const duelFilter = m => m.author.id === interaction.user.id && m.mentions.users.size > 0;
                                                                const duelChannel = interaction.channel;

                                                                try {
                                                                    const duelCollected = await duelChannel.awaitMessages({ filter: duelFilter, max: 1, time: 30000, errors: ['time'] });
                                                                    const duelTarget = duelCollected.first().mentions.users.first();

                                                                    // حذف پیام منشن
                                                                    await duelCollected.first().delete().catch(console.error);

                                                                    if (duelTarget.id === interaction.user.id) {
                                                                        await interaction.followUp({
                                                                            content: '❌ شما نمی‌توانید با خودتان دوئل کنید!',
                                                                            ephemeral: true
                                                                        });
                                                                        return;
                                                                    }

                                                                    if (duelTarget.bot) {
                                                                        await interaction.followUp({
                                                                            content: '❌ شما نمی‌توانید با ربات‌ها دوئل کنید!',
                                                                            ephemeral: true
                                                                        });
                                                                        return;
                                                                    }

                                                                    // بررسی موجودی کاربر هدف
                                                                    const duelTargetData = getUser(duelTarget.id);
                                                                    if (duelTargetData.balance < duelBet) {
                                                                        await interaction.followUp({
                                                                            content: `❌ کاربر ${duelTarget.username} موجودی کافی برای این دوئل ندارد!`,
                                                                            ephemeral: true
                                                                        });
                                                                        return;
                                                                    }

                                                                    const duelChallengeEmbed = new EmbedBuilder()
                                                                        .setTitle('🏆 دعوت به دوئل')
                                                                        .setColor('#8E44AD')
                                                                        .setDescription(`${interaction.user} شما را به یک دوئل با شرط ${duelBet} ${COIN_NAME} دعوت کرده است!\n\nبرای پذیرفتن این چالش، دکمه قبول را فشار دهید.`)
                                                                        .setFooter({ text: 'این درخواست پس از 60 ثانیه منقضی می‌شود' });

                                                                    const duelChallengeButtons = new ActionRowBuilder()
                                                                        .addComponents(
                                                                            new ButtonBuilder()
                                                                                .setCustomId(`duel_accept_${interaction.user.id}_${duelBet}`)
                                                                                .setLabel('✅ قبول دوئل')
                                                                                .setStyle(ButtonStyle.Success),
                                                                            new ButtonBuilder()
                                                                                .setCustomId('duel_reject')
                                                                                .setLabel('❌ رد کردن')
                                                                                .setStyle(ButtonStyle.Danger)
                                                                        );

                                                                    const duelMessage = await interaction.followUp({ 
                                                                        content: `${duelTarget}`,
                                                                        embeds: [duelChallengeEmbed], 
                                                                        components: [duelChallengeButtons] 
                                                                    });

                                                                    // منتظر پاسخ کاربر دوم می‌مانیم
                                                                    const duelButtonFilter = i => 
                                                                        (i.customId === `duel_accept_${interaction.user.id}_${duelBet}` || 
                                                                         i.customId === 'duel_reject') && 
                                                                        i.user.id === duelTarget.id;

                                                                    const duelButtonCollector = interaction.channel.createMessageComponentCollector({ 
                                                                        filter: duelButtonFilter, 
                                                                        time: 60000 
                                                                    });

                                                                    duelButtonCollector.on('collect', async i => {
                                                                        if (i.customId === 'duel_reject') {
                                                                            await i.update({ 
                                                                                content: `${duelTarget.username} دوئل را رد کرد!`, 
                                                                                embeds: [], 
                                                                                components: [] 
                                                                            });
                                                                            duelButtonCollector.stop();
                                                                            return;
                                                                        }

                                                                        // کاربر دوئل را پذیرفت
                                                                        await i.update({ 
                                                                            content: `${duelTarget.username} دوئل را پذیرفت! نبرد آغاز می‌شود...`,
                                                                            embeds: [],
                                                                            components: []
                                                                        });

                                                                        // انیمیشن دوئل
                                                                        const duelAnimation = [
                                                                            '⚔️ آماده شوید...',
                                                                            '🔥 3...',
                                                                            '🔥 2...',
                                                                            '🔥 1...',
                                                                            '⚡ نبرد آغاز شد!'
                                                                        ];

                                                                        const duelAnimationEmbed = new EmbedBuilder()
                                                                            .setTitle('🏆 دوئل')
                                                                            .setColor('#8E44AD')
                                                                            .setDescription(`**${interaction.user.username}** vs **${duelTarget.username}**\n\n${duelAnimation[0]}`)
                                                                            .setImage('https://media.giphy.com/media/l2JhIUyUs8KDCCf3W/giphy.gif');

                                                                        await i.editReply({ 
                                                                            content: '',
                                                                            embeds: [duelAnimationEmbed], 
                                                                            components: [] 
                                                                        });

                                                                        // نمایش انیمیشن شمارش معکوس
                                                                        for (let j = 1; j < duelAnimation.length; j++) {
                                                                            await new Promise(resolve => setTimeout(resolve, 1000));

                                                                            const updatedEmbed = new EmbedBuilder()
                                                                                .setTitle('🏆 دوئل')
                                                                                .setColor('#8E44AD')
                                                                                .setDescription(`**${interaction.user.username}** vs **${duelTarget.username}**\n\n${duelAnimation[j]}`)
                                                                                .setImage('https://media.giphy.com/media/l2JhIUyUs8KDCCf3W/giphy.gif');

                                                                            await i.editReply({ embeds: [updatedEmbed] });
                                                                        }

                                                                        // محاسبه نتیجه دوئل (ترکیبی از شانس و تجربه)
                                                                        // امتیاز اول: شانس (0-50)
                                                                        const player1Luck = Math.floor(Math.random() * 51);
                                                                        const player2Luck = Math.floor(Math.random() * 51);

                                                                        // امتیاز دوم: تجربه - بر اساس موجودی کل کاربر (0-30)
                                                                        const player1Total = duelUserData.balance + (duelUserData.bank || 0) + (duelUserData.investment || 0);
                                                                        const player2Total = duelTargetData.balance + (duelTargetData.bank || 0) + (duelTargetData.investment || 0);

                                                                        const player1Exp = Math.min(30, Math.floor(player1Total / 100));
                                                                        const player2Exp = Math.min(30, Math.floor(player2Total / 100));

                                                                        // امتیاز سوم: تصادفی (0-20)
                                                                        const player1Random = Math.floor(Math.random() * 21);
                                                                        const player2Random = Math.floor(Math.random() * 21);

                                                                        // محاسبه امتیاز نهایی
                                                                        const player1Score = player1Luck + player1Exp + player1Random;
                                                                        const player2Score = player2Luck + player2Exp + player2Random;

                                                                        // تعیین برنده
                                                                        let duelResultText = '';
                                                                        if (player1Score > player2Score) {
                                                                            // کاربر اول برنده شد
                                                                            duelUserData.balance += duelBet;
                                                                            duelTargetData.balance -= duelBet;
                                                                            duelResultText = `🏆 **${interaction.user.username}** با امتیاز **${player1Score}** در مقابل **${player2Score}** پیروز شد و ${duelBet} ${COIN_NAME} دریافت کرد!`;
                                                                        } else if (player1Score < player2Score) {
                                                                            // کاربر دوم برنده شد
                                                                            duelUserData.balance -= duelBet;
                                                                            duelTargetData.balance += duelBet;
                                                                            duelResultText = `🏆 **${duelTarget.username}** با امتیاز **${player2Score}** در مقابل **${player1Score}** پیروز شد و ${duelBet} ${COIN_NAME} دریافت کرد!`;
                                                                        } else {
                                                                            // مساوی - نادر
                                                                            duelResultText = `😮 باورنکردنی! مبارزه با نتیجه **${player1Score}-${player2Score}** مساوی شد! هیچ سکه‌ای رد و بدل نشد.`;
                                                                        }

                                                                        saveData();

                                                                        // نمایش نتیجه دوئل
                                                                        const duelResultEmbed = new EmbedBuilder()
                                                                            .setTitle('🏆 نتیجه دوئل')
                                                                            .setColor('#8E44AD')
                                                                            .setDescription(`**${interaction.user.username}** (${player1Score}) vs **${duelTarget.username}** (${player2Score})\n\n${duelResultText}\n\n**جزئیات امتیازات**:\n${interaction.user.username}: شانس ${player1Luck} + تجربه ${player1Exp} + تصادفی ${player1Random} = ${player1Score}\n${duelTarget.username}: شانس ${player2Luck} + تجربه ${player2Exp} + تصادفی ${player2Random} = ${player2Score}`)
                                                                            .setFooter({ text: 'دوئل به پایان رسید' });

                                                                        const duelRematchButton = new ActionRowBuilder()
                                                                            .addComponents(
                                                                                new ButtonBuilder()
                                                                                    .setCustomId(`duel_rematch_${interaction.user.id}_${duelTarget.id}_${duelBet}`)
                                                                                    .setLabel('🔄 دوئل مجدد')
                                                                                    .setStyle(ButtonStyle.Primary)
                                                                            );

                                                                        await i.editReply({ 
                                                                            embeds: [duelResultEmbed], 
                                                                            components: [duelRematchButton] 
                                                                        });
                                                                    });

                                                                    duelButtonCollector.on('end', collected => {
                                                                        if (collected.size === 0) {
                                                                            interaction.followUp({ 
                                                                                content: '⏱️ زمان انتظار برای پاسخ به دوئل به پایان رسید!',
                                                                                ephemeral: true
                                                                            });
                                                                        }
                                                                    });
                                                                } catch (err) {
                                                                    console.error(err);
                                                                    await interaction.followUp({
                                                                        content: '❌ شما هیچ کاربری را منشن نکردید یا زمان انتظار به پایان رسید!',
                                                                        ephemeral: true
                                                                    });
                                                                }
                                                                break;
                                                        }
                                                    } catch (error) {
                                                        console.error('❌ خطا در پردازش دکمه:', error);
                                                        await interaction.reply({ content: '❌ خطایی رخ داده است! لطفا دوباره امتحان کنید.', ephemeral: true });
                                                    }

                                                }
                                            }
                                            });

                                            // خطایابی کلی تعامل
                                            client.on('interactionError', async (interaction, error) => {
                                                console.error('❌ خطای اصلی در تعامل:', error);
                                                // سعی می‌کنیم در صورت بروز خطا به کاربر اطلاع دهیم
                                                try {
                                                    if (!interaction.deferred && !interaction.replied) {
                                                        await interaction.reply({ content: '❌ خطایی رخ داده است! لطفا دوباره امتحان کنید.', ephemeral: true });
                                                    } else {
                                                        await interaction.followUp({ content: '❌ خطایی رخ داده است! لطفا دوباره امتحان کنید.', ephemeral: true });
                                                    }
                                                } catch (finalError) {
                                                    console.error('❌ خطا در ارسال پیام خطای نهایی:', finalError);
                                                }
                                            });

                                            // تنظیم فواصل زمانی - بهینه‌سازی شده
                                            const ONE_MINUTE_MS = 60000; // 1 دقیقه به میلی‌ثانیه
                                            const ONE_HOUR_MS = 3600000; // 1 ساعت به میلی‌ثانیه
                                            const ONE_DAY_MS = 86400000; // 24 ساعت به میلی‌ثانیه
                                            let lastInvestmentUpdate = Date.now();
                                            let lastAutoSave = Date.now();
                                            let lastStealWindowCheck = Date.now();

                                            // ذخیره خودکار داده‌ها هر 10 دقیقه
                                            const autoSaveInterval = setInterval(() => {
                                                const now = Date.now();
                                                if (now - lastAutoSave >= 10 * ONE_MINUTE_MS) {
                                                    saveData();
                                                    lastAutoSave = now;
                                                    console.log('💾 ذخیره خودکار داده‌ها انجام شد.');
                                                }
                                            }, 10 * ONE_MINUTE_MS); // بررسی دقیقاً هر 10 دقیقه به جای هر دقیقه

                                            // بررسی پنجره زمانی جیب‌زنی هر یک ساعت
                                            const stealWindowInterval = setInterval(() => {
                                                const isStealActive = checkStealWindow();
                                                lastStealWindowCheck = Date.now();

                                                if (isStealActive) {
                                                    console.log('🔔 پنجره زمانی جیب‌زنی فعال است!');
                                                }
                                            }, ONE_HOUR_MS); // بررسی دقیقاً هر ساعت

                                            // بررسی سود سرمایه‌گذاری هر روز
                                            const investmentInterval = setInterval(() => {
                                                const now = Date.now();
                                                // بررسی اینکه آیا 30 روز گذشته است
                                                if (now - lastInvestmentUpdate >= 30 * ONE_DAY_MS) {
                                                    let updated = false;
                                                    let investorCount = 0;

                                                    for (const userId in users) {
                                                        const user = users[userId];
                                                        if (user.investment && user.investment > 0) {
                                                            const profit = Math.floor(user.investment * INVESTMENT_RATE);
                                                            user.balance += profit;
                                                            updated = true;
                                                            investorCount++;
                                                        }
                                                    }

                                                    if (updated) {
                                                        console.log(`💹 سود سرمایه‌گذاری ماهانه برای ${investorCount} کاربر پرداخت شد!`);
                                                        saveData();
                                                        lastInvestmentUpdate = now;
                                                    }
                                                }
                                            }, ONE_DAY_MS); // هر روز بررسی می‌کنیم

                                            // اضافه کردن مدیریت خروج برای پاک‌سازی تایمرها
                                            process.on('SIGINT', () => {
                                              clearInterval(autoSaveInterval);
                                              clearInterval(stealWindowInterval);
                                              clearInterval(investmentInterval);
                                              saveData(); // ذخیره داده‌ها قبل از خروج
                                              console.log('👋 خروج ایمن...');
                                              process.exit(0);
                                            });

                                            client.once('ready', () => {
                                                console.log(`✅ ${client.user.tag} آنلاین شد!`);

                                                // بهینه‌سازی حافظه
                                                setInterval(() => {
                                                    // اجرای garbage collector دستی برای آزادسازی حافظه
                                                    if (global.gc) {
                                                        global.gc();
                                                        console.log('🧹 پاکسازی حافظه انجام شد');
                                                    }
                                                }, 30 * 60 * 1000); // هر 30 دقیقه
                                            });

                                            // ورود ربات با توکن
                                            // اضافه کردن مدیریت خطای کلی برای جلوگیری از کرش ربات
                                            process.on('unhandledRejection', (error) => {
                                                console.error('❌ خطای مدیریت نشده:', error);
                                            });

                                            // تلاش برای ورود به دیسکورد با چند بار تلاش مجدد و راه‌اندازی مجدد خودکار
                                            let loginAttempts = 0;
                                            const maxLoginAttempts = 5; // افزایش تعداد تلاش‌ها
                                            let reconnectTimeout = null;

                                            function attemptLogin() {
                                                loginAttempts++;
                                                console.log(`🔄 تلاش برای ورود به دیسکورد (${loginAttempts}/${maxLoginAttempts})...`);

                                                try {
                                                    client.login(TOKEN).then(() => {
                                                        console.log(`✅ ${client.user.tag} با موفقیت وارد شد!`);
                                                        loginAttempts = 0;

                                                        // تنظیم راه‌اندازی مجدد خودکار هر 12 ساعت  برای جلوگیری از مشکلات احتمالی
                                                        const twelveHours = 12 * 60 * 60 * 1000;

                                                        // پاکسازی تایمر قبلی اگر وجود داشته باشد
                                                        if (reconnectTimeout) {
                                                            clearTimeout(reconnectTimeout);
                                                        }

                                                        reconnectTimeout = setTimeout(() => {
                                                            console.log('🔄 راه‌اندازی مجدد خودکار پس از 12 ساعت...');
                                                            client.destroy();
                                                            setTimeout(attemptLogin, 5000);
                                                        }, twelveHours);

                                                    }).catch(error => {
                                                        console.error('❌ خطا در ورود به دیسکورد:', error.message);

                                                        if (loginAttempts < maxLoginAttempts) {
                                                            const retryDelay = Math.min(30000, 5000 * loginAttempts); // افزایش تدریجی زمان انتظار
                                                            console.log(`⏱️ تلاش مجدد در ${retryDelay/1000} ثانیه دیگر...`);
                                                            setTimeout(attemptLogin, retryDelay);
                                                        } else {
                                                            console.error('❌ تعداد تلاش‌های ورود به حداکثر رسید. لطفاً توکن را بررسی کنید.');
                                                            console.error('لطفاً توکن صحیح را در بخش Secrets با کلید DISCORD_TOKEN تنظیم کنید');

                                                            // برای مدیریت بهتر خطا، به جای خروج کامل، فقط هشدار می‌دهیم
                                                            console.error('⚠️ ربات به درستی راه‌اندازی نشده اما سرور آپتایم همچنان فعال است.');

                                                            // تلاش مجدد پس از 5 دقیقه
                                                            console.log('🔄 تلاش مجدد پس از 5 دقیقه...');
                                                            setTimeout(() => {
                                                                loginAttempts = 0; // ریست کردن شمارنده
                                                                attemptLogin();
                                                            }, 5 * 60 * 1000);
                                                        }
                                                    });
                                                } catch (error) {
                                                    console.error('❌ خطای غیرمنتظره در فرآیند ورود:', error);
                                                    setTimeout(() => {
                                                        attemptLogin();
                                                    }, 10000);
                                                }
                                            }

                                            // مدیریت قطع اتصال غیرمنتظره
                                            client.on('disconnect', (event) => {
                                                console.log(`⚠️ ربات قطع شد. کد خطا: ${event.code}`);

                                                // پاک‌سازی تایمر قبلی راه‌اندازی مجدد
                                                if (reconnectTimeout) {
                                                    clearTimeout(reconnectTimeout);
                                                    reconnectTimeout = null;
                                                }

                                                // تلاش مجدد پس از 10 ثانیه
                                                console.log('🔄 تلاش مجدد برای اتصال پس از 10 ثانیه...');
                                                setTimeout(attemptLogin, 10000);
                                            });

                                            attemptLogin();