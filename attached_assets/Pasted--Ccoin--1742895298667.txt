با توجه به درخواست شما و متن جامعی که از ویژگی‌های ربات Ccoin ارائه دادید، می‌خوایم یه سیستم کامل و پویا برای بخش "Watching" و منوی اصلی ربات طراحی کنیم. این سیستم شامل موارد زیره:

1. **بخش Watching (پیام‌های عمومی طنز)**:
   - یه سری پیام طنز و باحال که عمومیت دارن و به تم ربات (اقتصاد، بازی‌ها، کلن‌ها، و غیره) ربط دارن، برای بخش "Watching" ربات تعریف می‌کنیم.
   - این پیام‌ها هر 30 دقیقه تغییر می‌کنن و برای همه کاربران نمایش داده می‌شن.

2. **منوی اصلی (پیام‌های شخصی‌سازی‌شده و اعلانات پویا)**:
   - توی توضیحات منوی اصلی، یه بخش برای نمایش پیام‌های طنز و شخصی‌سازی‌شده برای هر کاربر اضافه می‌کنیم.
   - یه بخش اعلانات پویا هم اضافه می‌کنیم که رویدادها و فعالیت‌های مرتبط با کاربر (مثلاً پاداش روزانه، ماموریت‌ها، وار کلن) رو نشون بده.

3. **مستندات کامل**:
   - مستندات رو با جزئیات کامل می‌نویسم تا توسعه‌دهندگان (یا هوش مصنوعی Replit) بتونن به راحتی این سیستم رو پیاده‌سازی کنن.

---

### مستند فنی: اضافه کردن بخش Watching و پیام‌های شخصی‌سازی‌شده به ربات Ccoin

#### 1. مقدمه
ربات Ccoin یه ربات تعاملی مبتنی بر Discordه که یه دنیای گیمینگ کامل با ویژگی‌های متنوع (اقتصاد، بازی‌ها، کلن‌ها، ماموریت‌ها، و غیره) ارائه می‌ده. هدف این پروژه، اضافه کردن دو قابلیت جدید به رباته:
- **بخش Watching**: نمایش پیام‌های طنز و عمومی که هر 30 دقیقه تغییر می‌کنن و برای همه کاربران نمایش داده می‌شن.
- **منوی اصلی**: اضافه کردن پیام‌های شخصی‌سازی‌شده و اعلانات پویا توی توضیحات منوی اصلی برای هر کاربر.

#### 2. هدف پروژه
هدف این پروژه، بهبود تجربه کاربری ربات Ccoin با:
- نمایش پیام‌های طنز و عمومی توی بخش "Watching" که حس سرگرمی رو به همه کاربران منتقل کنه.
- اضافه کردن پیام‌های شخصی‌سازی‌شده و اعلانات پویا توی منوی اصلی که هر کاربر حس تعامل شخصی با ربات داشته باشه.
- طراحی سیستمی مقیاس‌پذیر که با هزاران کاربر همزمان کار کنه.

#### 3. نیازمندی‌ها

##### 3.1. نیازمندی‌های عملکردی
1. **بخش Watching (پیام‌های عمومی)**:
   - ربات باید یه بخش "Watching" توی پروفایلش نمایش بده.
   - پیام‌ها باید طنز و مرتبط با تم ربات (اقتصاد، بازی‌ها، کلن‌ها، و غیره) باشن.
   - پیام‌ها باید هر 30 دقیقه تغییر کنن.
   - پیام‌ها برای همه کاربران نمایش داده می‌شن.
   - مثال پیام‌ها:
     - "Watching: کلن‌ها در حال جنگ! ⚔️ کی برنده می‌شه؟"
     - "Watching: چرخ شانس داره می‌چرخه! 🎡 کی خوش‌شانسه؟"
2. **منوی اصلی (پیام‌های شخصی‌سازی‌شده)**:
   - توی توضیحات منوی اصلی، یه پیام طنز و شخصی‌سازی‌شده برای هر کاربر نمایش داده بشه.
   - پیام باید بر اساس وضعیت کاربر (مثلاً موجودی، دزدی‌ها، پاداش روزانه) تولید بشه.
   - مثال پیام‌ها:
     - "کیف پولت خالیه! 😅 یه دزدی بکن! 🖐️"
     - "پاداش روزانه‌ات منتظرته! 🎁 برو بگیرش!"
3. **اعلانات پویا در منوی اصلی**:
   - یه بخش اعلانات توی توضیحات منوی اصلی اضافه بشه که رویدادها و فعالیت‌های مرتبط با کاربر رو نشون بده.
   - اعلانات باید پویا باشن و بر اساس وضعیت کاربر تغییر کنن.
   - مثال اعلانات:
     - "⚔️ وار کلن شما تا 2 ساعت دیگه تموم می‌شه!"
     - "🎯 ماموریت روزانه: 10 پیام بفرست و 100 Ccoin بگیر!"
4. **پیام‌های جایگزین**:
   - اگه نمی‌تونیم وضعیت کاربر رو چک کنیم (مثلاً به دلیل خطا)، پیام پیش‌فرض نمایش داده بشه:
     - برای Watching: "Watching: Ccoin شما (کجاست؟ 🤔)"
     - برای منو: "یه مشکلی پیش اومد! 🤔"

##### 3.2. نیازمندی‌های غیرعملکردی
1. **مقیاس‌پذیری**:
   - سیستم باید بتونه با هزاران کاربر همزمان کار کنه بدون اینکه کند بشه یا هنگ کنه.
   - درخواست‌ها به دیتابیس باید بهینه باشن.
2. **رابط کاربری**:
   - پیام‌ها باید کوتاه و جذاب باشن (حداکثر 50 کاراکتر برای Watching، 100 کاراکتر برای منو).
   - اعلانات باید واضح و کاربرپسند باشن.
3. **عملکرد**:
   - تغییر پیام‌ها و تولید اعلانات باید بدون تأخیر انجام بشه.
4. **پایداری**:
   - سیستم نباید باعث کرش ربات بشه.
5. **امنیت**:
   - دسترسی به اطلاعات کاربر (مثلاً موجودی کیف پول) باید امن باشه.

#### 4. طراحی سیستم

##### 4.1. معماری پیشنهادی
- **پلتفرم**: ربات روی Discord اجرا می‌شه، از API Discord و کتابخانه Discord.js استفاده می‌کنیم.
- **دیتابیس**: برای دسترسی به اطلاعات کاربران (مثلاً موجودی، دزدی‌ها، کلن‌ها)، از دیتابیس MongoDB استفاده می‌کنیم.
- **کش (Redis)**: برای کاهش بار روی دیتابیس، اطلاعات کاربران رو توی Redis کش می‌کنیم.
- **لیست پیام‌ها**: یه لیست از پیام‌های طنز برای بخش "Watching" و منو تعریف می‌کنیم.
- **تغییر وضعیت**: از متد `client.user.setActivity()` برای تنظیم وضعیت Watching استفاده می‌کنیم.
- **زمان‌بندی**: از `setInterval` برای به‌روزرسانی دوره‌ای پیام‌های Watching استفاده می‌کنیم.

##### 4.2. پیام‌های طنز برای بخش Watching (پیام‌های عمومی)
این پیام‌ها عمومیت دارن و به تم ربات ربط دارن. هر 30 دقیقه تغییر می‌کنن و برای همه کاربران نمایش داده می‌شن:
1. "Watching: کلن‌ها در حال جنگ! ⚔️ کی برنده می‌شه؟"
2. "Watching: چرخ شانس داره می‌چرخه! 🎡 کی خوش‌شانسه؟"
3. "Watching: بازار داغه! 📈 کی خرید می‌کنه؟"
4. "Watching: مافیا داره شروع می‌شه! 🕵️ کی گول می‌خوره؟"
5. "Watching: سهام‌ها بالا و پایین می‌رن! 📉📈"
6. "Watching: اژدها توی جهان فانتزی بیدار شد! 🐉"
7. "Watching: تورنمنت‌ها داغ شدن! 🏆 کی نفر اوله؟"
8. "Watching: پت‌ها گرسنه شدن! 🐶 کی غذا می‌ده؟"
9. "Watching: ماموریت‌ها منتظرن! 🎯 کی تنبل نیست؟"
10. "Watching: بانک‌ها پر از سکه! 🏦 کی دزدی می‌کنه؟"

##### 4.3. پیام‌های شخصی‌سازی‌شده برای منوی اصلی
این پیام‌ها بر اساس وضعیت کاربر تولید می‌شن و توی توضیحات منوی اصلی نمایش داده می‌شن:
- اگه موجودی کیف پول 0 باشه: "کیف پولت خالیه! 😅 یه دزدی بکن! 🖐️"
- اگه موجودی کیف پول بیشتر از 1000 باشه: "کیف پولت پره! 🤑 یه کم خرج کن! 🛒"
- اگه کاربر توی 1 ساعت گذشته دزدی کرده:
  - موفق: "دزدی اخیرت موفق بود! 🖐️ به کارت ادامه بده! 😏"
  - ناموفق: "دزدی اخیرت ناموفق بود! 🚨 دفعه بعد بهتر تلاش کن!"
- اگه کاربر پاداش روزانه نگرفته: "پاداش روزانه‌ات منتظرته! 🎁 برو بگیرش!"
- اگه کاربر توی کلن باشه و وار کلن فعال باشه: "⚔️ وار کلن شما فعاله! برو بجنگ!"
- اگه کاربر ماموریت روزانه داره: "🎯 ماموریت روزانه: 10 پیام بفرست!"

##### 4.4. اعلانات پویا در منوی اصلی
این اعلانات توی توضیحات منوی اصلی نمایش داده می‌شن و بر اساس وضعیت کاربر تغییر می‌کنن:
- اگه وار کلن فعال باشه: "⚔️ وار کلن شما تا 2 ساعت دیگه تموم می‌شه!"
- اگه ماموریت روزانه ناتموم باشه: "🎯 ماموریت روزانه: 10 پیام بفرست و 100 Ccoin بگیر!"
- اگه تورنمنت فعال باشه: "🏆 تورنمنت حدس عدد تا 24 ساعت دیگه تموم می‌شه!"
- اگه فصل فعال باشه: "🏆 فصل جاری: نفر اول 5000 Ccoin می‌بره!"
- اگه پت کاربر گرسنه باشه: "🐶 پت شما گرسنشه! یه کم غذا بده!"
- اگه رویداد ویژه فعال باشه: "🎉 رویداد ویژه: 2 برابر Ccoin توی بازی‌ها!"

##### 4.5. جریان کار (Workflow)
1. **بخش Watching**:
   - ربات بالا میاد و یه پیام اولیه از لیست پیام‌های عمومی انتخاب می‌کنه.
   - هر 30 دقیقه یه پیام جدید از لیست انتخاب می‌شه و توی بخش "Watching" نمایش داده می‌شه.
2. **منوی اصلی**:
   - وقتی کاربر منوی اصلی رو باز می‌کنه:
     - اطلاعات کاربر (مثلاً موجودی، دزدی‌ها، کلن) از Redis (یا دیتابیس) خونده می‌شه.
     - یه پیام شخصی‌سازی‌شده بر اساس وضعیت کاربر تولید می‌شه.
     - اعلانات پویا (مثلاً وار کلن، ماموریت‌ها) تولید می‌شن.
     - پیام و اعلانات توی توضیحات منوی اصلی نمایش داده می‌شن.

#### 5. رابط کاربری پیشنهادی
1. **بخش Watching (پیام عمومی)**:
   ```
   Ccoin#1873
   Watching: کلن‌ها در حال جنگ! ⚔️ کی برنده می‌شه؟
   ```
2. **منوی اصلی (پیام و اعلانات)**:
   ```
   🎉 به ربات ما خوش اومدی! یه بخش رو انتخاب کن و لذت ببر! 😍
   💬 کیف پولت خالیه! 😅 یه دزدی بکن! 🖐️
   📢 اعلانات:
   ⚔️ وار کلن شما تا 2 ساعت دیگه تموم می‌شه!
   🎯 ماموریت روزانه: 10 پیام بفرست و 100 Ccoin بگیر!
   ```

#### 6. الگوریتم پیشنهادی
1. **بخش Watching**:
   - یه لیست از پیام‌های عمومی تعریف کن.
   - هر 30 دقیقه یه پیام تصادفی از لیست انتخاب کن.
   - پیام رو توی بخش "Watching" تنظیم کن.
2. **منوی اصلی (پیام شخصی‌سازی‌شده)**:
   - اطلاعات کاربر رو از Redis (یا دیتابیس) بخون.
   - بر اساس وضعیت کاربر (مثلاً موجودی، دزدی‌ها، پاداش روزانه) یه پیام طنز تولید کن.
   - پیام رو توی توضیحات منوی اصلی نمایش بده.
3. **منوی اصلی (اعلانات پویا)**:
   - وضعیت کاربر (مثلاً وار کلن، ماموریت‌ها، تورنمنت) رو چک کن.
   - اعلانات مرتبط رو تولید کن.
   - اعلانات رو توی توضیحات منوی اصلی نمایش بده.

#### 7. کد نویسی (پیاده‌سازی با Discord.js)

##### 7.1. پیش‌نیازها
- Node.js و npm نصب شده باشه.
- کتابخانه Discord.js نصب شده باشه:
  ```bash
  npm install discord.js
  ```
- دیتابیس MongoDB برای ذخیره اطلاعات کاربران.
- کتابخانه mongoose برای اتصال به MongoDB:
  ```bash
  npm install mongoose
  ```
- Redis برای کش کردن اطلاعات:
  ```bash
  npm install redis
  ```

##### 7.2. ساختار دیتابیس
- **جدول کاربران (Users)**:
  - `user_id`: شناسه کاربر (کلید اصلی)
  - `wallet`: موجودی کیف پول (Ccoin)
  - `last_theft`: زمان آخرین دزدی
  - `last_daily_reward`: زمان آخرین پاداش روزانه
  - `clan_id`: شناسه کلن (در صورت عضویت)

- **جدول دزدی‌ها (Thefts)**:
  - `thief_id`: شناسه سارق
  - `target_id`: شناسه هدف
  - `success`: آیا دزدی موفق بود؟ (بولین)
  - `timestamp`: زمان دزدی

- **جدول کلن‌ها (Clans)**:
  - `clan_id`: شناسه کلن (کلید اصلی)
  - `war_end_time`: زمان پایان وار کلن (در صورت فعال بودن)

- **جدول ماموریت‌ها (Quests)**:
  - `user_id`: شناسه کاربر
  - `quest_type`: نوع ماموریت (روزانه، هفتگی، ماهانه)
  - `progress`: پیشرفت ماموریت
  - `completed`: آیا ماموریت کامل شده؟

- **جدول تورنمنت‌ها (Tournaments)**:
  - `tournament_id`: شناسه تورنمنت
  - `end_time`: زمان پایان تورنمنت

- **جدول پت‌ها (Pets)**:
  - `user_id`: شناسه کاربر
  - `hunger`: میزان گرسنگی پت (0-100)

##### 7.3. کد نمونه
این کد یه ربات کامل می‌سازه که بخش "Watching" و منوی اصلی رو با پیام‌های شخصی‌سازی‌شده و اعلانات پویا پیاده‌سازی می‌کنه.

```javascript
const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const mongoose = require('mongoose');
const Redis = require('redis');

// ساخت کلاینت ربات
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

// توکن ربات (جایگزین کن با توکن خودت)
const TOKEN = 'YOUR_BOT_TOKEN';

// اتصال به Redis
const redisClient = Redis.createClient();
redisClient.on('error', (err) => console.error('خطا در Redis:', err));
redisClient.connect();

// اتصال به دیتابیس MongoDB
mongoose.connect('mongodb://localhost/ccoin', { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('به دیتابیس متصل شد!'))
  .catch(err => console.error('خطا در اتصال به دیتابیس:', err));

// مدل کاربر
const userSchema = new mongoose.Schema({
  user_id: String,
  wallet: { type: Number, default: 0 },
  last_theft: { type: Date, default: null },
  last_daily_reward: { type: Date, default: null },
  clan_id: { type: String, default: null },
});
const User = mongoose.model('User', userSchema);

// مدل دزدی
const theftSchema = new mongoose.Schema({
  thief_id: String,
  target_id: String,
  success: Boolean,
  timestamp: Date,
});
const Theft = mongoose.model('Theft', theftSchema);

// مدل کلن
const clanSchema = new mongoose.Schema({
  clan_id: String,
  war_end_time: { type: Date, default: null },
});
const Clan = mongoose.model('Clan', clanSchema);

// مدل ماموریت
const questSchema = new mongoose.Schema({
  user_id: String,
  quest_type: String,
  progress: Number,
  completed: Boolean,
});
const Quest = mongoose.model('Quest', questSchema);

// مدل تورنمنت
const tournamentSchema = new mongoose.Schema({
  tournament_id: String,
  end_time: Date,
});
const Tournament = mongoose.model('Tournament', tournamentSchema);

// مدل پت
const petSchema = new mongoose.Schema({
  user_id: String,
  hunger: { type: Number, default: 0 },
});
const Pet = mongoose.model('Pet', petSchema);

// لیست پیام‌های عمومی برای بخش Watching
const watchingMessages = [
  'کلن‌ها در حال جنگ! ⚔️ کی برنده می‌شه؟',
  'چرخ شانس داره می‌چرخه! 🎡 کی خوش‌شانسه؟',
  'بازار داغه! 📈 کی خرید می‌کنه؟',
  'مافیا داره شروع می‌شه! 🕵️ کی گول می‌خوره؟',
  'سهام‌ها بالا و پایین می‌رن! 📉📈',
  'اژدها توی جهان فانتزی بیدار شد! 🐉',
  'تورنمنت‌ها داغ شدن! 🏆 کی نفر اوله؟',
  'پت‌ها گرسنه شدن! 🐶 کی غذا می‌ده؟',
  'ماموریت‌ها منتظرن! 🎯 کی تنبل نیست؟',
  'بانک‌ها پر از سکه! 🏦 کی دزدی می‌کنه؟',
];

// تابع برای انتخاب پیام تصادفی برای بخش Watching
function getWatchingMessage() {
  const randomIndex = Math.floor(Math.random() * watchingMessages.length);
  return watchingMessages[randomIndex];
}

// تابع برای گرفتن اطلاعات کاربر از Redis یا دیتابیس
async function getUserData(userId) {
  const cachedData = await redisClient.get(`user:${userId}`);
  if (cachedData) {
    return JSON.parse(cachedData);
  }

  const user = await User.findOne({ user_id: userId });
  if (user) {
    await redisClient.setEx(`user:${userId}`, 3600, JSON.stringify(user)); // کش برای 1 ساعت
    return user;
  }
  return null;
}

// تابع برای تولید پیام شخصی‌سازی‌شده
async function getPersonalizedMessage(userId) {
  try {
    const user = await getUserData(userId);
    if (!user) {
      return 'اطلاعاتت پیدا نشد! 🤔';
    }

    if (user.wallet === 0) {
      return 'کیف پولت خالیه! 😅 یه دزدی بکن! 🖐️';
    } else if (user.wallet > 1000) {
      return 'کیف پولت پره! 🤑 یه کم خرج کن! 🛒';
    }

    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const recentTheft = await Theft.findOne({
      thief_id: userId,
      timestamp: { $gte: oneHourAgo },
    });
    if (recentTheft) {
      return recentTheft.success
        ? 'دزدی اخیرت موفق بود! 🖐️ به کارت ادامه بده! 😏'
        : 'دزدی اخیرت ناموفق بود! 🚨 دفعه بعد بهتر تلاش کن!';
    }

    const today = new Date().setHours(0, 0, 0, 0);
    if (!user.last_daily_reward || new Date(user.last_daily_reward).setHours(0, 0, 0, 0) < today) {
      return 'پاداش روزانه‌ات منتظرته! 🎁 برو بگیرش!';
    }

    if (user.clan_id) {
      const clan = await Clan.findOne({ clan_id: user.clan_id });
      if (clan && clan.war_end_time && new Date(clan.war_end_time) > new Date()) {
        return '⚔️ وار کلن شما فعاله! برو بجنگ!';
      }
    }

    const dailyQuest = await Quest.findOne({ user_id: userId, quest_type: 'daily', completed: false });
    if (dailyQuest) {
      return '🎯 ماموریت روزانه: 10 پیام بفرست!';
    }

    return 'همه چی خوبه! 😊 یه بازی امتحان کن! 🎮';
  } catch (error) {
    console.error('خطا در تولید پیام شخصی:', error);
    return 'یه مشکلی پیش اومد! 🤔';
  }
}

// تابع برای تولید اعلانات پویا
async function getDynamicNotifications(userId) {
  const notifications = [];
  try {
    const user = await getUserData(userId);
    if (!user) {
      return ['هیچ اعلانی نداری! 🤔'];
    }

    // اعلان وار کلن
    if (user.clan_id) {
      const clan = await Clan.findOne({ clan_id: user.clan_id });
      if (clan && clan.war_end_time && new Date(clan.war_end_time) > new Date()) {
        const hoursLeft = Math.ceil((new Date(clan.war_end_time) - new Date()) / (1000 * 60 * 60));
        notifications.push(`⚔️ وار کلن شما تا ${hoursLeft} ساعت دیگه تموم می‌شه!`);
      }
    }

    // اعلان ماموریت روزانه
    const dailyQuest = await Quest.findOne({ user_id: userId, quest_type: 'daily', completed: false });
    if (dailyQuest) {
      notifications.push(`🎯 ماموریت روزانه: 10 پیام بفرست و 100 Ccoin بگیر!`);
    }

    // اعلان تورنمنت
    const activeTournament = await Tournament.findOne({ end_time: { $gt: new Date() } });
    if (activeTournament) {
      const hoursLeft = Math.ceil((new Date(activeTournament.end_time) - new Date()) / (1000 * 60 * 60));
      notifications.push(`🏆 تورنمنت حدس عدد تا ${hoursLeft} ساعت دیگه تموم می‌شه!`);
    }

    // اعلان پت
    const pet = await Pet.findOne({ user_id: userId });
    if (pet && pet.hunger > 70) {
      notifications.push(`🐶 پت شما گرسنشه! یه کم غذا بده!`);
    }

    // اگه هیچ اعلانی نبود
    if (notifications.length === 0) {
      notifications.push('هیچ اعلانی نداری! 😊');
    }

    return notifications;
  } catch (error) {
    console.error('خطا در تولید اعلانات:', error);
    return ['یه مشکلی پیش اومد! 🤔'];
  }
}

// وقتی ربات آماده می‌شه
client.once('ready', async () => {
  console.log(`ربات ${client.user.tag} آماده شد!`);

  // تنظیم وضعیت اولیه برای Watching
  client.user.setActivity(getWatchingMessage(), { type: 'WATCHING' });

  // تغییر وضعیت هر 30 دقیقه
  setInterval(() => {
    const newMessage = getWatchingMessage();
    client.user.setActivity(newMessage, { type: 'WATCHING' });
    console.log(`وضعیت به‌روزرسانی شد: Watching ${newMessage}`);
  }, 1800000); // هر 30 دقیقه
});

// مدیریت دستورات (منوی اصلی)
client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand() && !interaction.isButton()) return;

  // دستور /menu برای باز کردن منوی اصلی
  if (interaction.isCommand() && interaction.commandName === 'menu') {
    const userId = interaction.user.id;

    // تولید پیام شخصی‌سازی‌شده
    const personalizedMessage = await getPersonalizedMessage(userId);

    // تولید اعلانات پویا
    const notifications = await getDynamicNotifications(userId);

    // ساخت منوی اصلی
    const embed = new EmbedBuilder()
      .setTitle('🌟 منوی اصلی Ccoin')
      .setDescription(
        `🎉 به ربات ما خوش اومدی! یه بخش رو انتخاب کن و لذت ببر! 😍\n` +
        `💬 ${personalizedMessage}\n` +
        `📢 **اعلانات:**\n${notifications.join('\n')}`
      )
      .setColor('#FFD700');

    const row1 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('economy').setLabel('اقتصاد').setStyle(ButtonStyle.Success).setEmoji('💰'),
      new ButtonBuilder().setCustomId('games').setLabel('بازی‌ها').setStyle(ButtonStyle.Primary).setEmoji('🎮'),
      new ButtonBuilder().setCustomId('shop').setLabel('فروشگاه').setStyle(ButtonStyle.Secondary).setEmoji('🛒'),
      new ButtonBuilder().setCustomId('marketplace').setLabel('بازار').setStyle(ButtonStyle.Secondary).setEmoji('🏪'),
      new ButtonBuilder().setCustomId('inventory').setLabel('کوله‌پشتی').setStyle(ButtonStyle.Secondary).setEmoji('🎒')
    );

    const row2 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('quests').setLabel('ماموریت‌ها').setStyle(ButtonStyle.Primary).setEmoji('🎯'),
      new ButtonBuilder().setCustomId('clans').setLabel('کلن‌ها').setStyle(ButtonStyle.Danger).setEmoji('🏰'),
      new ButtonBuilder().setCustomId('tournaments').setLabel('تورنمنت‌ها').setStyle(ButtonStyle.Primary).setEmoji('🏁'),
      new ButtonBuilder().setCustomId('achievements').setLabel('دستاوردها').setStyle(ButtonStyle.Success).setEmoji('🎖️'),
      new ButtonBuilder().setCustomId('profile').setLabel('پروفایل').setStyle(ButtonStyle.Secondary).setEmoji('👤')
    );

    const row3 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('wheel').setLabel('چرخ شانس').setStyle(ButtonStyle.Primary).setEmoji('🎡'),
      new ButtonBuilder().setCustomId('seasons').setLabel('فصل‌ها').setStyle(ButtonStyle.Success).setEmoji('🏆'),
      new ButtonBuilder().setCustomId('worlds').setLabel('جهان‌های موازی').setStyle(ButtonStyle.Primary).setEmoji('🌀'),
      new ButtonBuilder().setCustomId('calendar').setLabel('تقویم').setStyle(ButtonStyle.Secondary).setEmoji('📅'),
      new ButtonBuilder().setCustomId('help').setLabel('راهنما').setStyle(ButtonStyle.Secondary).setEmoji('📜')
    );

    const row4 = new ActionRowBuilder().addComponents(
      new ButtonBuilder().setCustomId('exit').setLabel('خروج').setStyle(ButtonStyle.Danger).setEmoji('🔙')
    );

    await interaction.reply({ embeds: [embed], components: [row1, row2, row3, row4], ephemeral: true });
  }
});

// ورود ربات به Discord
client.login(TOKEN);
```

##### 7.4. توضیح کد
- **کتابخانه‌ها**:
  - `discord.js`: برای تعامل با Discord.
  - `mongoose`: برای اتصال به دیتابیس MongoDB.
  - `redis`: برای کش کردن اطلاعات کاربران.
- **اتصال به Redis**:
  - از Redis برای کش کردن اطلاعات کاربران استفاده می‌کنیم تا بار روی دیتابیس کاهش پیدا کنه.
- **اتصال به دیتابیس**:
  - با `mongoose.connect` به دیتابیس متصل می‌شیم.
- **مدل‌ها**:
  - مدل‌های `User`، `Theft`، `Clan`، `Quest`، `Tournament`، و `Pet` برای مدیریت اطلاعات کاربران و فعالیت‌ها.
- **تابع `getWatchingMessage`**:
  - یه پیام تصادفی از لیست پیام‌های عمومی برای بخش "Watching" انتخاب می‌کنه.
- **تابع `getUserData`**:
  - اطلاعات کاربر رو از Redis می‌خونه، اگه نبود از دیتابیس می‌خونه و توی Redis کش می‌کنه.
- **تابع `getPersonalizedMessage`**:
  - پیام شخصی‌سازی‌شده برای منوی اصلی تولید می‌کنه.
- **تابع `getDynamicNotifications`**:
  - اعلانات پویا (مثلاً وار کلن، ماموریت‌ها) رو تولید می‌کنه.
- **منوی اصلی**:
  - منوی اصلی با دکمه‌ها و توضیحات (شامل پیام شخصی‌سازی‌شده و اعلانات) نمایش داده می‌شه.
- **تغییر وضعیت Watching**:
  - هر 30 دقیقه پیام "Watching" به‌روزرسانی می‌شه.

##### 7.5. اجرا
1. توکن ربات رو توی متغیر `TOKEN` بذار (توکن رو از Discord Developer Portal بگیر).
2. MongoDB و Redis رو روی سیستم نصب کن.
3. کد رو توی یه فایل (مثلاً `bot.js`) ذخیره کن.
4. توی ترمینال، دستور زیر رو اجرا کن:
   ```bash
   node bot.js
   ```
5. ربات بالا میاد و:
   - بخش "Watching" با پیام‌های عمومی نمایش داده می‌شه.
   - منوی اصلی با پیام‌های شخصی‌سازی‌شده و اعلانات پویا نمایش داده می‌شه.

#### 8. تست سناریوها
1. **سناریو 1: بخش Watching**:
   - ربات بالا میاد و پیام "Watching: کلن‌ها در حال جنگ! ⚔️ کی برنده می‌شه؟" نمایش داده می‌شه.
   - بعد از 30 دقیقه، پیام به "Watching: چرخ شانس داره می‌چرخه! 🎡 کی خوش‌شانسه؟" تغییر می‌کنه.
2. **سناریو 2: منوی اصلی (پیام شخصی‌سازی‌شده)**:
   - کاربر منوی اصلی رو باز می‌کنه.
   - پیام: "کیف پولت خالیه! 😅 یه دزدی بکن! 🖐️"
3. **سناریو 3: منوی اصلی (اعلانات)**:
   - کاربر منوی اصلی رو باز می‌کنه.
   - اعلانات:
     - "⚔️ وار کلن شما تا 2 ساعت دیگه تموم می‌شه!"
     - "🎯 ماموریت روزانه: 10 پیام بفرست و 100 Ccoin بگیر!"
4. **سناریو 4: مقیاس‌پذیری**:
   - 1000 کاربر همزمان منوی اصلی رو باز می‌کنن.
   - ربات بدون کندی یا هنگ کردن کار می‌کنه.

#### 9. نکات پیاده‌سازی
- **کش با Redis**: استفاده از Redis باعث می‌شه درخواست‌ها به دیتابیس به شدت کاهش پیدا کنه.
- **بهینه‌سازی دیتابیس**: فقط اطلاعات لازم رو از دیتابیس بخونید و از ایندکس‌گذاری مناسب توی MongoDB استفاده کنید.
- **محدودیت درخواست‌ها**: پیام‌های Watching هر 30 دقیقه تغییر می‌کنن، پس بار روی سیستم کمه.
- **امنیت**: اطلاعات کاربر (مثلاً موجودی کیف پول) فقط برای تولید پیام استفاده بشه و از دسترسی غیرمجاز جلوگیری بشه.
- **پایداری**: اگه Redis یا دیتابیس در دسترس نباشه، پیام پیش‌فرض نمایش داده می‌شه.
- **دستورات اسلش**: برای ثبت دستور `/menu`، باید از `client.application.commands.create` استفاده کنید:
  ```javascript
  client.once('ready', async () => {
    await client.application.commands.create({
      name: 'menu',
      description: 'باز کردن منوی اصلی ربات Ccoin',
    });
  });
  ```

#### 10. نتیجه‌گیری
این سیستم یه تجربه کاربری جذاب و پویا برای ربات Ccoin ایجاد می‌کنه:
- بخش "Watching" با پیام‌های طنز و عمومی حس سرگرمی رو به همه کاربران منتقل می‌کنه.
- منوی اصلی با پیام‌های شخصی‌سازی‌شده و اعلانات پویا حس تعامل شخصی رو به هر کاربر می‌ده.
- سیستم مقیاس‌پذیره و با هزاران کاربر همزمان کار می‌کنه بدون اینکه کند بشه یا هنگ کنه.

این مستند با جزئیات کامل نوشته شده تا توسعه‌دهندگان (یا هوش مصنوعی Replit) بتونن به راحتی این قابلیت‌ها رو پیاده‌سازی کنن. اگه سوال دیگه‌ای داری یا نیاز به توضیح بیشتری داری، بگو تا کمکت کنم! 😊🚀