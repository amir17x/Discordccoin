### مستند جامع و پیشرفته برای ارتقاء پنل ادمین تحت وب ربات دیسکورد Ccoin (نسخه نهایی)

#### مقدمه
این مستند با هدف ارتقاء و گسترش پنل ادمین تحت وب ربات دیسکورد Ccoin طراحی شده است. با توجه به تصاویر منوی اصلی ربات دیسکورد و منوی فعلی پنل ادمین، تمام بخش‌های ربات (کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، لاگ‌ها، تنظیمات، و بخش‌های جدید مانند رأی‌گیری، دعوت، و رتبه‌بندی) در پنل ادمین تحت کنترل و مدیریت کامل قرار می‌گیرند. این مستند شامل تحلیل منوی فعلی، ادغام بخش‌های جدید، پیشنهادات برای بهبود، و پیاده‌سازی کدهای لازم برای ایجاد یک پنل ادمین پیشرفته، زیبا، و کارآمد است.

---

### 1. تحلیل منوی فعلی و بخش‌های جدید ربات دیسکورد

#### 1.1. منوی فعلی پنل ادمین (بر اساس تصویر اولیه)
بخش‌های موجود در منوی فعلی پنل ادمین:
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال).
- **👥 کاربرها:** احتمالاً برای مدیریت کاربرها.
- **🏰 کلن‌ها:** احتمالاً برای مدیریت کلن‌ها.
- **🛒 محصولات:** نمایش و مدیریت محصولات (مانند Wallet Lock، Voice Booster).
- **⚙️ تنظیمات:** احتمالاً برای تنظیمات ربات.
- **🚪 خروج:** برای خروج از پنل.

**مشکلات:**
- بخش‌های محدودی وجود دارد و بسیاری از قابلیت‌های ربات (مانند اقتصاد، کوئست‌ها، بازی‌ها، جایزه‌ها، و لاگ‌ها) پوشش داده نشده‌اند.
- قابلیت‌های تعاملی (مانند ویرایش، حذف، یا اضافه کردن) به وضوح مشخص نیست.
- طراحی منو ساده است و می‌تواند با آیکون‌ها و افکت‌های بصری بهبود یابد.

#### 1.2. منوی ربات دیسکورد (بر اساس تصاویر جدید)
با توجه به تصاویر جدید، بخش‌ها و قابلیت‌های زیر در ربات دیسکورد وجود دارند که باید به پنل ادمین اضافه شوند:

- **اطلاعات کاربر (`/bal`):** نمایش اطلاعات کاربر شامل:
  - موجودی سی‌کوین (Ccoin)
  - موجودی کریستال (Crystals)
  - موجودی بانک (Bank)
  - موجودی پول نقد (Money)
  - رتبه (Rank)
  - تعداد پیام‌ها (Messages)
  - درصد سرقت (Robbery Chance)
  - درصد تخفیف فروشگاه (Shop Discount)

- **اقتصاد:**
  - `/bal`: نمایش موجودی (سی‌کوین، کریستال، بانک، پول نقد).
  - `/bank`: نمایش موجودی بانک.
  - `/money`: نمایش پول نقد.
  - `/top`: نمایش رتبه‌بندی کاربرها (بر اساس سی‌کوین، کریستال، و غیره).
  - `/rob`: سرقت سی‌کوین از کاربر دیگر (با درصد شانس سرقت).
  - `/give`: انتقال سی‌کوین به کاربر دیگر.

- **کلن‌ها (`/clan`):**
  - ایجاد، ویرایش، و حذف کلن‌ها.
  - نمایش اطلاعات کلن (اعضا، سی‌کوین کلن، رتبه).

- **کوئست‌ها (`/quest`):**
  - نمایش و مدیریت کوئست‌ها (مانند کوئست‌های روزانه با جوایز سی‌کوین).

- **محصولات (`/shop`):**
  - نمایش محصولات فروشگاه:
    - **Legendary Role:** 10% شانس سرقت بهتر، 10% تخفیف فروشگاه (قیمت: 10,000 سی‌کوین).
    - **Voice Booster:** افکت صوتی ویژه برای 24 ساعت (قیمت: 700 سی‌کوین).
    - **Wallet Lock:** محافظت از کیف پول در برابر سرقت برای 24 ساعت (قیمت: 200 سی‌کوین).
    - **Lottery Ticket:** بلیط بخت‌آزمایی (قیمت: 500 سی‌کوین).
    - **Mystery Box Key:** کلید جعبه اسرارآمیز با جوایز تصادفی (قیمت: 300 سی‌کوین).
    - **Special Role:** 5% شانس سرقت بهتر، 5% تخفیف فروشگاه (قیمت: 1,000 سی‌کوین).

- **فعالیت‌ها (`/active`):**
  - نمایش فعالیت‌های کاربر (مانند تعداد پیام‌ها، فعالیت در کلن).

- **بازی‌ها (`/game`):**
  - بازی‌های ربات (مانند حدس عدد).

- **جایزه‌ها (`/reward`):**
  - جایزه‌های روزانه (مانند 500 سی‌کوین با 40% شانس).

- **مدیریت (`/admin`):**
  - دستورات ادمین (مانند تغییر موجودی، تنظیمات ربات).

- **رأی‌گیری (`/vote`):**
  - رأی دادن به ربات (مانند رأی در سایت‌های Top.gg).

- **دعوت (`/invite`):**
  - دعوت ربات به سرور دیگر.

- **رتبه‌بندی (`/top`):**
  - نمایش رتبه‌بندی کاربرها و کلن‌ها (بر اساس سی‌کوین، کریستال، پیام‌ها).

- **سایر قابلیت‌ها:**
  - `/help`: نمایش راهنما.
  - `/ping`: بررسی وضعیت ربات.

**نیازها:**
- تمام بخش‌های ربات دیسکورد باید در پنل ادمین تحت وب قابل مدیریت باشند.
- ادمین باید بتواند تمام جنبه‌های ربات (کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، رأی‌گیری، دعوت، رتبه‌بندی، و تنظیمات) را کنترل و تغییر دهد.
- طراحی پنل باید مدرن، زیبا، و کاربرپسند باشد.

---

### 2. پیشنهادات برای گسترش و ادغام منوی پنل ادمین

برای پوشش تمام بخش‌های ربات دیسکورد و ایجاد یک پنل ادمین جامع، منوی پنل ادمین به صورت زیر گسترش می‌یابد:

#### 2.1. منوی جدید پیشنهادی (ادغام‌شده)
- **📊 داشبورد:** نمایش کلی آمار (کاربرها، کلن‌ها، سی‌کوین، کریستال، کوئست‌ها، فعالیت‌ها، وضعیت ربات، رأی‌ها، دعوت‌ها).
- **👥 کاربرها:** مدیریت کاربرها (نمایش، ویرایش، حذف، اضافه کردن، تغییر موجودی، رتبه‌بندی).
- **💰 اقتصاد:** مدیریت اقتصاد (نمایش تراکنش‌ها، تغییر موجودی، تنظیم نرخ تبدیل، مدیریت سرقت و انتقال).
- **🏰 کلن‌ها:** مدیریت کلن‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎯 کوئست‌ها:** مدیریت کوئست‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🛒 محصولات:** مدیریت محصولات (نمایش، ایجاد، ویرایش، حذف، خرید).
- **🎮 بازی‌ها:** مدیریت بازی‌ها (نمایش، ایجاد، ویرایش، حذف).
- **🎁 جایزه‌ها:** مدیریت جایزه‌ها (نمایش، ایجاد، ویرایش، حذف، تخصیص جایزه).
- **📊 رتبه‌بندی:** نمایش و مدیریت رتبه‌بندی (کاربرها و کلن‌ها بر اساس سی‌کوین، کریستال، پیام‌ها).
- **🗳️ رأی‌گیری:** مدیریت رأی‌ها (نمایش رأی‌ها، تشویق به رأی دادن).
- **📩 دعوت‌ها:** مدیریت دعوت‌ها (نمایش لینک دعوت، تعداد دعوت‌ها).
- **📜 لاگ‌ها:** نمایش لاگ فعالیت‌ها (فعالیت‌های کاربرها، ادمین‌ها، و ربات).
- **⚙️ تنظیمات:** تنظیمات ربات (نرخ تبدیل، تنظیمات سرقت، تنظیمات بازی‌ها، تنظیمات جایزه‌ها، تم، رأی‌گیری، دعوت).
- **🚪 خروج:** خروج از پنل.

#### 2.2. قابلیت‌های جدید در هر بخش
- **📊 داشبورد:**
  - نمایش تعداد کاربرها، کلن‌ها، سی‌کوین کل، کریستال کل.
  - نمایش تعداد کوئست‌های فعال، محصولات فروخته‌شده، بازی‌های در حال اجرا.
  - نمایش تعداد رأی‌ها و دعوت‌ها.
  - نمودار فعالیت‌ها (پیام‌ها، تراکنش‌ها، رأی‌ها).
  - وضعیت ربات (آپتایم، مصرف حافظه).

- **👥 کاربرها:**
  - نمایش لیست کاربرها با جزئیات (نام، آیدی، سی‌کوین، کریستال، بانک، پول نقد، رتبه، پیام‌ها، درصد سرقت، درصد تخفیف).
  - قابلیت جستجو و فیلتر (بر اساس نام، آیدی، یا رتبه).
  - ویرایش اطلاعات کاربر (تغییر سی‌کوین، کریستال، بانک، پول نقد، رتبه، درصد سرقت، درصد تخفیف).
  - حذف کاربر.
  - اضافه کردن کاربر جدید.
  - نمایش رتبه‌بندی (Top 10 کاربر بر اساس سی‌کوین، کریستال، پیام‌ها).

- **💰 اقتصاد:**
  - نمایش تراکنش‌ها (سرقت، انتقال، خرید).
  - تغییر موجودی کاربر (سی‌کوین، کریستال، بانک، پول نقد).
  - تنظیم نرخ تبدیل (سی‌کوین به کریستال و بالعکس).
  - مدیریت سرقت (تغییر شانس سرقت، فعال/غیرفعال کردن).
  - مدیریت انتقال (تغییر محدودیت‌ها، فعال/غیرفعال کردن).
  - نمایش آمار اقتصادی (مجموع سی‌کوین، کریستال، تراکنش‌ها).

- **🏰 کلن‌ها:**
  - نمایش لیست کلن‌ها با جزئیات (نام، آیدی، اعضا، سی‌کوین کلن، رتبه).
  - ایجاد کلن جدید.
  - ویرایش کلن (تغییر نام، اعضا، سی‌کوین).
  - حذف کلن.
  - نمایش رتبه‌بندی کلن‌ها (Top 10 کلن بر اساس سی‌کوین، اعضا).

- **🎯 کوئست‌ها:**
  - نمایش لیست کوئست‌ها با جزئیات (نام، توضیحات، جایزه، وضعیت).
  - ایجاد کوئست جدید.
  - ویرایش کوئست (تغییر جایزه، توضیحات).
  - حذف کوئست.
  - تخصیص کوئست به کاربر یا کلن.

- **🛒 محصولات:**
  - نمایش لیست محصولات با جزئیات (نام، قیمت، توضیحات، شانس‌ها، تخفیف‌ها).
  - ایجاد محصول جدید (مانند Legendary Role، Voice Booster، Wallet Lock، Lottery Ticket، Mystery Box Key، Special Role).
  - ویرایش محصول (تغییر قیمت، توضیحات، شانس‌ها).
  - حذف محصول.
  - خرید محصول برای کاربر.
  - نمایش آمار فروش (محبوب‌ترین محصولات، درآمد کل).

- **🎮 بازی‌ها:**
  - نمایش لیست بازی‌ها (مانند حدس عدد).
  - ایجاد بازی جدید.
  - ویرایش بازی (تغییر جایزه، قوانین).
  - حذف بازی.
  - نمایش آمار بازی‌ها (تعداد بازی‌ها، برندگان).

- **🎁 جایزه‌ها:**
  - نمایش لیست جایزه‌ها (مانند جایزه روزانه).
  - ایجاد جایزه جدید.
  - ویرایش جایزه (تغییر مقدار، دوره).
  - حذف جایزه.
  - تخصیص جایزه به کاربر یا کلن.
  - نمایش آمار جایزه‌ها (تعداد جایزه‌های داده‌شده).

- **📊 رتبه‌بندی:**
  - نمایش رتبه‌بندی کاربرها (بر اساس سی‌کوین، کریستال، پیام‌ها).
  - نمایش رتبه‌بندی کلن‌ها (بر اساس سی‌کوین، اعضا).
  - قابلیت فیلتر (روزانه، هفتگی، ماهانه).
  - قابلیت بازنشانی رتبه‌بندی.

- **🗳️ رأی‌گیری:**
  - نمایش تعداد رأی‌ها (کل، روزانه، هفتگی).
  - نمایش کاربرهایی که رأی داده‌اند.
  - تنظیم جوایز رأی‌گیری (مانند 500 سی‌کوین برای هر رأی).
  - لینک مستقیم به سایت رأی‌گیری (مانند Top.gg).

- **📩 دعوت‌ها:**
  - نمایش تعداد دعوت‌ها (کل، روزانه، هفتگی).
  - نمایش کاربرهایی که دعوت کرده‌اند.
  - تنظیم جوایز دعوت (مانند 200 سی‌کوین برای هر دعوت).
  - نمایش لینک دعوت ربات.

- **📜 لاگ‌ها:**
  - نمایش لاگ فعالیت‌ها (ورود/خروج ادمین، تغییرات کاربرها، تراکنش‌ها، رأی‌ها، دعوت‌ها).
  - فیلتر بر اساس تاریخ، نوع فعالیت، یا کاربر.
  - قابلیت دانلود لاگ‌ها (به صورت CSV).

- **⚙️ تنظیمات:**
  - تنظیمات اقتصاد (نرخ تبدیل، شانس سرقت).
  - تنظیمات بازی‌ها (فعال/غیرفعال کردن، تغییر جوایز).
  - تنظیمات جایزه‌ها (دوره، مقدار).
  - تنظیمات رأی‌گیری (جوایز، فعال/غیرفعال کردن).
  - تنظیمات دعوت (جوایز، فعال/غیرفعال کردن).
  - تنظیمات ربات (وضعیت، آپتایم، مصرف حافظه).
  - تغییر تم (Dark/Light).

#### 2.3. بهبود طراحی منو
- **آیکون‌ها:** اضافه کردن آیکون برای هر بخش (مانند 📊 برای داشبورد، 👥 برای کاربرها).
- **افکت شیشه‌ای:** استفاده از افکت شیشه‌ای (Glassmorphism) برای منو و کارت‌ها.
- **ناوبری آسان:** منو به صورت ثابت در سمت راست یا چپ صفحه قرار گیرد.
- **زبان یکپارچه:** تمام عناوین به زبان فارسی (مثلاً "Ccoin" به "سی‌کوین").
- **تم پیشرفته:** تم تیره با رنگ‌های جذاب (آبی، بنفش، سبز) و افکت‌های انیمیشنی.
- **پاسخگویی (Responsive):** طراحی سازگار با موبایل و دسکتاپ.

---

### 3. طراحی جدید منوی پنل ادمین

#### 3.1. ساختار UI جدید
- **نوار کناری (Sidebar):**  
  - لوگوی ربات (Ccoin Bot).
  - نام ادمین (whysiks).
  - منو با آیکون‌ها: داشبورد، کاربرها، اقتصاد، کلن‌ها، کوئست‌ها، محصولات، بازی‌ها، جایزه‌ها، رتبه‌بندی، رأی‌گیری، دعوت‌ها، لاگ‌ها، تنظیمات، خروج.
- **هدر (Header):**  
  - نام ادمین و آواتار.
  - دکمه تغییر تم (Dark/Light).
  - دکمه اعلان‌ها (برای نمایش فعالیت‌های اخیر).
  - دکمه خروج (Logout).
- **بخش اصلی (Main Content):**  
  - هر بخش با کارت‌های آماری، جداول، فرم‌ها، و نمودارها.
  - قابلیت جستجو و فیلتر در جداول.
  - دکمه‌های تعاملی (ویرایش، حذف، اضافه کردن) با افکت‌های انیمیشنی.

#### 3.2. نمونه طراحی منو
یه نمونه متنی از منوی جدید:

```
[Sidebar]
- Logo: Ccoin Bot
- Admin: whysiks
- 📊 داشبورد
- 👥 کاربرها
- 💰 اقتصاد
- 🏰 کلن‌ها
- 🎯 کوئست‌ها
- 🛒 محصولات
- 🎮 بازی‌ها
- 🎁 جایزه‌ها
- 📊 رتبه‌بندی
- 🗳️ رأی‌گیری
- 📩 دعوت‌ها
- 📜 لاگ‌ها
- ⚙️ تنظیمات
- 🚪 خروج

[Header]
- whysiks (Avatar) | 🔔 اعلان‌ها | 🌙 تم تیره | خروج
```

#### 3.3. صفحات جدید و بهبودیافته
- **📊 داشبورد:** کارت‌های آماری (کاربرها، کلن‌ها، سی‌کوین، کریستال، رأی‌ها، دعوت‌ها)، نمودار فعالیت‌ها (پیام‌ها، تراکنش‌ها).
- **👥 کاربرها:** جدول کاربرها با قابلیت جستجو، فیلتر، ویرایش، حذف، و اضافه کردن.
- **💰 اقتصاد:** نمایش تراکنش‌ها، فرم برای تغییر موجودی، تنظیمات نرخ تبدیل و سرقت.
- **🏰 کلن‌ها:** جدول کلن‌ها با قابلیت ایجاد، ویرایش، و حذف.
- **🎯 کوئست‌ها:** جدول کوئست‌ها با قابلیت ایجاد، ویرایش، و حذف.
- **🛒 محصولات:** جدول محصولات با قابلیت ایجاد، ویرایش، حذف، و خرید.
- **🎮 بازی‌ها:** جدول بازی‌ها با قابلیت ایجاد، ویرایش، و حذف.
- **🎁 جایزه‌ها:** جدول جایزه‌ها با قابلیت ایجاد، ویرایش، حذف، و تخصیص.
- **📊 رتبه‌بندی:** جدول رتبه‌بندی با فیلتر (روزانه، هفتگی، ماهانه).
- **🗳️ رأی‌گیری:** جدول رأی‌ها با لینک رأی‌گیری و تنظیم جوایز.
- **📩 دعوت‌ها:** جدول دعوت‌ها با لینک دعوت و تنظیم جوایز.
- **📜 لاگ‌ها:** جدول لاگ‌ها با فیلتر و قابلیت دانلود.
- **⚙️ تنظیمات:** فرم برای تنظیمات اقتصاد، بازی‌ها، جایزه‌ها، رأی‌گیری، دعوت، و ربات.

---

### 4. پیاده‌سازی کد

#### 4.1. نصب پکیج‌های مورد نیاز
پکیج‌های زیر برای گسترش پنل نصب می‌شوند:

```bash
# برای بک‌اند
npm install express express-session discord-oauth2 sqlite3 discord.js

# برای فرانت‌اند (توی پوشه client)
cd client
npm install axios chart.js react-chartjs-2 @mui/material @emotion/react @emotion/styled react-icons react-router-dom framer-motion
```

#### 4.2. ساختار پروژه
ساختار پروژه به صورت زیر تنظیم می‌شود:

```
project/
├── server/
│   ├── index.ts        # فایل اصلی سرور
│   ├── admin.ts        # روت‌های API
│   ├── storage.ts      # توابع دیتابیس
│   ├── database.ts     # تنظیمات دیتابیس
│   └── bot.ts          # ربات دیسکورد
├── client/
│   ├── src/
│   │   ├── assets/
│   │   │   ├── theme/
│   │   │   │   ├── colors.js
│   │   │   │   └── typography.js
│   │   ├── components/
│   │   │   ├── Sidebar.tsx
│   │   │   ├── Header.tsx
│   │   │   ├── GlassCard.tsx
│   │   │   ├── DataTable.tsx
│   │   │   └── Notification.tsx
│   │   ├── pages/
│   │   │   ├── Dashboard.tsx
│   │   │   ├── Users.tsx
│   │   │   ├── Economy.tsx
│   │   │   ├── Clans.tsx
│   │   │   ├── Quests.tsx
│   │   │   ├── Products.tsx
│   │   │   ├── Games.tsx
│   │   │   ├── Rewards.tsx
│   │   │   ├── Rankings.tsx
│   │   │   ├── Votes.tsx
│   │   │   ├── Invites.tsx
│   │   │   ├── Logs.tsx
│   │   │   └── Settings.tsx
│   │   ├── App.tsx
│   │   ├── index.tsx
│   │   ├── routes.tsx
│   │   └── styles.css
│   ├── package.json
│   └── vite.config.ts
├── package.json
└── .replit
```

#### 4.3. تنظیمات تم (client/src/assets/theme/colors.js)
فایل رنگ‌ها برای تم پیشرفته:

```javascript
const colors = {
  background: "#1A1F37",
  card: "rgba(255, 255, 255, 0.1)",
  text: "#FFFFFF",
  primary: "#7289DA",
  secondary: "#3B82F6",
  accent: "#10B981",
  warning: "#F59E0B",
  error: "#EF4444",
  gradient: "linear-gradient(135deg, #7289DA, #3B82F6)",
};

export default colors;
```

#### 4.4. استایل‌های شیشه‌ای (client/src/styles.css)
استایل‌های شیشه‌ای برای منو و کارت‌ها:

```css
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.glass:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

body {
  background: #1A1F37;
  color: #FFFFFF;
  font-family: "Vazir", sans-serif;
}
```

#### 4.5. کامپوننت Sidebar (client/src/components/Sidebar.tsx)
نوار کناری با منوی جدید و انیمیشن:

```tsx
import { Link, useLocation } from "react-router-dom";
import { motion } from "framer-motion";
import { FaChartBar, FaUsers, FaMoneyBillWave, FaShieldAlt, FaTasks, FaShoppingCart, FaGamepad, FaGift, FaTrophy, FaVoteYea, FaEnvelope, FaFileAlt, FaCog, FaSignOutAlt } from "react-icons/fa";

const Sidebar = () => {
  const location = useLocation();

  const menuItems = [
    { path: "/dashboard", label: "داشبورد", icon: <FaChartBar /> },
    { path: "/users", label: "کاربرها", icon: <FaUsers /> },
    { path: "/economy", label: "اقتصاد", icon: <FaMoneyBillWave /> },
    { path: "/clans", label: "کلن‌ها", icon: <FaShieldAlt /> },
    { path: "/quests", label: "کوئست‌ها", icon: <FaTasks /> },
    { path: "/products", label: "محصولات", icon: <FaShoppingCart /> },
    { path: "/games", label: "بازی‌ها", icon: <FaGamepad /> },
    { path: "/rewards", label: "جایزه‌ها", icon: <FaGift /> },
    { path: "/rankings", label: "رتبه‌بندی", icon: <FaTrophy /> },
    { path: "/votes", label: "رأی‌گیری", icon: <FaVoteYea /> },
    { path: "/invites", label: "دعوت‌ها", icon: <FaEnvelope /> },
    { path: "/logs", label: "لاگ‌ها", icon: <FaFileAlt /> },
    { path: "/settings", label: "تنظیمات", icon: <FaCog /> },
    { path: "/logout", label: "خروج", icon: <FaSignOutAlt /> },
  ];

  return (
    <motion.aside
      initial={{ x: 100 }}
      animate={{ x: 0 }}
      transition={{ duration: 0.5 }}
      className="fixed top-0 right-0 w-64 h-full glass p-4"
    >
      <div className="text-center mb-6">
        <img src="/logo.png" alt="Ccoin Bot" className="w-16 mx-auto" />
        <h2 className="text-xl font-bold mt-2">ربات سی‌کوین</h2>
        <p className="text-gray-400">ادمین: whysiks</p>
      </div>
      <nav>
        {menuItems.map((item) => (
          <Link
            key={item.path}
            to={item.path}
            className={`flex items-center space-x-2 py-2 px-4 rounded mb-2 ${
              location.pathname === item.path ? "bg-primary" : "hover:bg-gray-700"
            }`}
          >
            {item.icon}
            <span>{item.label}</span>
          </Link>
        ))}
      </nav>
    </motion.aside>
  );
};

export default Sidebar;
```

#### 4.6. کامپوننت Header (client/src/components/Header.tsx)
هدر با طراحی پیشرفته و اعلان‌ها:

```tsx
import { useState } from "react";
import { FaMoon, FaSignOutAlt, FaBell } from "react-icons/fa";
import { motion } from "framer-motion";

const Header = () => {
  const [showNotifications, setShowNotifications] = useState(false);

  const handleLogout = async () => {
    await fetch("http://localhost:5000/api/admin/logout");
    window.location.href = "/";
  };

  const notifications = [
    "کاربر جدید ثبت‌نام کرد!",
    "یک کلن جدید ایجاد شد!",
    "کاربر whysiks رأی داد!",
  ];

  return (
    <header className="glass p-4 flex justify-between items-center">
      <div className="flex items-center space-x-4">
        <img src="https://via.placeholder.com/40" alt="Avatar" className="w-10 h-10 rounded-full" />
        <span className="font-semibold">whysiks (ادمین)</span>
      </div>
      <div className="flex space-x-4 relative">
        <button
          onClick={() => setShowNotifications(!showNotifications)}
          className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaBell />
          <span>اعلان‌ها</span>
        </button>
        {showNotifications && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            className="absolute top-12 right-0 glass p-4 w-64"
          >
            {notifications.map((notif, index) => (
              <p key={index} className="text-sm mb-2">{notif}</p>
            ))}
          </motion.div>
        )}
        <button className="bg-gray-700 hover:bg-gray-600 py-2 px-4 rounded flex items-center space-x-2">
          <FaMoon />
          <span>تم تیره</span>
        </button>
        <button
          onClick={handleLogout}
          className="bg-red-600 hover:bg-red-700 py-2 px-4 rounded flex items-center space-x-2"
        >
          <FaSignOutAlt />
          <span>خروج</span>
        </button>
      </div>
    </header>
  );
};

export default Header;
```

#### 4.7. کامپوننت DataTable (client/src/components/DataTable.tsx)
کامپوننت جدول با قابلیت جستجو و فیلتر:

```tsx
import { useState } from "react";
import { FaEdit, FaTrash } from "react-icons/fa";
import { motion } from "framer-motion";

interface DataTableProps {
  columns: string[];
  data: any[];
  onEdit: (id: string) => void;
  onDelete: (id: string) => void;
}

const DataTable = ({ columns, data, onEdit, onDelete }: DataTableProps) => {
  const [search, setSearch] = useState("");

  const filteredData = data.filter((row) =>
    Object.values(row).some((value) =>
      value.toString().toLowerCase().includes(search.toLowerCase())
    )
  );

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="glass p-4"
    >
      <input
        type="text"
        placeholder="جستجو..."
        value={search}
        onChange={(e) => setSearch(e.target.value)}
        className="mb-4 p-2 rounded bg-gray-800 text-white w-full"
      />
      <table className="w-full text-left">
        <thead>
          <tr>
            {columns.map((col) => (
              <th key={col} className="py-2">{col}</th>
            ))}
            <th>اقدامات</th>
          </tr>
        </thead>
        <tbody>
          {filteredData.map((row) => (
            <tr key={row.id} className="border-t border-gray-700">
              {Object.values(row).map((value, index) => (
                <td key={index} className="py-2">{value}</td>
              ))}
              <td>
                <button onClick={() => onEdit(row.id)} className="text-blue-500 mr-2">
                  <FaEdit />
                </button>
                <button onClick={() => onDelete(row.id)} className="text-red-500">
                  <FaTrash />
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </motion.div>
  );
};

export default DataTable;
```

#### 4.8. صفحه داشبورد (client/src/pages/Dashboard.tsx)
صفحه داشبورد با کارت‌های آماری و نمودار:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import { Bar } from "react-chartjs-2";
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from "chart.js";
import { motion } from "framer-motion";

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

const Dashboard = () => {
  const [stats, setStats] = useState({
    users: 0,
    clans: 0,
    ccoin: 0,
    crystals: 0,
    votes: 0,
    invites: 0,
  });

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/stats");
        setStats(response.data);
      } catch (error) {
        console.error("Error fetching stats:", error);
      }
    };
    fetchStats();
  }, []);

  const chartData = {
    labels: ["کاربرها", "کلن‌ها", "سی‌کوین", "کریستال", "رأی‌ها", "دعوت‌ها"],
    datasets: [
      {
        label: "آمار",
        data: [stats.users, stats.clans, stats.ccoin, stats.crystals, stats.votes, stats.invites],
        backgroundColor: "rgba(114, 137, 218, 0.6)",
        borderColor: "rgba(114, 137, 218, 1)",
        borderWidth: 1,
      },
    ],
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">📊 داشبورد</h1>
      <div className="grid grid-cols-3 gap-6 mb-6">
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">کاربرها</h2>
          <p className="text-2xl">{stats.users}</p>
        </div>
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">کلن‌ها</h2>
          <p className="text-2xl">{stats.clans}</p>
        </div>
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">سی‌کوین کل</h2>
          <p className="text-2xl">{stats.ccoin}</p>
        </div>
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">کریستال کل</h2>
          <p className="text-2xl">{stats.crystals}</p>
        </div>
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">رأی‌ها</h2>
          <p className="text-2xl">{stats.votes}</p>
        </div>
        <div className="glass p-4">
          <h2 className="text-lg font-semibold">دعوت‌ها</h2>
          <p className="text-2xl">{stats.invites}</p>
        </div>
      </div>
      <div className="glass p-4">
        <h2 className="text-xl font-semibold mb-4">نمودار آمار</h2>
        <Bar data={chartData} />
      </div>
    </motion.div>
  );
};

export default Dashboard;
```

#### 4.9. صفحه کاربرها (client/src/pages/Users.tsx)
صفحه مدیریت کاربرها با جزئیات بیشتر:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Users = () => {
  const [users, setUsers] = useState<any[]>([]);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/users");
        setUsers(response.data);
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    fetchUsers();
  }, []);

  const handleEdit = async (id: string) => {
    const newCcoin = prompt("مقدار جدید سی‌کوین را وارد کنید:");
    const newCrystals = prompt("مقدار جدید کریستال را وارد کنید:");
    const newBank = prompt("مقدار جدید بانک را وارد کنید:");
    const newMoney = prompt("مقدار جدید پول نقد را وارد کنید:");
    const newRobberyChance = prompt("درصد جدید شانس سرقت را وارد کنید:");
    const newShopDiscount = prompt("درصد جدید تخفیف فروشگاه را وارد کنید:");
    if (newCcoin && newCrystals && newBank && newMoney && newRobberyChance && newShopDiscount) {
      try {
        await axios.put(`http://localhost:5000/api/admin/users/${id}`, {
          ccoin: newCcoin,
          crystals: newCrystals,
          bank: newBank,
          money: newMoney,
          robberyChance: newRobberyChance,
          shopDiscount: newShopDiscount,
        });
        setUsers(users.map((user) => (user.id === id ? { ...user, ccoin: newCcoin, crystals: newCrystals, bank: newBank, money: newMoney, robberyChance: newRobberyChance, shopDiscount: newShopDiscount } : user)));
      } catch (error) {
        console.error("Error updating user:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کاربر را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/users/${id}`);
        setUsers(users.filter((user) => user.id !== id));
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "سی‌کوین", "کریستال", "بانک", "پول نقد", "رتبه", "پیام‌ها", "شانس سرقت", "تخفیف فروشگاه"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">👥 کاربرها</h1>
      <DataTable
        columns={columns}
        data={users.map((user) => ({
          id: user.id,
          نام: user.username,
          آیدی: user.id,
          "سی‌کوین": user.ccoin,
          کریستال: user.crystals,
          بانک: user.bank,
          "پول نقد": user.money,
          رتبه: user.rank,
          "پیام‌ها": user.messages,
          "شانس سرقت": `${user.robberyChance}%`,
          "تخفیف فروشگاه": `${user.shopDiscount}%`,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Users;
```

#### 4.10. صفحه اقتصاد (client/src/pages/Economy.tsx)
صفحه مدیریت اقتصاد با جزئیات بیشتر:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Economy = () => {
  const [transactions, setTransactions] = useState<any[]>([]);
  const [settings, setSettings] = useState({ conversionRate: 0, robberyChance: 0, transferLimit: 0 });

  useEffect(() => {
    const fetchTransactions = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/transactions");
        setTransactions(response.data);
      } catch (error) {
        console.error("Error fetching transactions:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/economy/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchTransactions();
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/economy/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const columns = ["کاربر", "نوع", "مقدار", "تاریخ"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">💰 اقتصاد</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-3 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>محدودیت انتقال (سی‌کوین):</label>
            <input
              type="number"
              value={settings.transferLimit}
              onChange={(e) => setSettings({ ...settings, transferLimit: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-4"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <h2 className="text-xl font-semibold mb-4">تراکنش‌ها</h2>
      <DataTable
        columns={columns}
        data={transactions.map((tx) => ({
          id: tx.id,
          کاربر: tx.user,
          نوع: tx.type,
          مقدار: tx.amount,
          تاریخ: tx.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </motion.div>
  );
};

export default Economy;
```

#### 4.11. صفحه کلن‌ها (client/src/pages/Clans.tsx)
صفحه مدیریت کلن‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Clans = () => {
  const [clans, setClans] = useState<any[]>([]);

  useEffect(() => {
    const fetchClans = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/clans");
        setClans(response.data);
      } catch (error) {
        console.error("Error fetching clans:", error);
      }
    };
    fetchClans();
  }, []);

  const handleEdit = async (id: string) => {
    const newName = prompt("نام جدید کلن را وارد کنید:");
    const newCcoin = prompt("مقدار جدید سی‌کوین کلن را وارد کنید:");
    if (newName && newCcoin) {
      try {
        await axios.put(`http://localhost:5000/api/admin/clans/${id}`, { name: newName, ccoin: newCcoin });
        setClans(clans.map((clan) => (clan.id === id ? { ...clan, name: newName, ccoin: newCcoin } : clan)));
      } catch (error) {
        console.error("Error updating clan:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کلن را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/clans/${id}`);
        setClans(clans.filter((clan) => clan.id !== id));
      } catch (error) {
        console.error("Error deleting clan:", error);
      }
    }
  };

  const columns = ["نام", "آیدی", "اعضا", "سی‌کوین کلن", "رتبه"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🏰 کلن‌ها</h1>
      <DataTable
        columns={columns}
        data={clans.map((clan) => ({
          id: clan.id,
          نام: clan.name,
          آیدی: clan.id,
          اعضا: clan.members,
          "سی‌کوین کلن": clan.ccoin,
          رتبه: clan.rank,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Clans;
```

#### 4.12. صفحه کوئست‌ها (client/src/pages/Quests.tsx)
صفحه مدیریت کوئست‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Quests = () => {
  const [quests, setQuests] = useState<any[]>([]);

  useEffect(() => {
    const fetchQuests = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/quests");
        setQuests(response.data);
      } catch (error) {
        console.error("Error fetching quests:", error);
      }
    };
    fetchQuests();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید کوئست را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/quests/${id}`, { reward: newReward });
        setQuests(quests.map((quest) => (quest.id === id ? { ...quest, reward: newReward } : quest)));
      } catch (error) {
        console.error("Error updating quest:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این کوئست را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/quests/${id}`);
        setQuests(quests.filter((quest) => quest.id !== id));
      } catch (error) {
        console.error("Error deleting quest:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🎯 کوئست‌ها</h1>
      <DataTable
        columns={columns}
        data={quests.map((quest) => ({
          id: quest.id,
          نام: quest.name,
          توضیحات: quest.description,
          جایزه: quest.reward,
          وضعیت: quest.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Quests;
```

#### 4.13. صفحه محصولات (client/src/pages/Products.tsx)
صفحه مدیریت محصولات با جزئیات بیشتر:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { FaLock, FaVolumeUp, FaUserShield, FaGift, FaKey, FaTicketAlt } from "react-icons/fa";
import { motion } from "framer-motion";

const Products = () => {
  const [products, setProducts] = useState<any[]>([]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/products");
        setProducts(response.data);
      } catch (error) {
        console.error("Error fetching products:", error);
      }
    };
    fetchProducts();
  }, []);

  const handleEdit = async (id: string) => {
    const newPrice = prompt("قیمت جدید محصول را وارد کنید:");
    const newRobberyChance = prompt("درصد جدید شانس سرقت را وارد کنید (در صورت وجود):");
    const newShopDiscount = prompt("درصد جدید تخفیف فروشگاه را وارد کنید (در صورت وجود):");
    if (newPrice) {
      try {
        await axios.put(`http://localhost:5000/api/admin/products/${id}`, {
          price: newPrice,
          robberyChance: newRobberyChance || 0,
          shopDiscount: newShopDiscount || 0,
        });
        setProducts(products.map((product) => (product.id === id ? { ...product, price: newPrice, robberyChance: newRobberyChance || product.robberyChance, shopDiscount: newShopDiscount || product.shopDiscount } : product)));
      } catch (error) {
        console.error("Error updating product:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این محصول را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/products/${id}`);
        setProducts(products.filter((product) => product.id !== id));
      } catch (error) {
        console.error("Error deleting product:", error);
      }
    }
  };

  const icons = {
    "Legendary Role": <FaUserShield />,
    "Voice Booster": <FaVolumeUp />,
    "Wallet Lock": <FaLock />,
    "Lottery Ticket": <FaTicketAlt />,
    "Mystery Box Key": <FaKey />,
    "Special Role": <FaGift />,
  };

  const columns = ["آیکون", "نام", "وضعیت", "شانس سرقت", "تخفیف فروشگاه", "قیمت (سی‌کوین)", "دوره", "توضیحات"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🛒 محصولات</h1>
      <DataTable
        columns={columns}
        data={products.map((product) => ({
          id: product.id,
          آیکون: icons[product.name],
          نام: product.name,
          وضعیت: product.status,
          "شانس سرقت": product.robberyChance ? `${product.robberyChance}%` : "-",
          "تخفیف فروشگاه": product.shopDiscount ? `${product.shopDiscount}%` : "-",
          "قیمت (سی‌کوین)": product.price,
          دوره: product.period,
          توضیحات: product.description,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Products;
```

#### 4.14. صفحه بازی‌ها (client/src/pages/Games.tsx)
صفحه مدیریت بازی‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Games = () => {
  const [games, setGames] = useState<any[]>([]);

  useEffect(() => {
    const fetchGames = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/games");
        setGames(response.data);
      } catch (error) {
        console.error("Error fetching games:", error);
      }
    };
    fetchGames();
  }, []);

  const handleEdit = async (id: string) => {
    const newReward = prompt("جایزه جدید بازی را وارد کنید:");
    if (newReward) {
      try {
        await axios.put(`http://localhost:5000/api/admin/games/${id}`, { reward: newReward });
        setGames(games.map((game) => (game.id === id ? { ...game, reward: newReward } : game)));
      } catch (error) {
        console.error("Error updating game:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این بازی را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/games/${id}`);
        setGames(games.filter((game) => game.id !== id));
      } catch (error) {
        console.error("Error deleting game:", error);
      }
    }
  };

  const columns = ["نام", "توضیحات", "جایزه", "وضعیت"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🎮 بازی‌ها</h1>
      <DataTable
        columns={columns}
        data={games.map((game) => ({
          id: game.id,
          نام: game.name,
          توضیحات: game.description,
          جایزه: game.reward,
          وضعیت: game.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Games;
```

#### 4.15. صفحه جایزه‌ها (client/src/pages/Rewards.tsx)
صفحه مدیریت جایزه‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Rewards = () => {
  const [rewards, setRewards] = useState<any[]>([]);

  useEffect(() => {
    const fetchRewards = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/rewards");
        setRewards(response.data);
      } catch (error) {
        console.error("Error fetching rewards:", error);
      }
    };
    fetchRewards();
  }, []);

  const handleEdit = async (id: string) => {
    const newAmount = prompt("مقدار جدید جایزه را وارد کنید:");
    const newChance = prompt("شانس جدید جایزه را وارد کنید (%):");
    if (newAmount && newChance) {
      try {
        await axios.put(`http://localhost:5000/api/admin/rewards/${id}`, { amount: newAmount, chance: newChance });
        setRewards(rewards.map((reward) => (reward.id === id ? { ...reward, amount: newAmount, chance: newChance } : reward)));
      } catch (error) {
        console.error("Error updating reward:", error);
      }
    }
  };

  const handleDelete = async (id: string) => {
    if (confirm("آیا مطمئن هستید که می‌خواهید این جایزه را حذف کنید؟")) {
      try {
        await axios.delete(`http://localhost:5000/api/admin/rewards/${id}`);
        setRewards(rewards.filter((reward) => reward.id !== id));
      } catch (error) {
        console.error("Error deleting reward:", error);
      }
    }
  };

  const columns = ["نام", "مقدار", "شانس", "دوره", "وضعیت"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🎁 جایزه‌ها</h1>
      <DataTable
        columns={columns}
        data={rewards.map((reward) => ({
          id: reward.id,
          نام: reward.name,
          مقدار: reward.amount,
          شانس: `${reward.chance}%`,
          دوره: reward.period,
          وضعیت: reward.status,
        }))}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </motion.div>
  );
};

export default Rewards;
```

#### 4.16. صفحه رتبه‌بندی (client/src/pages/Rankings.tsx)
صفحه جدید برای رتبه‌بندی:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Rankings = () => {
  const [userRankings, setUserRankings] = useState<any[]>([]);
  const [clanRankings, setClanRankings] = useState<any[]>([]);
  const [filter, setFilter] = useState("daily");

  useEffect(() => {
    const fetchRankings = async () => {
      try {
        const userResponse = await axios.get(`http://localhost:5000/api/admin/rankings/users?filter=${filter}`);
        const clanResponse = await axios.get(`http://localhost:5000/api/admin/rankings/clans?filter=${filter}`);
        setUserRankings(userResponse.data);
        setClanRankings(clanResponse.data);
      } catch (error) {
        console.error("Error fetching rankings:", error);
      }
    };
    fetchRankings();
  }, [filter]);

  const userColumns = ["رتبه", "نام", "سی‌کوین", "کریستال", "پیام‌ها"];
  const clanColumns = ["رتبه", "نام", "سی‌کوین", "اعضا"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">📊 رتبه‌بندی</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">فیلتر</h2>
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="p-2 rounded bg-gray-800 text-white"
        >
          <option value="daily">روزانه</option>
          <option value="weekly">هفتگی</option>
          <option value="monthly">ماهانه</option>
        </select>
      </div>
      <h2 className="text-xl font-semibold mb-4">رتبه‌بندی کاربرها</h2>
      <DataTable
        columns={userColumns}
        data={userRankings.map((user, index) => ({
          id: user.id,
          رتبه: index + 1,
          نام: user.username,
          "سی‌کوین": user.ccoin,
          کریستال: user.crystals,
          "پیام‌ها": user.messages,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <h2 className="text-xl font-semibold mb-4 mt-6">رتبه‌بندی کلن‌ها</h2>
      <DataTable
        columns={clanColumns}
        data={clanRankings.map((clan, index) => ({
          id: clan.id,
          رتبه: index + 1,
          نام: clan.name,
          "سی‌کوین": clan.ccoin,
          اعضا: clan.members,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </motion.div>
  );
};

export default Rankings;
```

#### 4.17. صفحه رأی‌گیری (client/src/pages/Votes.tsx)
صفحه جدید برای رأی‌گیری:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Votes = () => {
  const [votes, setVotes] = useState<any[]>([]);
  const [settings, setSettings] = useState({ reward: 0, enabled: false });

  useEffect(() => {
    const fetchVotes = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/votes");
        setVotes(response.data);
      } catch (error) {
        console.error("Error fetching votes:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/votes/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchVotes();
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/votes/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const columns = ["کاربر", "تاریخ", "سایت"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">🗳️ رأی‌گیری</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">تنظیمات رأی‌گیری</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>جایزه رأی (سی‌کوین):</label>
            <input
              type="number"
              value={settings.reward}
              onChange={(e) => setSettings({ ...settings, reward: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>فعال کردن رأی‌گیری:</label>
            <input
              type="checkbox"
              checked={settings.enabled}
              onChange={(e) => setSettings({ ...settings, enabled: e.target.checked })}
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-4"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <h2 className="text-xl font-semibold mb-4">رأی‌ها</h2>
      <DataTable
        columns={columns}
        data={votes.map((vote) => ({
          id: vote.id,
          کاربر: vote.user,
          تاریخ: vote.date,
          سایت: vote.site,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <div className="glass p-4 mt-6">
        <h2 className="text-xl font-semibold mb-4">لینک رأی‌گیری</h2>
        <a href="https://top.gg/bot/YOUR_BOT_ID/vote" target="_blank" className="text-blue-400">
          رأی دادن در Top.gg
        </a>
      </div>
    </motion.div>
  );
};

export default Votes;
```

#### 4.18. صفحه دعوت‌ها (client/src/pages/Invites.tsx)
صفحه جدید برای دعوت‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";

const Invites = () => {
  const [invites, setInvites] = useState<any[]>([]);
  const [settings, setSettings] = useState({ reward: 0, enabled: false });
  const [inviteLink, setInviteLink] = useState("");

  useEffect(() => {
    const fetchInvites = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/invites");
        setInvites(response.data);
      } catch (error) {
        console.error("Error fetching invites:", error);
      }
    };
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/invites/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    const fetchInviteLink = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/invites/link");
        setInviteLink(response.data.link);
      } catch (error) {
        console.error("Error fetching invite link:", error);
      }
    };
    fetchInvites();
    fetchSettings();
    fetchInviteLink();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/invites/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  const columns = ["کاربر", "تعداد دعوت‌ها", "تاریخ"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">📩 دعوت‌ها</h1>
      <div className="glass p-4 mb-6">
        <h2 className="text-xl font-semibold mb-4">تنظیمات دعوت</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>جایزه دعوت (سی‌کوین):</label>
            <input
              type="number"
              value={settings.reward}
              onChange={(e) => setSettings({ ...settings, reward: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>فعال کردن جوایز دعوت:</label>
            <input
              type="checkbox"
              checked={settings.enabled}
              onChange={(e) => setSettings({ ...settings, enabled: e.target.checked })}
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-4"
        >
          ذخیره تنظیمات
        </button>
      </div>
      <h2 className="text-xl font-semibold mb-4">دعوت‌ها</h2>
      <DataTable
        columns={columns}
        data={invites.map((invite) => ({
          id: invite.id,
          کاربر: invite.user,
          "تعداد دعوت‌ها": invite.count,
          تاریخ: invite.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
      <div className="glass p-4 mt-6">
        <h2 className="text-xl font-semibold mb-4">لینک دعوت</h2>
        <a href={inviteLink} target="_blank" className="text-blue-400">
          {inviteLink}
        </a>
      </div>
    </motion.div>
  );
};

export default Invites;
```

#### 4.19. صفحه لاگ‌ها (client/src/pages/Logs.tsx)
صفحه نمایش لاگ‌ها با قابلیت دانلود:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import DataTable from "../components/DataTable";
import { motion } from "framer-motion";
import { FaDownload } from "react-icons/fa";

const Logs = () => {
  const [logs, setLogs] = useState<any[]>([]);

  useEffect(() => {
    const fetchLogs = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/logs");
        setLogs(response.data);
      } catch (error) {
        console.error("Error fetching logs:", error);
      }
    };
    fetchLogs();
  }, []);

  const handleDownload = () => {
    const csv = logs.map((log) => `${log.user},${log.action},${log.date}`).join("\n");
    const blob = new Blob([`کاربر,فعالیت,تاریخ\n${csv}`], { type: "text/csv" });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "logs.csv";
    a.click();
  };

  const columns = ["کاربر", "فعالیت", "تاریخ"];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">📜 لاگ‌ها</h1>
      <button
        onClick={handleDownload}
        className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mb-4 flex items-center space-x-2"
      >
        <FaDownload />
        <span>دانلود لاگ‌ها</span>
      </button>
      <DataTable
        columns={columns}
        data={logs.map((log) => ({
          id: log.id,
          کاربر: log.user,
          فعالیت: log.action,
          تاریخ: log.date,
        }))}
        onEdit={() => {}}
        onDelete={() => {}}
      />
    </motion.div>
  );
};

export default Logs;
```

#### 4.20. صفحه تنظیمات (client/src/pages/Settings.tsx)
صفحه تنظیمات با تمام بخش‌ها:

```tsx
import { useEffect, useState } from "react";
import axios from "axios";
import { motion } from "framer-motion";

const Settings = () => {
  const [settings, setSettings] = useState({
    conversionRate: 0,
    robberyChance: 0,
    transferLimit: 0,
    gameEnabled: false,
    rewardPeriod: 0,
    voteReward: 0,
    voteEnabled: false,
    inviteReward: 0,
    inviteEnabled: false,
  });

  useEffect(() => {
    const fetchSettings = async () => {
      try {
        const response = await axios.get("http://localhost:5000/api/admin/settings");
        setSettings(response.data);
      } catch (error) {
        console.error("Error fetching settings:", error);
      }
    };
    fetchSettings();
  }, []);

  const handleUpdateSettings = async () => {
    try {
      await axios.put("http://localhost:5000/api/admin/settings", settings);
      alert("تنظیمات با موفقیت به‌روزرسانی شد!");
    } catch (error) {
      console.error("Error updating settings:", error);
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="ml-64 p-6"
    >
      <h1 className="text-3xl font-bold mb-6">⚙️ تنظیمات</h1>
      <div className="glass p-4">
        <h2 className="text-xl font-semibold mb-4">تنظیمات اقتصاد</h2>
        <div className="grid grid-cols-3 gap-4">
          <div>
            <label>نرخ تبدیل (سی‌کوین به کریستال):</label>
            <input
              type="number"
              value={settings.conversionRate}
              onChange={(e) => setSettings({ ...settings, conversionRate: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>شانس سرقت (%):</label>
            <input
              type="number"
              value={settings.robberyChance}
              onChange={(e) => setSettings({ ...settings, robberyChance: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>محدودیت انتقال (سی‌کوین):</label>
            <input
              type="number"
              value={settings.transferLimit}
              onChange={(e) => setSettings({ ...settings, transferLimit: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات بازی‌ها</h2>
        <div>
          <label>فعال کردن بازی‌ها:</label>
          <input
            type="checkbox"
            checked={settings.gameEnabled}
            onChange={(e) => setSettings({ ...settings, gameEnabled: e.target.checked })}
          />
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات جایزه‌ها</h2>
        <div>
          <label>دوره جایزه (ساعت):</label>
          <input
            type="number"
            value={settings.rewardPeriod}
            onChange={(e) => setSettings({ ...settings, rewardPeriod: parseInt(e.target.value) })}
            className="p-2 rounded bg-gray-800 text-white w-full"
          />
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات رأی‌گیری</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>جایزه رأی (سی‌کوین):</label>
            <input
              type="number"
              value={settings.voteReward}
              onChange={(e) => setSettings({ ...settings, voteReward: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>فعال کردن رأی‌گیری:</label>
            <input
              type="checkbox"
              checked={settings.voteEnabled}
              onChange={(e) => setSettings({ ...settings, voteEnabled: e.target.checked })}
            />
          </div>
        </div>
        <h2 className="text-xl font-semibold mt-6 mb-4">تنظیمات دعوت</h2>
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label>جایزه دعوت (سی‌کوین):</label>
            <input
              type="number"
              value={settings.inviteReward}
              onChange={(e) => setSettings({ ...settings, inviteReward: parseInt(e.target.value) })}
              className="p-2 rounded bg-gray-800 text-white w-full"
            />
          </div>
          <div>
            <label>فعال کردن جوایز دعوت:</label>
            <input
              type="checkbox"
              checked={settings.inviteEnabled}
              onChange={(e) => setSettings({ ...settings, inviteEnabled: e.target.checked })}
            />
          </div>
        </div>
        <button
          onClick={handleUpdateSettings}
          className="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded mt-6"
